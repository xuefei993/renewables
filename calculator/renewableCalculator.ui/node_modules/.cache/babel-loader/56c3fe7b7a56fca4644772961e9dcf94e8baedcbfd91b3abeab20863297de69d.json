{"ast":null,"code":"import axios from\"axios\";const API_BASE=\"http://localhost:8080/api\";export const getComponents=type=>axios.get(\"\".concat(API_BASE,\"/\").concat(type));export const calculate=data=>axios.post(\"\".concat(API_BASE,\"/calculate\"),data);export const calculateSolarPotential=data=>axios.post(\"\".concat(API_BASE,\"/solar-potential\"),data);// New Location APIs\nexport const getAllRegions=()=>axios.get(\"\".concat(API_BASE,\"/locations/regions\"));export const getRegionsByCountry=country=>axios.get(\"\".concat(API_BASE,\"/locations/regions/country/\").concat(country));export const searchCitiesByName=name=>axios.get(\"\".concat(API_BASE,\"/locations/cities/search?name=\").concat(name));export const searchCitiesByPostcode=prefix=>axios.get(\"\".concat(API_BASE,\"/locations/cities/postcode?prefix=\").concat(prefix));export const getCitiesByCountry=country=>axios.get(\"\".concat(API_BASE,\"/locations/cities/country/\").concat(country));// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData=(latitude,longitude,location)=>axios.post(\"\".concat(API_BASE,\"/nasa-power/solar-data\"),{latitude,longitude,location});export const fetchSolarDataGet=(latitude,longitude,location)=>axios.get(\"\".concat(API_BASE,\"/nasa-power/solar-data?latitude=\").concat(latitude,\"&longitude=\").concat(longitude,\"&location=\").concat(location||''));// New Location Specific Yield API\nexport const calculateLocationSpecificYield=data=>axios.post(\"\".concat(API_BASE,\"/location-yield/calculate\"),data);export const calculateLocationSpecificYieldForMonth=(month,latitude,longitude,location)=>axios.get(\"\".concat(API_BASE,\"/location-yield/month/\").concat(month,\"?latitude=\").concat(latitude,\"&longitude=\").concat(longitude,\"&location=\").concat(location||''));// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity=data=>axios.post(\"\".concat(API_BASE,\"/solar-capacity/calculate\"),data);export const getAllSolarPanelTypes=()=>axios.get(\"\".concat(API_BASE,\"/solar-capacity/panel-types\"));export const getSolarPanelTypeById=id=>axios.get(\"\".concat(API_BASE,\"/solar-capacity/panel-types/\").concat(id));// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration=data=>axios.post(\"\".concat(API_BASE,\"/solar-generation/monthly\"),data);// New Electricity Demand APIs\nexport const calculateElectricityDemand=data=>axios.post(\"\".concat(API_BASE,\"/electricity-demand/calculate\"),data);export const getElectricityDemandProportions=()=>axios.get(\"\".concat(API_BASE,\"/electricity-demand/proportions\"));export const validateMonthlyElectricityUsage=monthlyUsage=>axios.post(\"\".concat(API_BASE,\"/electricity-demand/validate-monthly\"),monthlyUsage);// New Gas Demand APIs\nexport const calculateGasDemand=data=>axios.post(\"\".concat(API_BASE,\"/gas-demand/calculate\"),data);export const getGasDemandProportions=()=>axios.get(\"\".concat(API_BASE,\"/gas-demand/proportions\"));export const validateMonthlyGasUsage=monthlyUsage=>axios.post(\"\".concat(API_BASE,\"/gas-demand/validate-monthly\"),monthlyUsage);","map":{"version":3,"names":["axios","API_BASE","getComponents","type","get","concat","calculate","data","post","calculateSolarPotential","getAllRegions","getRegionsByCountry","country","searchCitiesByName","name","searchCitiesByPostcode","prefix","getCitiesByCountry","fetchSolarData","latitude","longitude","location","fetchSolarDataGet","calculateLocationSpecificYield","calculateLocationSpecificYieldForMonth","month","calculateTotalInstalledCapacity","getAllSolarPanelTypes","getSolarPanelTypeById","id","calculateMonthlyElectricityGeneration","calculateElectricityDemand","getElectricityDemandProportions","validateMonthlyElectricityUsage","monthlyUsage","calculateGasDemand","getGasDemandProportions","validateMonthlyGasUsage"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE = \"http://localhost:8080/api\";\n\nexport const getComponents = (type) => axios.get(`${API_BASE}/${type}`);\nexport const calculate = (data) => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = (data) => axios.post(`${API_BASE}/solar-potential`, data);\n\n// New Location APIs\nexport const getAllRegions = () => axios.get(`${API_BASE}/locations/regions`);\n\nexport const getRegionsByCountry = (country) => axios.get(`${API_BASE}/locations/regions/country/${country}`);\n\nexport const searchCitiesByName = (name) => axios.get(`${API_BASE}/locations/cities/search?name=${name}`);\n\nexport const searchCitiesByPostcode = (prefix) => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`);\n\nexport const getCitiesByCountry = (country) => axios.get(`${API_BASE}/locations/cities/country/${country}`);\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => \n    axios.post(`${API_BASE}/nasa-power/solar-data`, { latitude, longitude, location });\n\nexport const fetchSolarDataGet = (latitude, longitude, location) => \n    axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = (data) => axios.post(`${API_BASE}/location-yield/calculate`, data);\n\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => \n    axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = (data) => axios.post(`${API_BASE}/solar-capacity/calculate`, data);\n\nexport const getAllSolarPanelTypes = () => axios.get(`${API_BASE}/solar-capacity/panel-types`);\n\nexport const getSolarPanelTypeById = (id) => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`);\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = (data) => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = (data) => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\n\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\n\nexport const validateMonthlyElectricityUsage = (monthlyUsage) => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);\n\n// New Gas Demand APIs\nexport const calculateGasDemand = (data) => axios.post(`${API_BASE}/gas-demand/calculate`, data);\n\nexport const getGasDemandProportions = () => axios.get(`${API_BASE}/gas-demand/proportions`);\n\nexport const validateMonthlyGasUsage = (monthlyUsage) => axios.post(`${API_BASE}/gas-demand/validate-monthly`, monthlyUsage);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}