{"ast":null,"code":"import axios from \"axios\";\nimport { mockDataService } from \"./services/mockDataService\";\nconst API_BASE = \"http://localhost:8080/api\";\n\n// Helper function to create API call with fallback\nconst apiWithFallback = async (apiCall, fallbackData) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.warn(`API call failed, using cached data: ${error.message}`);\n    return {\n      data: fallbackData\n    };\n  }\n};\nexport const getComponents = type => axios.get(`${API_BASE}/${type}`);\nexport const calculate = data => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = data => apiWithFallback(() => axios.post(`${API_BASE}/solar-potential`, data), mockDataService.getSolarPotentialResult(data));\n\n// New Location APIs\nexport const getAllRegions = () => axios.get(`${API_BASE}/locations/regions`);\nexport const getRegionsByCountry = country => axios.get(`${API_BASE}/locations/regions/country/${country}`);\nexport const searchCitiesByName = name => axios.get(`${API_BASE}/locations/cities/search?name=${name}`);\nexport const searchCitiesByPostcode = prefix => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`);\nexport const getCitiesByCountry = country => axios.get(`${API_BASE}/locations/cities/country/${country}`);\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => axios.post(`${API_BASE}/nasa-power/solar-data`, {\n  latitude,\n  longitude,\n  location\n});\nexport const fetchSolarDataGet = (latitude, longitude, location) => axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = data => axios.post(`${API_BASE}/location-yield/calculate`, data);\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = data => axios.post(`${API_BASE}/solar-capacity/calculate`, data);\nexport const getAllSolarPanelTypes = () => axios.get(`${API_BASE}/solar-capacity/panel-types`);\nexport const getSolarPanelTypeById = id => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`);\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = data => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = data => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\nexport const validateMonthlyElectricityUsage = monthlyUsage => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);\n\n// New Gas Demand APIs\nexport const calculateGasDemand = data => axios.post(`${API_BASE}/gas-demand/calculate`, data);\nexport const getGasDemandProportions = () => axios.get(`${API_BASE}/gas-demand/proportions`);\nexport const validateMonthlyGasUsage = monthlyUsage => axios.post(`${API_BASE}/gas-demand/validate-monthly`, monthlyUsage);","map":{"version":3,"names":["axios","mockDataService","API_BASE","apiWithFallback","apiCall","fallbackData","error","console","warn","message","data","getComponents","type","get","calculate","post","calculateSolarPotential","getSolarPotentialResult","getAllRegions","getRegionsByCountry","country","searchCitiesByName","name","searchCitiesByPostcode","prefix","getCitiesByCountry","fetchSolarData","latitude","longitude","location","fetchSolarDataGet","calculateLocationSpecificYield","calculateLocationSpecificYieldForMonth","month","calculateTotalInstalledCapacity","getAllSolarPanelTypes","getSolarPanelTypeById","id","calculateMonthlyElectricityGeneration","calculateElectricityDemand","getElectricityDemandProportions","validateMonthlyElectricityUsage","monthlyUsage","calculateGasDemand","getGasDemandProportions","validateMonthlyGasUsage"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/api.js"],"sourcesContent":["import axios from \"axios\";\nimport { mockDataService } from \"./services/mockDataService\";\n\nconst API_BASE = \"http://localhost:8080/api\";\n\n// Helper function to create API call with fallback\nconst apiWithFallback = async (apiCall, fallbackData) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.warn(`API call failed, using cached data: ${error.message}`);\n    return { data: fallbackData };\n  }\n};\n\nexport const getComponents = (type) => axios.get(`${API_BASE}/${type}`);\nexport const calculate = (data) => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = (data) => \n  apiWithFallback(\n    () => axios.post(`${API_BASE}/solar-potential`, data),\n    mockDataService.getSolarPotentialResult(data)\n  );\n\n// New Location APIs\nexport const getAllRegions = () => axios.get(`${API_BASE}/locations/regions`);\n\nexport const getRegionsByCountry = (country) => axios.get(`${API_BASE}/locations/regions/country/${country}`);\n\nexport const searchCitiesByName = (name) => axios.get(`${API_BASE}/locations/cities/search?name=${name}`);\n\nexport const searchCitiesByPostcode = (prefix) => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`);\n\nexport const getCitiesByCountry = (country) => axios.get(`${API_BASE}/locations/cities/country/${country}`);\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => \n    axios.post(`${API_BASE}/nasa-power/solar-data`, { latitude, longitude, location });\n\nexport const fetchSolarDataGet = (latitude, longitude, location) => \n    axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = (data) => axios.post(`${API_BASE}/location-yield/calculate`, data);\n\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => \n    axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = (data) => axios.post(`${API_BASE}/solar-capacity/calculate`, data);\n\nexport const getAllSolarPanelTypes = () => axios.get(`${API_BASE}/solar-capacity/panel-types`);\n\nexport const getSolarPanelTypeById = (id) => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`);\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = (data) => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = (data) => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\n\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\n\nexport const validateMonthlyElectricityUsage = (monthlyUsage) => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);\n\n// New Gas Demand APIs\nexport const calculateGasDemand = (data) => axios.post(`${API_BASE}/gas-demand/calculate`, data);\n\nexport const getGasDemandProportions = () => axios.get(`${API_BASE}/gas-demand/proportions`);\n\nexport const validateMonthlyGasUsage = (monthlyUsage) => axios.post(`${API_BASE}/gas-demand/validate-monthly`, monthlyUsage);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}