{"ast":null,"code":"// 电费服务 - 根据地区提供电费数据\nexport const tariffService = {\n  // Ofgem 官方API端点\n  OFGEM_API_BASE: 'https://www.ofgem.gov.uk',\n  // 英国电网地区划分 (基于Ofgem官方分区)\n  // 这些是Ofgem官方认可的14个配电网地区\n  DNO_REGIONS: {\n    // 英格兰和威尔士地区\n    10: {\n      name: 'Eastern England',\n      operator: 'UK Power Networks'\n    },\n    11: {\n      name: 'East Midlands',\n      operator: 'Western Power Distribution'\n    },\n    12: {\n      name: 'London',\n      operator: 'UK Power Networks'\n    },\n    13: {\n      name: 'Merseyside and Northern Wales',\n      operator: 'Scottish Power'\n    },\n    14: {\n      name: 'West Midlands',\n      operator: 'Western Power Distribution'\n    },\n    15: {\n      name: 'North Eastern England',\n      operator: 'Northern Power Grid'\n    },\n    16: {\n      name: 'North Western England',\n      operator: 'Electricity North West'\n    },\n    17: {\n      name: 'Northern Scotland',\n      operator: 'Scottish and Southern Electricity'\n    },\n    18: {\n      name: 'Southern Scotland',\n      operator: 'Scottish Power'\n    },\n    19: {\n      name: 'South Eastern England',\n      operator: 'UK Power Networks'\n    },\n    20: {\n      name: 'Southern England',\n      operator: 'Scottish and Southern Electricity'\n    },\n    21: {\n      name: 'South Wales',\n      operator: 'Western Power Distribution'\n    },\n    22: {\n      name: 'South Western England',\n      operator: 'Western Power Distribution'\n    },\n    23: {\n      name: 'Yorkshire',\n      operator: 'Northern Power Grid'\n    }\n  },\n  // 临时默认费率（来源：Ofgem价格上限数据）\n  // 注意：这些应该通过API获取最新数据\n  defaultRegionTariffs: {\n    // 基于Ofgem 2024年价格上限的典型费率\n    electricity: {\n      standardRate: 24.50,\n      // 便士/kWh\n      standingCharge: 60.10,\n      // 便士/天\n      economy7Day: 25.79,\n      economy7Night: 20.47\n    },\n    gas: {\n      standardRate: 6.04,\n      // 便士/kWh  \n      standingCharge: 31.43 // 便士/天\n    }\n  },\n  // 根据邮编前缀匹配地区\n  postcodeToRegion: {\n    // 伦敦邮编\n    'E': 'London',\n    'EC': 'London',\n    'N': 'London',\n    'NW': 'London',\n    'SE': 'London',\n    'SW': 'London',\n    'W': 'London',\n    'WC': 'London',\n    // 苏格兰邮编\n    'AB': 'Scotland',\n    'DD': 'Scotland',\n    'DG': 'Scotland',\n    'EH': 'Scotland',\n    'FK': 'Scotland',\n    'G': 'Scotland',\n    'HS': 'Scotland',\n    'IV': 'Scotland',\n    'KA': 'Scotland',\n    'KW': 'Scotland',\n    'KY': 'Scotland',\n    'ML': 'Scotland',\n    'PA': 'Scotland',\n    'PH': 'Scotland',\n    'TD': 'Scotland',\n    'ZE': 'Scotland',\n    // 威尔士邮编\n    'CF': 'Wales',\n    'LD': 'Wales',\n    'LL': 'Wales',\n    'NP': 'Wales',\n    'SA': 'Wales',\n    'SY': 'Wales',\n    // 北爱尔兰邮编\n    'BT': 'Northern Ireland'\n  },\n  // 获取默认电费（全英国平均）\n  getDefaultTariffs() {\n    return {\n      standardRate: 24.5,\n      standingCharge: 60.1,\n      peakRate: 28.3,\n      offPeakRate: 20.2,\n      nightRate: 15.8,\n      economy7NightRate: 13.5,\n      economy10NightRate: 12.8,\n      gasRate: 7.5,\n      gasStandingCharge: 31.4,\n      feedInTariffRate: 4.1,\n      smartExportGuarantee: 4.1\n    };\n  },\n  // 根据邮编获取地区\n  getRegionFromPostcode(postcode) {\n    var _cleanPostcode$match;\n    if (!postcode) return 'England'; // 默认值\n\n    const cleanPostcode = postcode.replace(/\\s+/g, '').toUpperCase();\n\n    // 提取邮编前缀\n    const prefix = (_cleanPostcode$match = cleanPostcode.match(/^[A-Z]+/)) === null || _cleanPostcode$match === void 0 ? void 0 : _cleanPostcode$match[0];\n    if (!prefix) return 'England';\n\n    // 首先检查完整前缀\n    if (this.postcodeToRegion[prefix]) {\n      return this.postcodeToRegion[prefix];\n    }\n\n    // 然后检查单字母前缀\n    const singleLetter = prefix.charAt(0);\n    if (this.postcodeToRegion[singleLetter]) {\n      return this.postcodeToRegion[singleLetter];\n    }\n    return 'England'; // 默认为英格兰\n  },\n  // 根据位置数据获取地区电费\n  getTariffsForLocation(locationData) {\n    let region = 'England'; // 默认地区\n\n    // 优先使用country字段\n    if (locationData.country) {\n      if (locationData.country.includes('Scotland')) {\n        region = 'Scotland';\n      } else if (locationData.country.includes('Wales')) {\n        region = 'Wales';\n      } else if (locationData.country.includes('Northern Ireland')) {\n        region = 'Northern Ireland';\n      }\n    }\n\n    // 如果country字段不明确，使用邮编判断\n    if (region === 'England' && locationData.postcode) {\n      region = this.getRegionFromPostcode(locationData.postcode);\n    }\n\n    // 特殊处理伦敦地区\n    if (region === 'England' && locationData.region) {\n      if (locationData.region.includes('London') || locationData.region.includes('Greater London')) {\n        region = 'London';\n      }\n    }\n\n    // 获取该地区的电费数据\n    const regionTariffs = this.regionTariffs[region] || this.regionTariffs['England'];\n    return {\n      ...this.getDefaultTariffs(),\n      ...regionTariffs,\n      detectedRegion: region,\n      source: 'regional_average'\n    };\n  },\n  // 获取地区信息说明\n  getRegionInfo(region) {\n    const info = {\n      'England': {\n        name: '英格兰',\n        description: '英格兰地区平均电费'\n      },\n      'Scotland': {\n        name: '苏格兰',\n        description: '苏格兰地区平均电费（通常略低于英格兰）'\n      },\n      'Wales': {\n        name: '威尔士',\n        description: '威尔士地区平均电费'\n      },\n      'Northern Ireland': {\n        name: '北爱尔兰',\n        description: '北爱尔兰地区平均电费（通常较高）'\n      },\n      'London': {\n        name: '伦敦',\n        description: '伦敦地区平均电费（通常略高于英格兰平均值）'\n      }\n    };\n    return info[region] || info['England'];\n  }\n};","map":{"version":3,"names":["tariffService","OFGEM_API_BASE","DNO_REGIONS","name","operator","defaultRegionTariffs","electricity","standardRate","standingCharge","economy7Day","economy7Night","gas","postcodeToRegion","getDefaultTariffs","peakRate","offPeakRate","nightRate","economy7NightRate","economy10NightRate","gasRate","gasStandingCharge","feedInTariffRate","smartExportGuarantee","getRegionFromPostcode","postcode","_cleanPostcode$match","cleanPostcode","replace","toUpperCase","prefix","match","singleLetter","charAt","getTariffsForLocation","locationData","region","country","includes","regionTariffs","detectedRegion","source","getRegionInfo","info","description"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/tariffService.js"],"sourcesContent":["// 电费服务 - 根据地区提供电费数据\nexport const tariffService = {\n  // Ofgem 官方API端点\n  OFGEM_API_BASE: 'https://www.ofgem.gov.uk',\n  \n  // 英国电网地区划分 (基于Ofgem官方分区)\n  // 这些是Ofgem官方认可的14个配电网地区\n  DNO_REGIONS: {\n    // 英格兰和威尔士地区\n    10: { name: 'Eastern England', operator: 'UK Power Networks' },\n    11: { name: 'East Midlands', operator: 'Western Power Distribution' },\n    12: { name: 'London', operator: 'UK Power Networks' },\n    13: { name: 'Merseyside and Northern Wales', operator: 'Scottish Power' },\n    14: { name: 'West Midlands', operator: 'Western Power Distribution' },\n    15: { name: 'North Eastern England', operator: 'Northern Power Grid' },\n    16: { name: 'North Western England', operator: 'Electricity North West' },\n    17: { name: 'Northern Scotland', operator: 'Scottish and Southern Electricity' },\n    18: { name: 'Southern Scotland', operator: 'Scottish Power' },\n    19: { name: 'South Eastern England', operator: 'UK Power Networks' },\n    20: { name: 'Southern England', operator: 'Scottish and Southern Electricity' },\n    21: { name: 'South Wales', operator: 'Western Power Distribution' },\n    22: { name: 'South Western England', operator: 'Western Power Distribution' },\n    23: { name: 'Yorkshire', operator: 'Northern Power Grid' }\n  },\n\n  // 临时默认费率（来源：Ofgem价格上限数据）\n  // 注意：这些应该通过API获取最新数据\n  defaultRegionTariffs: {\n    // 基于Ofgem 2024年价格上限的典型费率\n    electricity: {\n      standardRate: 24.50, // 便士/kWh\n      standingCharge: 60.10, // 便士/天\n      economy7Day: 25.79,\n      economy7Night: 20.47\n    },\n    gas: {\n      standardRate: 6.04, // 便士/kWh  \n      standingCharge: 31.43 // 便士/天\n    }\n  },\n\n  // 根据邮编前缀匹配地区\n  postcodeToRegion: {\n    // 伦敦邮编\n    'E': 'London', 'EC': 'London', 'N': 'London', 'NW': 'London',\n    'SE': 'London', 'SW': 'London', 'W': 'London', 'WC': 'London',\n    \n    // 苏格兰邮编\n    'AB': 'Scotland', 'DD': 'Scotland', 'DG': 'Scotland', 'EH': 'Scotland',\n    'FK': 'Scotland', 'G': 'Scotland', 'HS': 'Scotland', 'IV': 'Scotland',\n    'KA': 'Scotland', 'KW': 'Scotland', 'KY': 'Scotland', 'ML': 'Scotland',\n    'PA': 'Scotland', 'PH': 'Scotland', 'TD': 'Scotland', 'ZE': 'Scotland',\n    \n    // 威尔士邮编\n    'CF': 'Wales', 'LD': 'Wales', 'LL': 'Wales', 'NP': 'Wales',\n    'SA': 'Wales', 'SY': 'Wales',\n    \n    // 北爱尔兰邮编\n    'BT': 'Northern Ireland'\n  },\n\n  // 获取默认电费（全英国平均）\n  getDefaultTariffs() {\n    return {\n      standardRate: 24.5,\n      standingCharge: 60.1,\n      peakRate: 28.3,\n      offPeakRate: 20.2,\n      nightRate: 15.8,\n      economy7NightRate: 13.5,\n      economy10NightRate: 12.8,\n      gasRate: 7.5,\n      gasStandingCharge: 31.4,\n      feedInTariffRate: 4.1,\n      smartExportGuarantee: 4.1\n    };\n  },\n\n  // 根据邮编获取地区\n  getRegionFromPostcode(postcode) {\n    if (!postcode) return 'England'; // 默认值\n    \n    const cleanPostcode = postcode.replace(/\\s+/g, '').toUpperCase();\n    \n    // 提取邮编前缀\n    const prefix = cleanPostcode.match(/^[A-Z]+/)?.[0];\n    if (!prefix) return 'England';\n    \n    // 首先检查完整前缀\n    if (this.postcodeToRegion[prefix]) {\n      return this.postcodeToRegion[prefix];\n    }\n    \n    // 然后检查单字母前缀\n    const singleLetter = prefix.charAt(0);\n    if (this.postcodeToRegion[singleLetter]) {\n      return this.postcodeToRegion[singleLetter];\n    }\n    \n    return 'England'; // 默认为英格兰\n  },\n\n  // 根据位置数据获取地区电费\n  getTariffsForLocation(locationData) {\n    let region = 'England'; // 默认地区\n    \n    // 优先使用country字段\n    if (locationData.country) {\n      if (locationData.country.includes('Scotland')) {\n        region = 'Scotland';\n      } else if (locationData.country.includes('Wales')) {\n        region = 'Wales';\n      } else if (locationData.country.includes('Northern Ireland')) {\n        region = 'Northern Ireland';\n      }\n    }\n    \n    // 如果country字段不明确，使用邮编判断\n    if (region === 'England' && locationData.postcode) {\n      region = this.getRegionFromPostcode(locationData.postcode);\n    }\n    \n    // 特殊处理伦敦地区\n    if (region === 'England' && locationData.region) {\n      if (locationData.region.includes('London') || \n          locationData.region.includes('Greater London')) {\n        region = 'London';\n      }\n    }\n    \n    // 获取该地区的电费数据\n    const regionTariffs = this.regionTariffs[region] || this.regionTariffs['England'];\n    \n    return {\n      ...this.getDefaultTariffs(),\n      ...regionTariffs,\n      detectedRegion: region,\n      source: 'regional_average'\n    };\n  },\n\n  // 获取地区信息说明\n  getRegionInfo(region) {\n    const info = {\n      'England': {\n        name: '英格兰',\n        description: '英格兰地区平均电费'\n      },\n      'Scotland': {\n        name: '苏格兰',\n        description: '苏格兰地区平均电费（通常略低于英格兰）'\n      },\n      'Wales': {\n        name: '威尔士',\n        description: '威尔士地区平均电费'\n      },\n      'Northern Ireland': {\n        name: '北爱尔兰',\n        description: '北爱尔兰地区平均电费（通常较高）'\n      },\n      'London': {\n        name: '伦敦',\n        description: '伦敦地区平均电费（通常略高于英格兰平均值）'\n      }\n    };\n    \n    return info[region] || info['England'];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}