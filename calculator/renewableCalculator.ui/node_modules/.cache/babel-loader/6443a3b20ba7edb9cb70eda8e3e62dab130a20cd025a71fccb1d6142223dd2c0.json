{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import{calculateElectricityDemand,calculateGasDemand}from'../api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const EnergyDemandChart=_ref=>{let{userData}=_ref;const[electricityChartData,setElectricityChartData]=useState(null);const[gasChartData,setGasChartData]=useState(null);const[summaryData,setSummaryData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];useEffect(()=>{const fetchEnergyDemandData=async()=>{try{setLoading(true);setError(null);// Prepare electricity demand request based on available user data\nconst electricityRequest=prepareElectricityRequest(userData);// Prepare gas demand request\nconst gasRequest=prepareGasRequest(userData);console.log('Electricity request:',electricityRequest);// Debug log\nconsole.log('Gas request:',gasRequest);// Debug log\n// Fetch both electricity and gas demand data\nconst[electricityResponse,gasResponse]=await Promise.all([calculateElectricityDemand(electricityRequest),calculateGasDemand(gasRequest)]);const electricityData=electricityResponse.data;const gasData=gasResponse.data;console.log('Electricity response:',electricityData);// Debug log\nconsole.log('Gas response:',gasData);// Debug log\n// Extract monthly data\nconst electricityMonthly=[];const gasMonthly=[];for(let month=1;month<=12;month++){electricityMonthly.push(electricityData.monthlyElectricityDemand[month]||0);gasMonthly.push(gasData.monthlyGasDemand[month]||0);}// Prepare separate chart data for electricity\nconst electricityChartConfig={labels:months,datasets:[{label:'Electricity Demand (kWh)',data:electricityMonthly,borderColor:'rgb(75, 192, 192)',backgroundColor:'rgba(75, 192, 192, 0.2)',tension:0.1,pointRadius:5,pointHoverRadius:7,fill:true}]};// Prepare separate chart data for gas\nconst gasChartConfig={labels:months,datasets:[{label:'Gas Demand (kWh)',data:gasMonthly,borderColor:'rgb(255, 99, 132)',backgroundColor:'rgba(255, 99, 132, 0.2)',tension:0.1,pointRadius:5,pointHoverRadius:7,fill:true}]};setElectricityChartData(electricityChartConfig);setGasChartData(gasChartConfig);// Set summary data\nsetSummaryData({electricity:{annual:electricityData.annualElectricityDemand,peak:electricityData.peakMonthDemand,peakMonth:months[electricityData.peakMonth-1],low:electricityData.lowMonthDemand,lowMonth:months[electricityData.lowMonth-1],method:electricityData.calculationMethod},gas:{annual:gasData.annualGasDemand,peak:gasData.peakMonthDemand,peakMonth:months[gasData.peakMonth-1],low:gasData.lowMonthDemand,lowMonth:months[gasData.lowMonth-1],method:gasData.calculationMethod}});}catch(error){console.error('Error fetching energy demand data:',error);setError('Failed to load energy demand data. Please try again.');}finally{setLoading(false);}};if(userData){fetchEnergyDemandData();}},[userData]);// Function to prepare electricity request based on user data priority\nconst prepareElectricityRequest=userData=>{// Check if user provided monthly electricity usage\nconst hasMonthlyElectricityData=checkMonthlyElectricityData(userData);if(hasMonthlyElectricityData){console.log('Using user monthly electricity data');return{monthlyElectricityUsage:convertMonthlyElectricityData(userData.monthlyElectricityUsage)};}// Check if user provided annual electricity usage\nconst hasAnnualElectricityData=userData.annualElectricityUsage&&parseFloat(userData.annualElectricityUsage)>0;if(hasAnnualElectricityData){console.log('Using user annual electricity data');return{annualElectricityUsage:parseFloat(userData.annualElectricityUsage),hasHeatPump:userData.heatingType==='heat-pump'||userData.heatingType==='heat pumps'};}// Fall back to estimation\nconsole.log('Using electricity estimation');return{needsEstimation:true,occupants:userData.occupants||3,hotWaterType:userData.hotWaterType||'gas-boiler',heatingType:userData.heatingType||'gas',houseArea:userData.houseArea||100,buildYear:userData.buildYear||'1981-2002',wallType:userData.wallType||'modern',windowType:userData.windowType||'double',houseType:userData.houseType||'semi-detached',epcRating:userData.epcRating||'D',roofInsulation:userData.roofInsulation||'no',floorInsulation:userData.floorInsulation||'no',latitude:userData.latitude,longitude:userData.longitude};};// Function to prepare gas request based on user data priority\nconst prepareGasRequest=userData=>{// Check if user provided monthly gas usage\nconst hasMonthlyGasData=checkMonthlyGasData(userData);if(hasMonthlyGasData){console.log('Using user monthly gas data');return{monthlyGasUsage:convertMonthlyGasData(userData.monthlyGasUsage)};}// Check if user provided annual gas usage\nconst hasAnnualGasData=userData.annualGasUsage&&parseFloat(userData.annualGasUsage)>0;if(hasAnnualGasData){console.log('Using user annual gas data');return{annualGasUsage:parseFloat(userData.annualGasUsage)};}// Fall back to estimation\nconsole.log('Using gas estimation');return{needsEstimation:true,occupants:userData.occupants||3,hotWaterType:userData.hotWaterType||'gas-boiler',heatingType:userData.heatingType||'gas',houseArea:userData.houseArea||100,buildYear:userData.buildYear||'1981-2002',wallType:userData.wallType||'modern',windowType:userData.windowType||'double',houseType:userData.houseType||'semi-detached',epcRating:userData.epcRating||'D',roofInsulation:userData.roofInsulation||'no',floorInsulation:userData.floorInsulation||'no',latitude:userData.latitude,longitude:userData.longitude,boilerEfficiency:userData.boilerEfficiency||92};};// Helper function to check if monthly electricity data is available and valid\nconst checkMonthlyElectricityData=userData=>{if(!userData.monthlyElectricityUsage)return false;const monthNames=['january','february','march','april','may','june','july','august','september','october','november','december'];// Check if all months have valid data\nreturn monthNames.every(month=>{const value=userData.monthlyElectricityUsage[month];return value&&parseFloat(value)>=0;});};// Helper function to check if monthly gas data is available and valid\nconst checkMonthlyGasData=userData=>{if(!userData.monthlyGasUsage)return false;const monthNames=['january','february','march','april','may','june','july','august','september','october','november','december'];// Check if all months have valid data\nreturn monthNames.every(month=>{const value=userData.monthlyGasUsage[month];return value&&parseFloat(value)>=0;});};// Helper function to convert frontend monthly data format to backend format\nconst convertMonthlyElectricityData=monthlyData=>{const monthNames=['january','february','march','april','may','june','july','august','september','october','november','december'];const converted={};monthNames.forEach((monthName,index)=>{converted[index+1]=parseFloat(monthlyData[monthName])||0;});return converted;};// Helper function to convert frontend monthly gas data format to backend format\nconst convertMonthlyGasData=monthlyData=>{const monthNames=['january','february','march','april','may','june','july','august','september','october','november','december'];const converted={};monthNames.forEach((monthName,index)=>{converted[index+1]=parseFloat(monthlyData[monthName])||0;});return converted;};// Chart options for electricity\nconst electricityChartOptions={responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'top',labels:{usePointStyle:true,padding:20}},title:{display:true,text:'Monthly Electricity Demand',font:{size:16,weight:'bold'},padding:20},tooltip:{mode:'index',intersect:false,callbacks:{label:function(context){return\"\".concat(context.dataset.label,\": \").concat(context.parsed.y.toFixed(0),\" kWh\");}}}},scales:{x:{display:true,title:{display:true,text:'Month',font:{weight:'bold'}},grid:{display:false}},y:{display:true,title:{display:true,text:'Electricity Demand (kWh)',font:{weight:'bold'}},beginAtZero:true,grid:{color:'rgba(0, 0, 0, 0.1)'}}},interaction:{mode:'nearest',axis:'x',intersect:false}};// Chart options for gas\nconst gasChartOptions={responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'top',labels:{usePointStyle:true,padding:20}},title:{display:true,text:'Monthly Gas Demand',font:{size:16,weight:'bold'},padding:20},tooltip:{mode:'index',intersect:false,callbacks:{label:function(context){return\"\".concat(context.dataset.label,\": \").concat(context.parsed.y.toFixed(0),\" kWh\");}}}},scales:{x:{display:true,title:{display:true,text:'Month',font:{weight:'bold'}},grid:{display:false}},y:{display:true,title:{display:true,text:'Gas Demand (kWh)',font:{weight:'bold'}},beginAtZero:true,grid:{color:'rgba(0, 0, 0, 0.1)'}}},interaction:{mode:'nearest',axis:'x',intersect:false}};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"energy-demand-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Energy Demand\"}),/*#__PURE__*/_jsx(\"div\",{className:\"loading-state\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Loading energy demand data...\"})})]});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"energy-demand-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Energy Demand\"}),/*#__PURE__*/_jsx(\"div\",{className:\"error-state\",children:/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"energy-demand-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Energy Demand\"}),summaryData&&/*#__PURE__*/_jsx(\"div\",{className:\"energy-summary\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"energy-summary-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"energy-type-summary electricity-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Electricity\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Annual Demand\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.electricity.annual.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Peak Month\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.electricity.peakMonth,\": \",summaryData.electricity.peak.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Low Month\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.electricity.lowMonth,\": \",summaryData.electricity.low.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Method\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value method-badge\",children:getMethodLabel(summaryData.electricity.method)})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"energy-type-summary gas-summary\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Gas\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Annual Demand\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.gas.annual.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Peak Month\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.gas.peakMonth,\": \",summaryData.gas.peak.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Low Month\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[summaryData.gas.lowMonth,\": \",summaryData.gas.low.toFixed(0),\" kWh\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Method\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value method-badge\",children:getMethodLabel(summaryData.gas.method)})]})]})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart-container electricity-chart\",children:/*#__PURE__*/_jsx(\"div\",{className:\"chart-wrapper\",children:electricityChartData&&/*#__PURE__*/_jsx(Line,{data:electricityChartData,options:electricityChartOptions})})}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container gas-chart\",children:/*#__PURE__*/_jsx(\"div\",{className:\"chart-wrapper\",children:gasChartData&&/*#__PURE__*/_jsx(Line,{data:gasChartData,options:gasChartOptions})})})]}),summaryData&&/*#__PURE__*/_jsx(\"div\",{className:\"calculation-info\",children:/*#__PURE__*/_jsx(\"p\",{className:\"calculation-method\",children:getCalculationDescription(summaryData.electricity.method,summaryData.gas.method)})})]});// Helper function to get method label\nfunction getMethodLabel(method){switch(method){case'user_monthly':return'User Monthly Data';case'user_annual_distributed':return'User Annual Data';case'estimated':return'System Estimation';default:return method||'Unknown';}}// Helper function to get calculation description\nfunction getCalculationDescription(electricityMethod,gasMethod){const descriptions=[];if(electricityMethod==='user_monthly'){descriptions.push('Electricity: based on your monthly usage data');}else if(electricityMethod==='user_annual_distributed'){descriptions.push('Electricity: based on your annual usage distributed by seasonal patterns');}else{descriptions.push('Electricity: estimated based on house characteristics and occupancy');}if(gasMethod==='user_monthly'){descriptions.push('Gas: based on your monthly usage data');}else if(gasMethod==='user_annual_distributed'){descriptions.push('Gas: based on your annual usage distributed by seasonal patterns');}else{descriptions.push('Gas: estimated based on heating and hot water requirements');}return descriptions.join('. ');}};export default EnergyDemandChart;","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","calculateElectricityDemand","calculateGasDemand","jsx","_jsx","jsxs","_jsxs","register","EnergyDemandChart","_ref","userData","electricityChartData","setElectricityChartData","gasChartData","setGasChartData","summaryData","setSummaryData","loading","setLoading","error","setError","months","fetchEnergyDemandData","electricityRequest","prepareElectricityRequest","gasRequest","prepareGasRequest","console","log","electricityResponse","gasResponse","Promise","all","electricityData","data","gasData","electricityMonthly","gasMonthly","month","push","monthlyElectricityDemand","monthlyGasDemand","electricityChartConfig","labels","datasets","label","borderColor","backgroundColor","tension","pointRadius","pointHoverRadius","fill","gasChartConfig","electricity","annual","annualElectricityDemand","peak","peakMonthDemand","peakMonth","low","lowMonthDemand","lowMonth","method","calculationMethod","gas","annualGasDemand","hasMonthlyElectricityData","checkMonthlyElectricityData","monthlyElectricityUsage","convertMonthlyElectricityData","hasAnnualElectricityData","annualElectricityUsage","parseFloat","hasHeatPump","heatingType","needsEstimation","occupants","hotWaterType","houseArea","buildYear","wallType","windowType","houseType","epcRating","roofInsulation","floorInsulation","latitude","longitude","hasMonthlyGasData","checkMonthlyGasData","monthlyGasUsage","convertMonthlyGasData","hasAnnualGasData","annualGasUsage","boilerEfficiency","monthNames","every","value","monthlyData","converted","forEach","monthName","index","electricityChartOptions","responsive","maintainAspectRatio","plugins","legend","position","usePointStyle","padding","title","display","text","font","size","weight","tooltip","mode","intersect","callbacks","context","concat","dataset","parsed","y","toFixed","scales","x","grid","beginAtZero","color","interaction","axis","gasChartOptions","className","children","getMethodLabel","options","getCalculationDescription","electricityMethod","gasMethod","descriptions","join"],"sources":["/Users/xuefei/renewables/calculator/renewableCalculator.ui/src/components/EnergyDemandChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\nimport { calculateElectricityDemand, calculateGasDemand } from '../api';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst EnergyDemandChart = ({ userData }) => {\n  const [electricityChartData, setElectricityChartData] = useState(null);\n  const [gasChartData, setGasChartData] = useState(null);\n  const [summaryData, setSummaryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  useEffect(() => {\n    const fetchEnergyDemandData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Prepare electricity demand request based on available user data\n        const electricityRequest = prepareElectricityRequest(userData);\n        \n        // Prepare gas demand request\n        const gasRequest = prepareGasRequest(userData);\n\n        console.log('Electricity request:', electricityRequest); // Debug log\n        console.log('Gas request:', gasRequest); // Debug log\n\n        // Fetch both electricity and gas demand data\n        const [electricityResponse, gasResponse] = await Promise.all([\n          calculateElectricityDemand(electricityRequest),\n          calculateGasDemand(gasRequest)\n        ]);\n\n        const electricityData = electricityResponse.data;\n        const gasData = gasResponse.data;\n\n        console.log('Electricity response:', electricityData); // Debug log\n        console.log('Gas response:', gasData); // Debug log\n\n        // Extract monthly data\n        const electricityMonthly = [];\n        const gasMonthly = [];\n\n        for (let month = 1; month <= 12; month++) {\n          electricityMonthly.push(electricityData.monthlyElectricityDemand[month] || 0);\n          gasMonthly.push(gasData.monthlyGasDemand[month] || 0);\n        }\n\n        // Prepare separate chart data for electricity\n        const electricityChartConfig = {\n          labels: months,\n          datasets: [\n            {\n              label: 'Electricity Demand (kWh)',\n              data: electricityMonthly,\n              borderColor: 'rgb(75, 192, 192)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n              fill: true,\n            }\n          ]\n        };\n\n        // Prepare separate chart data for gas\n        const gasChartConfig = {\n          labels: months,\n          datasets: [\n            {\n              label: 'Gas Demand (kWh)',\n              data: gasMonthly,\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n              fill: true,\n            }\n          ]\n        };\n\n        setElectricityChartData(electricityChartConfig);\n        setGasChartData(gasChartConfig);\n\n        // Set summary data\n        setSummaryData({\n          electricity: {\n            annual: electricityData.annualElectricityDemand,\n            peak: electricityData.peakMonthDemand,\n            peakMonth: months[electricityData.peakMonth - 1],\n            low: electricityData.lowMonthDemand,\n            lowMonth: months[electricityData.lowMonth - 1],\n            method: electricityData.calculationMethod\n          },\n          gas: {\n            annual: gasData.annualGasDemand,\n            peak: gasData.peakMonthDemand,\n            peakMonth: months[gasData.peakMonth - 1],\n            low: gasData.lowMonthDemand,\n            lowMonth: months[gasData.lowMonth - 1],\n            method: gasData.calculationMethod\n          }\n        });\n\n      } catch (error) {\n        console.error('Error fetching energy demand data:', error);\n        setError('Failed to load energy demand data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userData) {\n      fetchEnergyDemandData();\n    }\n  }, [userData]);\n\n  // Function to prepare electricity request based on user data priority\n  const prepareElectricityRequest = (userData) => {\n    // Check if user provided monthly electricity usage\n    const hasMonthlyElectricityData = checkMonthlyElectricityData(userData);\n    if (hasMonthlyElectricityData) {\n      console.log('Using user monthly electricity data');\n      return {\n        monthlyElectricityUsage: convertMonthlyElectricityData(userData.monthlyElectricityUsage)\n      };\n    }\n\n    // Check if user provided annual electricity usage\n    const hasAnnualElectricityData = userData.annualElectricityUsage && \n                                    parseFloat(userData.annualElectricityUsage) > 0;\n    if (hasAnnualElectricityData) {\n      console.log('Using user annual electricity data');\n      return {\n        annualElectricityUsage: parseFloat(userData.annualElectricityUsage),\n        hasHeatPump: userData.heatingType === 'heat-pump' || userData.heatingType === 'heat pumps'\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using electricity estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude\n    };\n  };\n\n  // Function to prepare gas request based on user data priority\n  const prepareGasRequest = (userData) => {\n    // Check if user provided monthly gas usage\n    const hasMonthlyGasData = checkMonthlyGasData(userData);\n    if (hasMonthlyGasData) {\n      console.log('Using user monthly gas data');\n      return {\n        monthlyGasUsage: convertMonthlyGasData(userData.monthlyGasUsage)\n      };\n    }\n\n    // Check if user provided annual gas usage\n    const hasAnnualGasData = userData.annualGasUsage && \n                            parseFloat(userData.annualGasUsage) > 0;\n    if (hasAnnualGasData) {\n      console.log('Using user annual gas data');\n      return {\n        annualGasUsage: parseFloat(userData.annualGasUsage)\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using gas estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude,\n      boilerEfficiency: userData.boilerEfficiency || 92\n    };\n  };\n\n  // Helper function to check if monthly electricity data is available and valid\n  const checkMonthlyElectricityData = (userData) => {\n    if (!userData.monthlyElectricityUsage) return false;\n    \n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyElectricityUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to check if monthly gas data is available and valid\n  const checkMonthlyGasData = (userData) => {\n    if (!userData.monthlyGasUsage) return false;\n    \n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyGasUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to convert frontend monthly data format to backend format\n  const convertMonthlyElectricityData = (monthlyData) => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    \n    return converted;\n  };\n\n  // Helper function to convert frontend monthly gas data format to backend format\n  const convertMonthlyGasData = (monthlyData) => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    \n    return converted;\n  };\n\n  // Chart options for electricity\n  const electricityChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Electricity Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Electricity Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  // Chart options for gas\n  const gasChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Gas Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Gas Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"loading-state\">\n          <p>Loading energy demand data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"error-state\">\n          <p className=\"error-message\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"energy-demand-section\">\n      <h3>Energy Demand</h3>\n      \n      {/* Summary Statistics */}\n      {summaryData && (\n        <div className=\"energy-summary\">\n          <div className=\"energy-summary-grid\">\n            <div className=\"energy-type-summary electricity-summary\">\n              <h4>Electricity</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.electricity.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.peakMonth}: {summaryData.electricity.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.lowMonth}: {summaryData.electricity.low.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Method</span>\n                  <span className=\"stat-value method-badge\">{getMethodLabel(summaryData.electricity.method)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"energy-type-summary gas-summary\">\n              <h4>Gas</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.gas.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.peakMonth}: {summaryData.gas.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.lowMonth}: {summaryData.gas.low.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Method</span>\n                  <span className=\"stat-value method-badge\">{getMethodLabel(summaryData.gas.method)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Separate Charts */}\n      <div className=\"charts-container\">\n        {/* Electricity Chart */}\n        <div className=\"chart-container electricity-chart\">\n          <div className=\"chart-wrapper\">\n            {electricityChartData && (\n              <Line data={electricityChartData} options={electricityChartOptions} />\n            )}\n          </div>\n        </div>\n\n        {/* Gas Chart */}\n        <div className=\"chart-container gas-chart\">\n          <div className=\"chart-wrapper\">\n            {gasChartData && (\n              <Line data={gasChartData} options={gasChartOptions} />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Method Information */}\n      {summaryData && (\n        <div className=\"calculation-info\">\n          <p className=\"calculation-method\">\n            {getCalculationDescription(summaryData.electricity.method, summaryData.gas.method)}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  // Helper function to get method label\n  function getMethodLabel(method) {\n    switch (method) {\n      case 'user_monthly':\n        return 'User Monthly Data';\n      case 'user_annual_distributed':\n        return 'User Annual Data';\n      case 'estimated':\n        return 'System Estimation';\n      default:\n        return method || 'Unknown';\n    }\n  }\n\n  // Helper function to get calculation description\n  function getCalculationDescription(electricityMethod, gasMethod) {\n    const descriptions = [];\n    \n    if (electricityMethod === 'user_monthly') {\n      descriptions.push('Electricity: based on your monthly usage data');\n    } else if (electricityMethod === 'user_annual_distributed') {\n      descriptions.push('Electricity: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Electricity: estimated based on house characteristics and occupancy');\n    }\n\n    if (gasMethod === 'user_monthly') {\n      descriptions.push('Gas: based on your monthly usage data');\n    } else if (gasMethod === 'user_annual_distributed') {\n      descriptions.push('Gas: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Gas: estimated based on heating and hot water requirements');\n    }\n\n    return descriptions.join('. ');\n  }\n};\n\nexport default EnergyDemandChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}