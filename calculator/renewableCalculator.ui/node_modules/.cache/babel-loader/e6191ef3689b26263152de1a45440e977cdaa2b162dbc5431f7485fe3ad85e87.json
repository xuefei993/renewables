{"ast":null,"code":"// Utility functions for Results component\n\n// Function to get solar potential rating based on percentage\nexport const getSolarPotentialRating = percentage => {\n  if (percentage > 95) {\n    return {\n      rating: 'Excellent',\n      className: 'excellent',\n      recommended: true\n    };\n  } else if (percentage >= 90) {\n    return {\n      rating: 'Very Good',\n      className: 'very-good',\n      recommended: true\n    };\n  } else if (percentage >= 80) {\n    return {\n      rating: 'Good',\n      className: 'good',\n      recommended: true\n    };\n  } else if (percentage >= 60) {\n    return {\n      rating: 'Medium',\n      className: 'medium',\n      recommended: true\n    };\n  } else {\n    return {\n      rating: 'Poor',\n      className: 'poor',\n      recommended: false\n    };\n  }\n};\nexport const getOrientationLabel = orientation => {\n  const orientationLabels = {\n    'N': 'North',\n    'NE': 'Northeast',\n    'E': 'East',\n    'SE': 'Southeast',\n    'S': 'South',\n    'SW': 'Southwest',\n    'W': 'West',\n    'NW': 'Northwest'\n  };\n  return orientationLabels[orientation] || orientation;\n};\nexport const getShadingLabel = shading => {\n  const shadingLabels = {\n    'no-shading': 'No Shading',\n    'light-shading': 'Light Shading',\n    'moderate-shading': 'Moderate Shading',\n    'heavy-shading': 'Heavy Shading'\n  };\n  return shadingLabels[shading] || shading;\n};\nexport const getUtilisationLabel = utilisation => {\n  const utilisationLabels = {\n    'minimal-obstacles': 'Minimal Obstacles',\n    'some-obstacles': 'Some Obstacles',\n    'many-obstacles': 'Many Obstacles'\n  };\n  return utilisationLabels[utilisation] || utilisation;\n};\n\n// Function to convert frontend heating method to backend heating type\nexport const convertHeatingMethod = heatingMethod => {\n  switch (heatingMethod) {\n    case \"gas boiler\":\n      return \"gas\";\n    case \"electricity heating\":\n      return \"electric\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas\";\n    // default fallback\n  }\n};\n\n// Function to convert frontend hot water method to backend hot water type\nexport const convertHotWaterMethod = hotWaterMethod => {\n  switch (hotWaterMethod) {\n    case \"gas boiler\":\n      return \"gas-boiler\";\n    case \"electricity\":\n      return \"electricity\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas-boiler\";\n    // default fallback\n  }\n};\n\n// Function to prepare user data for Energy Demand component\nexport const prepareUserData = data => {\n  var _data$coordinates, _data$coordinates2;\n  return {\n    occupants: data.householdSize || data.occupants || 3,\n    hotWaterType: convertHotWaterMethod(data.hotWaterMethod),\n    heatingType: convertHeatingMethod(data.heatingMethod),\n    houseArea: data.floorArea || data.houseArea || 100,\n    buildYear: data.buildingYear || data.buildYear || '1981-2002',\n    wallType: data.wallType || 'modern',\n    // Updated default to match new options\n    windowType: data.windowType || 'double',\n    houseType: data.propertyType || data.houseType || 'semi-detached',\n    epcRating: data.epcRating || 'D',\n    roofInsulation: data.roofInsulation || 'no',\n    floorInsulation: data.floorInsulation || 'no',\n    latitude: data.latitude || ((_data$coordinates = data.coordinates) === null || _data$coordinates === void 0 ? void 0 : _data$coordinates.latitude) || null,\n    longitude: data.longitude || ((_data$coordinates2 = data.coordinates) === null || _data$coordinates2 === void 0 ? void 0 : _data$coordinates2.longitude) || null\n  };\n};\n\n// Function to calculate solar potential totals\nexport const calculateSolarTotals = selectedRoofs => {\n  const totalSelectedArea = selectedRoofs.reduce((sum, roof) => sum + (roof.area || 0), 0);\n  const totalSolarPanels = selectedRoofs.reduce((sum, roof) => sum + (roof.solarPanelCount || 0), 0);\n  const averageSolarPotential = selectedRoofs.length > 0 ? selectedRoofs.reduce((sum, roof) => sum + (roof.solarPotential || 0), 0) / selectedRoofs.length : 0;\n  return {\n    totalSelectedArea,\n    totalSolarPanels,\n    averageSolarPotential\n  };\n};","map":{"version":3,"names":["getSolarPotentialRating","percentage","rating","className","recommended","getOrientationLabel","orientation","orientationLabels","getShadingLabel","shading","shadingLabels","getUtilisationLabel","utilisation","utilisationLabels","convertHeatingMethod","heatingMethod","convertHotWaterMethod","hotWaterMethod","prepareUserData","data","_data$coordinates","_data$coordinates2","occupants","householdSize","hotWaterType","heatingType","houseArea","floorArea","buildYear","buildingYear","wallType","windowType","houseType","propertyType","epcRating","roofInsulation","floorInsulation","latitude","coordinates","longitude","calculateSolarTotals","selectedRoofs","totalSelectedArea","reduce","sum","roof","area","totalSolarPanels","solarPanelCount","averageSolarPotential","length","solarPotential"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/resultsUtils.js"],"sourcesContent":["// Utility functions for Results component\n\n// Function to get solar potential rating based on percentage\nexport const getSolarPotentialRating = (percentage) => {\n  if (percentage > 95) {\n    return { rating: 'Excellent', className: 'excellent', recommended: true };\n  } else if (percentage >= 90) {\n    return { rating: 'Very Good', className: 'very-good', recommended: true };\n  } else if (percentage >= 80) {\n    return { rating: 'Good', className: 'good', recommended: true };\n  } else if (percentage >= 60) {\n    return { rating: 'Medium', className: 'medium', recommended: true };\n  } else {\n    return { rating: 'Poor', className: 'poor', recommended: false };\n  }\n};\n\nexport const getOrientationLabel = (orientation) => {\n  const orientationLabels = {\n    'N': 'North',\n    'NE': 'Northeast', \n    'E': 'East',\n    'SE': 'Southeast',\n    'S': 'South',\n    'SW': 'Southwest',\n    'W': 'West',\n    'NW': 'Northwest'\n  };\n  return orientationLabels[orientation] || orientation;\n};\n\nexport const getShadingLabel = (shading) => {\n  const shadingLabels = {\n    'no-shading': 'No Shading',\n    'light-shading': 'Light Shading',\n    'moderate-shading': 'Moderate Shading', \n    'heavy-shading': 'Heavy Shading'\n  };\n  return shadingLabels[shading] || shading;\n};\n\nexport const getUtilisationLabel = (utilisation) => {\n  const utilisationLabels = {\n    'minimal-obstacles': 'Minimal Obstacles',\n    'some-obstacles': 'Some Obstacles',\n    'many-obstacles': 'Many Obstacles'\n  };\n  return utilisationLabels[utilisation] || utilisation;\n};\n\n// Function to convert frontend heating method to backend heating type\nexport const convertHeatingMethod = (heatingMethod) => {\n  switch (heatingMethod) {\n    case \"gas boiler\":\n      return \"gas\";\n    case \"electricity heating\":\n      return \"electric\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas\"; // default fallback\n  }\n};\n\n// Function to convert frontend hot water method to backend hot water type\nexport const convertHotWaterMethod = (hotWaterMethod) => {\n  switch (hotWaterMethod) {\n    case \"gas boiler\":\n      return \"gas-boiler\";\n    case \"electricity\":\n      return \"electricity\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas-boiler\"; // default fallback\n  }\n};\n\n// Function to prepare user data for Energy Demand component\nexport const prepareUserData = (data) => {\n  return {\n    occupants: data.householdSize || data.occupants || 3,\n    hotWaterType: convertHotWaterMethod(data.hotWaterMethod),\n    heatingType: convertHeatingMethod(data.heatingMethod),\n    houseArea: data.floorArea || data.houseArea || 100,\n    buildYear: data.buildingYear || data.buildYear || '1981-2002',\n    wallType: data.wallType || 'modern',  // Updated default to match new options\n    windowType: data.windowType || 'double',\n    houseType: data.propertyType || data.houseType || 'semi-detached',\n    epcRating: data.epcRating || 'D',\n    roofInsulation: data.roofInsulation || 'no',\n    floorInsulation: data.floorInsulation || 'no',\n    latitude: data.latitude || data.coordinates?.latitude || null,\n    longitude: data.longitude || data.coordinates?.longitude || null\n  };\n};\n\n// Function to calculate solar potential totals\nexport const calculateSolarTotals = (selectedRoofs) => {\n  const totalSelectedArea = selectedRoofs.reduce((sum, roof) => sum + (roof.area || 0), 0);\n  const totalSolarPanels = selectedRoofs.reduce((sum, roof) => sum + (roof.solarPanelCount || 0), 0);\n  const averageSolarPotential = selectedRoofs.length > 0 \n    ? selectedRoofs.reduce((sum, roof) => sum + (roof.solarPotential || 0), 0) / selectedRoofs.length\n    : 0;\n\n  return {\n    totalSelectedArea,\n    totalSolarPanels,\n    averageSolarPotential\n  };\n}; "],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,uBAAuB,GAAIC,UAAU,IAAK;EACrD,IAAIA,UAAU,GAAG,EAAE,EAAE;IACnB,OAAO;MAAEC,MAAM,EAAE,WAAW;MAAEC,SAAS,EAAE,WAAW;MAAEC,WAAW,EAAE;IAAK,CAAC;EAC3E,CAAC,MAAM,IAAIH,UAAU,IAAI,EAAE,EAAE;IAC3B,OAAO;MAAEC,MAAM,EAAE,WAAW;MAAEC,SAAS,EAAE,WAAW;MAAEC,WAAW,EAAE;IAAK,CAAC;EAC3E,CAAC,MAAM,IAAIH,UAAU,IAAI,EAAE,EAAE;IAC3B,OAAO;MAAEC,MAAM,EAAE,MAAM;MAAEC,SAAS,EAAE,MAAM;MAAEC,WAAW,EAAE;IAAK,CAAC;EACjE,CAAC,MAAM,IAAIH,UAAU,IAAI,EAAE,EAAE;IAC3B,OAAO;MAAEC,MAAM,EAAE,QAAQ;MAAEC,SAAS,EAAE,QAAQ;MAAEC,WAAW,EAAE;IAAK,CAAC;EACrE,CAAC,MAAM;IACL,OAAO;MAAEF,MAAM,EAAE,MAAM;MAAEC,SAAS,EAAE,MAAM;MAAEC,WAAW,EAAE;IAAM,CAAC;EAClE;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,WAAW,IAAK;EAClD,MAAMC,iBAAiB,GAAG;IACxB,GAAG,EAAE,OAAO;IACZ,IAAI,EAAE,WAAW;IACjB,GAAG,EAAE,MAAM;IACX,IAAI,EAAE,WAAW;IACjB,GAAG,EAAE,OAAO;IACZ,IAAI,EAAE,WAAW;IACjB,GAAG,EAAE,MAAM;IACX,IAAI,EAAE;EACR,CAAC;EACD,OAAOA,iBAAiB,CAACD,WAAW,CAAC,IAAIA,WAAW;AACtD,CAAC;AAED,OAAO,MAAME,eAAe,GAAIC,OAAO,IAAK;EAC1C,MAAMC,aAAa,GAAG;IACpB,YAAY,EAAE,YAAY;IAC1B,eAAe,EAAE,eAAe;IAChC,kBAAkB,EAAE,kBAAkB;IACtC,eAAe,EAAE;EACnB,CAAC;EACD,OAAOA,aAAa,CAACD,OAAO,CAAC,IAAIA,OAAO;AAC1C,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAIC,WAAW,IAAK;EAClD,MAAMC,iBAAiB,GAAG;IACxB,mBAAmB,EAAE,mBAAmB;IACxC,gBAAgB,EAAE,gBAAgB;IAClC,gBAAgB,EAAE;EACpB,CAAC;EACD,OAAOA,iBAAiB,CAACD,WAAW,CAAC,IAAIA,WAAW;AACtD,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAIC,aAAa,IAAK;EACrD,QAAQA,aAAa;IACnB,KAAK,YAAY;MACf,OAAO,KAAK;IACd,KAAK,qBAAqB;MACxB,OAAO,UAAU;IACnB,KAAK,YAAY;MACf,OAAO,WAAW;IACpB;MACE,OAAO,KAAK;IAAE;EAClB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAIC,cAAc,IAAK;EACvD,QAAQA,cAAc;IACpB,KAAK,YAAY;MACf,OAAO,YAAY;IACrB,KAAK,aAAa;MAChB,OAAO,aAAa;IACtB,KAAK,YAAY;MACf,OAAO,WAAW;IACpB;MACE,OAAO,YAAY;IAAE;EACzB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAAA,IAAAC,iBAAA,EAAAC,kBAAA;EACvC,OAAO;IACLC,SAAS,EAAEH,IAAI,CAACI,aAAa,IAAIJ,IAAI,CAACG,SAAS,IAAI,CAAC;IACpDE,YAAY,EAAER,qBAAqB,CAACG,IAAI,CAACF,cAAc,CAAC;IACxDQ,WAAW,EAAEX,oBAAoB,CAACK,IAAI,CAACJ,aAAa,CAAC;IACrDW,SAAS,EAAEP,IAAI,CAACQ,SAAS,IAAIR,IAAI,CAACO,SAAS,IAAI,GAAG;IAClDE,SAAS,EAAET,IAAI,CAACU,YAAY,IAAIV,IAAI,CAACS,SAAS,IAAI,WAAW;IAC7DE,QAAQ,EAAEX,IAAI,CAACW,QAAQ,IAAI,QAAQ;IAAG;IACtCC,UAAU,EAAEZ,IAAI,CAACY,UAAU,IAAI,QAAQ;IACvCC,SAAS,EAAEb,IAAI,CAACc,YAAY,IAAId,IAAI,CAACa,SAAS,IAAI,eAAe;IACjEE,SAAS,EAAEf,IAAI,CAACe,SAAS,IAAI,GAAG;IAChCC,cAAc,EAAEhB,IAAI,CAACgB,cAAc,IAAI,IAAI;IAC3CC,eAAe,EAAEjB,IAAI,CAACiB,eAAe,IAAI,IAAI;IAC7CC,QAAQ,EAAElB,IAAI,CAACkB,QAAQ,MAAAjB,iBAAA,GAAID,IAAI,CAACmB,WAAW,cAAAlB,iBAAA,uBAAhBA,iBAAA,CAAkBiB,QAAQ,KAAI,IAAI;IAC7DE,SAAS,EAAEpB,IAAI,CAACoB,SAAS,MAAAlB,kBAAA,GAAIF,IAAI,CAACmB,WAAW,cAAAjB,kBAAA,uBAAhBA,kBAAA,CAAkBkB,SAAS,KAAI;EAC9D,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAIC,aAAa,IAAK;EACrD,MAAMC,iBAAiB,GAAGD,aAAa,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACxF,MAAMC,gBAAgB,GAAGN,aAAa,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACG,eAAe,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EAClG,MAAMC,qBAAqB,GAAGR,aAAa,CAACS,MAAM,GAAG,CAAC,GAClDT,aAAa,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACM,cAAc,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGV,aAAa,CAACS,MAAM,GAC/F,CAAC;EAEL,OAAO;IACLR,iBAAiB;IACjBK,gBAAgB;IAChBE;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}