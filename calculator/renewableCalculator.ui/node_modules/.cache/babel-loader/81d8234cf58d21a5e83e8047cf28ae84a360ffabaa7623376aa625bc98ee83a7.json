{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/steps/roof-condition/GoogleMapsPolygonDrawer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport PostcodeLocationInput from './PostcodeLocationInput';\nimport Compass from './Compass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapsPolygonDrawer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  onAreaChange,\n  userLocation,\n  apiKey\n}, ref) => {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n  const [currentLocation, setCurrentLocation] = useState(userLocation);\n\n  // Expose clearPolygon method to parent component\n  useImperativeHandle(ref, () => ({\n    clearPolygon: () => {\n      if (polygon) {\n        polygon.setMap(null);\n        setPolygon(null);\n        setArea(0);\n        onAreaChange(0);\n      }\n    }\n  }));\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (map && currentLocation) {\n      map.setCenter(currentLocation);\n      map.setZoom(20);\n    }\n  }, [currentLocation, map]);\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: currentLocation || {\n          lat: 51.5074,\n          lng: -0.1278\n        },\n        // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON]\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true\n        }\n      });\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', newPolygon => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, currentLocation]);\n  const calculateArea = polygon => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n  const handleLocationChange = newLocation => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      clearPolygon();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-maps-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-location-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Search by postcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostcodeLocationInput, {\n        onLocationChange: handleLocationChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-with-compass\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          height: '500px',\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Compass, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearPolygon,\n        className: \"btn btn-secondary\",\n        disabled: !polygon,\n        children: \"Clear Roof Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}, \"N74J3ADOo8EL+ldFn2C6eGEnT9I=\")), \"N74J3ADOo8EL+ldFn2C6eGEnT9I=\");\n_c2 = GoogleMapsPolygonDrawer;\nGoogleMapsPolygonDrawer.displayName = 'GoogleMapsPolygonDrawer';\nexport default GoogleMapsPolygonDrawer;\nvar _c, _c2;\n$RefreshReg$(_c, \"GoogleMapsPolygonDrawer$forwardRef\");\n$RefreshReg$(_c2, \"GoogleMapsPolygonDrawer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","PostcodeLocationInput","Compass","jsxDEV","_jsxDEV","GoogleMapsPolygonDrawer","_s","_c","onAreaChange","userLocation","apiKey","ref","mapRef","map","setMap","polygon","setPolygon","area","setArea","currentLocation","setCurrentLocation","clearPolygon","setCenter","setZoom","current","newMap","window","google","maps","Map","center","lat","lng","zoom","mapTypeId","tilt","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","polygonOptions","fillColor","fillOpacity","strokeColor","strokeWeight","editable","draggable","addListener","newPolygon","calculateArea","getPath","setDrawingMode","path","areaInSquareMeters","geometry","spherical","computeArea","handleLocationChange","newLocation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLocationChange","style","height","width","onClick","disabled","_c2","displayName","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/steps/roof-condition/GoogleMapsPolygonDrawer.js"],"sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport PostcodeLocationInput from './PostcodeLocationInput';\nimport Compass from './Compass';\n\nconst GoogleMapsPolygonDrawer = forwardRef(({ onAreaChange, userLocation, apiKey }, ref) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n  const [currentLocation, setCurrentLocation] = useState(userLocation);\n\n  // Expose clearPolygon method to parent component\n  useImperativeHandle(ref, () => ({\n    clearPolygon: () => {\n      if (polygon) {\n        polygon.setMap(null);\n        setPolygon(null);\n        setArea(0);\n        onAreaChange(0);\n      }\n    }\n  }));\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (map && currentLocation) {\n      map.setCenter(currentLocation);\n      map.setZoom(20);\n    }\n  }, [currentLocation, map]);\n\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: currentLocation || { lat: 51.5074, lng: -0.1278 }, // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0,\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON],\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true,\n        },\n      });\n\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', (newPolygon) => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, currentLocation]);\n\n  const calculateArea = (polygon) => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n\n  const handleLocationChange = (newLocation) => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      clearPolygon();\n    }\n  };\n\n  return (\n    <div className=\"google-maps-container\">\n      <div className=\"map-location-controls\">\n        <h5>Search by postcode</h5>\n        <PostcodeLocationInput onLocationChange={handleLocationChange} />\n      </div>\n      \n      <div className=\"map-with-compass\">\n        <div ref={mapRef} style={{ height: '500px', width: '100%' }} />\n        <Compass />\n      </div>\n      \n      <div className=\"map-controls\">\n        <button onClick={clearPolygon} className=\"btn btn-secondary\" disabled={!polygon}>\n          Clear Roof Area\n        </button>\n      </div>\n    </div>\n  );\n});\n\nGoogleMapsPolygonDrawer.displayName = 'GoogleMapsPolygonDrawer';\n\nexport default GoogleMapsPolygonDrawer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}