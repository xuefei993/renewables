{"ast":null,"code":"// Utility functions for roof area calculations\n/**\n * Calculate actual roof area based on projected area and roof angle\n * Formula: Roof Area = Horizontal projected area / cos(roof angle)\n */export const calculateActualRoofArea=(projectedArea,angle)=>{// Ensure projectedArea is a valid number\nconst validProjectedArea=typeof projectedArea==='number'&&!isNaN(projectedArea)?projectedArea:0;// Return projected area if angle is not provided or invalid\nif(angle===''||angle===null||angle===undefined)return validProjectedArea;const angleInRadians=parseFloat(angle)*Math.PI/180;const cosAngle=Math.cos(angleInRadians);// Avoid division by zero for 90-degree angles\nif(Math.abs(cosAngle)<0.001)return validProjectedArea*100;// Very steep roof\nreturn validProjectedArea/cosAngle;};/**\n * Calculate estimated solar panel capacity based on roof area\n */export const calculateSolarCapacity=roofArea=>{return roofArea*0.15;// 150W/m²\n};/**\n * Calculate approximate panel count based on roof area\n */export const calculatePanelCount=roofArea=>{return Math.floor(roofArea/2);// 2m² per panel\n};/**\n * Calculate area adjustment factor\n */export const calculateAdjustmentFactor=(actualArea,projectedArea)=>{if(!projectedArea||projectedArea===0)return 1;return actualArea/projectedArea;};","map":{"version":3,"names":["calculateActualRoofArea","projectedArea","angle","validProjectedArea","isNaN","undefined","angleInRadians","parseFloat","Math","PI","cosAngle","cos","abs","calculateSolarCapacity","roofArea","calculatePanelCount","floor","calculateAdjustmentFactor","actualArea"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/roofAreaUtils.js"],"sourcesContent":["// Utility functions for roof area calculations\n\n/**\n * Calculate actual roof area based on projected area and roof angle\n * Formula: Roof Area = Horizontal projected area / cos(roof angle)\n */\nexport const calculateActualRoofArea = (projectedArea, angle) => {\n  // Ensure projectedArea is a valid number\n  const validProjectedArea = (typeof projectedArea === 'number' && !isNaN(projectedArea)) ? projectedArea : 0;\n  \n  // Return projected area if angle is not provided or invalid\n  if (angle === '' || angle === null || angle === undefined) return validProjectedArea;\n  \n  const angleInRadians = (parseFloat(angle) * Math.PI) / 180;\n  const cosAngle = Math.cos(angleInRadians);\n  \n  // Avoid division by zero for 90-degree angles\n  if (Math.abs(cosAngle) < 0.001) return validProjectedArea * 100; // Very steep roof\n  \n  return validProjectedArea / cosAngle;\n};\n\n/**\n * Calculate estimated solar panel capacity based on roof area\n */\nexport const calculateSolarCapacity = (roofArea) => {\n  return roofArea * 0.15; // 150W/m²\n};\n\n/**\n * Calculate approximate panel count based on roof area\n */\nexport const calculatePanelCount = (roofArea) => {\n  return Math.floor(roofArea / 2); // 2m² per panel\n};\n\n/**\n * Calculate area adjustment factor\n */\nexport const calculateAdjustmentFactor = (actualArea, projectedArea) => {\n  if (!projectedArea || projectedArea === 0) return 1;\n  return actualArea / projectedArea;\n}; "],"mappings":"AAAA;AAEA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,uBAAuB,CAAGA,CAACC,aAAa,CAAEC,KAAK,GAAK,CAC/D;AACA,KAAM,CAAAC,kBAAkB,CAAI,MAAO,CAAAF,aAAa,GAAK,QAAQ,EAAI,CAACG,KAAK,CAACH,aAAa,CAAC,CAAIA,aAAa,CAAG,CAAC,CAE3G;AACA,GAAIC,KAAK,GAAK,EAAE,EAAIA,KAAK,GAAK,IAAI,EAAIA,KAAK,GAAKG,SAAS,CAAE,MAAO,CAAAF,kBAAkB,CAEpF,KAAM,CAAAG,cAAc,CAAIC,UAAU,CAACL,KAAK,CAAC,CAAGM,IAAI,CAACC,EAAE,CAAI,GAAG,CAC1D,KAAM,CAAAC,QAAQ,CAAGF,IAAI,CAACG,GAAG,CAACL,cAAc,CAAC,CAEzC;AACA,GAAIE,IAAI,CAACI,GAAG,CAACF,QAAQ,CAAC,CAAG,KAAK,CAAE,MAAO,CAAAP,kBAAkB,CAAG,GAAG,CAAE;AAEjE,MAAO,CAAAA,kBAAkB,CAAGO,QAAQ,CACtC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAG,sBAAsB,CAAIC,QAAQ,EAAK,CAClD,MAAO,CAAAA,QAAQ,CAAG,IAAI,CAAE;AAC1B,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAID,QAAQ,EAAK,CAC/C,MAAO,CAAAN,IAAI,CAACQ,KAAK,CAACF,QAAQ,CAAG,CAAC,CAAC,CAAE;AACnC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAG,yBAAyB,CAAGA,CAACC,UAAU,CAAEjB,aAAa,GAAK,CACtE,GAAI,CAACA,aAAa,EAAIA,aAAa,GAAK,CAAC,CAAE,MAAO,EAAC,CACnD,MAAO,CAAAiB,UAAU,CAAGjB,aAAa,CACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}