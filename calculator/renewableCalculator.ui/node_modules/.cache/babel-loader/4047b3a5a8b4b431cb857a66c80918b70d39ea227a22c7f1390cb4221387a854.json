{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/EnergyDemandChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { calculateElectricityDemand, calculateGasDemand } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst EnergyDemandChart = ({\n  userData\n}) => {\n  _s();\n  const [electricityChartData, setElectricityChartData] = useState(null);\n  const [gasChartData, setGasChartData] = useState(null);\n  const [summaryData, setSummaryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  useEffect(() => {\n    const fetchEnergyDemandData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Prepare electricity demand request based on available user data\n        const electricityRequest = prepareElectricityRequest(userData);\n\n        // Prepare gas demand request\n        const gasRequest = prepareGasRequest(userData);\n        console.log('Electricity request:', electricityRequest); // Debug log\n        console.log('Gas request:', gasRequest); // Debug log\n\n        // Fetch both electricity and gas demand data\n        const [electricityResponse, gasResponse] = await Promise.all([calculateElectricityDemand(electricityRequest), calculateGasDemand(gasRequest)]);\n        const electricityData = electricityResponse.data;\n        const gasData = gasResponse.data;\n        console.log('Electricity response:', electricityData); // Debug log\n        console.log('Gas response:', gasData); // Debug log\n\n        // Extract monthly data\n        const electricityMonthly = [];\n        const gasMonthly = [];\n        for (let month = 1; month <= 12; month++) {\n          electricityMonthly.push(electricityData.monthlyElectricityDemand[month] || 0);\n          gasMonthly.push(gasData.monthlyGasDemand[month] || 0);\n        }\n\n        // Prepare separate chart data for electricity\n        const electricityChartConfig = {\n          labels: months,\n          datasets: [{\n            label: 'Electricity Demand (kWh)',\n            data: electricityMonthly,\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            tension: 0.1,\n            pointRadius: 5,\n            pointHoverRadius: 7,\n            fill: true\n          }]\n        };\n\n        // Prepare separate chart data for gas\n        const gasChartConfig = {\n          labels: months,\n          datasets: [{\n            label: 'Gas Demand (kWh)',\n            data: gasMonthly,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            tension: 0.1,\n            pointRadius: 5,\n            pointHoverRadius: 7,\n            fill: true\n          }]\n        };\n        setElectricityChartData(electricityChartConfig);\n        setGasChartData(gasChartConfig);\n\n        // Set summary data\n        setSummaryData({\n          electricity: {\n            annual: electricityData.annualElectricityDemand,\n            peak: electricityData.peakMonthDemand,\n            peakMonth: months[electricityData.peakMonth - 1],\n            low: electricityData.lowMonthDemand,\n            lowMonth: months[electricityData.lowMonth - 1],\n            method: electricityData.calculationMethod\n          },\n          gas: {\n            annual: gasData.annualGasDemand,\n            peak: gasData.peakMonthDemand,\n            peakMonth: months[gasData.peakMonth - 1],\n            low: gasData.lowMonthDemand,\n            lowMonth: months[gasData.lowMonth - 1],\n            method: gasData.calculationMethod\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching energy demand data:', error);\n        setError('Failed to load energy demand data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (userData) {\n      fetchEnergyDemandData();\n    }\n  }, [userData]);\n\n  // Function to prepare electricity request based on user data priority\n  const prepareElectricityRequest = userData => {\n    // Check if user provided monthly electricity usage\n    const hasMonthlyElectricityData = checkMonthlyElectricityData(userData);\n    if (hasMonthlyElectricityData) {\n      console.log('Using user monthly electricity data');\n      return {\n        monthlyElectricityUsage: convertMonthlyElectricityData(userData.monthlyElectricityUsage)\n      };\n    }\n\n    // Check if user provided annual electricity usage\n    const hasAnnualElectricityData = userData.annualElectricityUsage && parseFloat(userData.annualElectricityUsage) > 0;\n    if (hasAnnualElectricityData) {\n      console.log('Using user annual electricity data');\n      return {\n        annualElectricityUsage: parseFloat(userData.annualElectricityUsage),\n        hasHeatPump: userData.heatingType === 'heat-pump' || userData.heatingType === 'heat pumps'\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using electricity estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude\n    };\n  };\n\n  // Function to prepare gas request based on user data priority\n  const prepareGasRequest = userData => {\n    // Check if user provided monthly gas usage\n    const hasMonthlyGasData = checkMonthlyGasData(userData);\n    if (hasMonthlyGasData) {\n      console.log('Using user monthly gas data');\n      return {\n        monthlyGasUsage: convertMonthlyGasData(userData.monthlyGasUsage)\n      };\n    }\n\n    // Check if user provided annual gas usage\n    const hasAnnualGasData = userData.annualGasUsage && parseFloat(userData.annualGasUsage) > 0;\n    if (hasAnnualGasData) {\n      console.log('Using user annual gas data');\n      return {\n        annualGasUsage: parseFloat(userData.annualGasUsage)\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using gas estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude,\n      boilerEfficiency: userData.boilerEfficiency || 92\n    };\n  };\n\n  // Helper function to check if monthly electricity data is available and valid\n  const checkMonthlyElectricityData = userData => {\n    if (!userData.monthlyElectricityUsage) return false;\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n\n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyElectricityUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to check if monthly gas data is available and valid\n  const checkMonthlyGasData = userData => {\n    if (!userData.monthlyGasUsage) return false;\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n\n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyGasUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to convert frontend monthly data format to backend format\n  const convertMonthlyElectricityData = monthlyData => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    return converted;\n  };\n\n  // Helper function to convert frontend monthly gas data format to backend format\n  const convertMonthlyGasData = monthlyData => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    return converted;\n  };\n\n  // Chart options for electricity\n  const electricityChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Electricity Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Electricity Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  // Chart options for gas\n  const gasChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Gas Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Gas Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-demand-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading energy demand data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-demand-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-state\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"energy-demand-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Energy Demand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), summaryData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energy-summary-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"energy-type-summary electricity-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Electricity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Annual Demand\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.annual.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Peak Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.peakMonth, \": \", summaryData.electricity.peak.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Low Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.lowMonth, \": \", summaryData.electricity.low.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Method\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value method-badge\",\n                children: getMethodLabel(summaryData.electricity.method)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"energy-type-summary gas-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Gas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Annual Demand\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.annual.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Peak Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.peakMonth, \": \", summaryData.gas.peak.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Low Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.lowMonth, \": \", summaryData.gas.low.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Method\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value method-badge\",\n                children: getMethodLabel(summaryData.gas.method)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container electricity-chart\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-wrapper\",\n          children: electricityChartData && /*#__PURE__*/_jsxDEV(Line, {\n            data: electricityChartData,\n            options: electricityChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container gas-chart\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-wrapper\",\n          children: gasChartData && /*#__PURE__*/_jsxDEV(Line, {\n            data: gasChartData,\n            options: gasChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this), summaryData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculation-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"calculation-method\",\n        children: getCalculationDescription(summaryData.electricity.method, summaryData.gas.method)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n\n  // Helper function to get method label\n  function getMethodLabel(method) {\n    switch (method) {\n      case 'user_monthly':\n        return 'User Monthly Data';\n      case 'user_annual_distributed':\n        return 'User Annual Data';\n      case 'estimated':\n        return 'System Estimation';\n      default:\n        return method || 'Unknown';\n    }\n  }\n\n  // Helper function to get calculation description\n  function getCalculationDescription(electricityMethod, gasMethod) {\n    const descriptions = [];\n    if (electricityMethod === 'user_monthly') {\n      descriptions.push('Electricity: based on your monthly usage data');\n    } else if (electricityMethod === 'user_annual_distributed') {\n      descriptions.push('Electricity: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Electricity: estimated based on house characteristics and occupancy');\n    }\n    if (gasMethod === 'user_monthly') {\n      descriptions.push('Gas: based on your monthly usage data');\n    } else if (gasMethod === 'user_annual_distributed') {\n      descriptions.push('Gas: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Gas: estimated based on heating and hot water requirements');\n    }\n    return descriptions.join('. ');\n  }\n};\n_s(EnergyDemandChart, \"SIbRBF2fAwG9m1AQhaYz23t4dcU=\");\n_c = EnergyDemandChart;\nexport default EnergyDemandChart;\nvar _c;\n$RefreshReg$(_c, \"EnergyDemandChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","calculateElectricityDemand","calculateGasDemand","jsxDEV","_jsxDEV","register","EnergyDemandChart","userData","_s","electricityChartData","setElectricityChartData","gasChartData","setGasChartData","summaryData","setSummaryData","loading","setLoading","error","setError","months","fetchEnergyDemandData","electricityRequest","prepareElectricityRequest","gasRequest","prepareGasRequest","console","log","electricityResponse","gasResponse","Promise","all","electricityData","data","gasData","electricityMonthly","gasMonthly","month","push","monthlyElectricityDemand","monthlyGasDemand","electricityChartConfig","labels","datasets","label","borderColor","backgroundColor","tension","pointRadius","pointHoverRadius","fill","gasChartConfig","electricity","annual","annualElectricityDemand","peak","peakMonthDemand","peakMonth","low","lowMonthDemand","lowMonth","method","calculationMethod","gas","annualGasDemand","hasMonthlyElectricityData","checkMonthlyElectricityData","monthlyElectricityUsage","convertMonthlyElectricityData","hasAnnualElectricityData","annualElectricityUsage","parseFloat","hasHeatPump","heatingType","needsEstimation","occupants","hotWaterType","houseArea","buildYear","wallType","windowType","houseType","epcRating","roofInsulation","floorInsulation","latitude","longitude","hasMonthlyGasData","checkMonthlyGasData","monthlyGasUsage","convertMonthlyGasData","hasAnnualGasData","annualGasUsage","boilerEfficiency","monthNames","every","value","monthlyData","converted","forEach","monthName","index","electricityChartOptions","responsive","maintainAspectRatio","plugins","legend","position","usePointStyle","padding","title","display","text","font","size","weight","tooltip","mode","intersect","callbacks","context","dataset","parsed","y","toFixed","scales","x","grid","beginAtZero","color","interaction","axis","gasChartOptions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getMethodLabel","options","getCalculationDescription","electricityMethod","gasMethod","descriptions","join","_c","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/EnergyDemandChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\nimport { calculateElectricityDemand, calculateGasDemand } from '../api';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst EnergyDemandChart = ({ userData }) => {\n  const [electricityChartData, setElectricityChartData] = useState(null);\n  const [gasChartData, setGasChartData] = useState(null);\n  const [summaryData, setSummaryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  useEffect(() => {\n    const fetchEnergyDemandData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Prepare electricity demand request based on available user data\n        const electricityRequest = prepareElectricityRequest(userData);\n        \n        // Prepare gas demand request\n        const gasRequest = prepareGasRequest(userData);\n\n        console.log('Electricity request:', electricityRequest); // Debug log\n        console.log('Gas request:', gasRequest); // Debug log\n\n        // Fetch both electricity and gas demand data\n        const [electricityResponse, gasResponse] = await Promise.all([\n          calculateElectricityDemand(electricityRequest),\n          calculateGasDemand(gasRequest)\n        ]);\n\n        const electricityData = electricityResponse.data;\n        const gasData = gasResponse.data;\n\n        console.log('Electricity response:', electricityData); // Debug log\n        console.log('Gas response:', gasData); // Debug log\n\n        // Extract monthly data\n        const electricityMonthly = [];\n        const gasMonthly = [];\n\n        for (let month = 1; month <= 12; month++) {\n          electricityMonthly.push(electricityData.monthlyElectricityDemand[month] || 0);\n          gasMonthly.push(gasData.monthlyGasDemand[month] || 0);\n        }\n\n        // Prepare separate chart data for electricity\n        const electricityChartConfig = {\n          labels: months,\n          datasets: [\n            {\n              label: 'Electricity Demand (kWh)',\n              data: electricityMonthly,\n              borderColor: 'rgb(75, 192, 192)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n              fill: true,\n            }\n          ]\n        };\n\n        // Prepare separate chart data for gas\n        const gasChartConfig = {\n          labels: months,\n          datasets: [\n            {\n              label: 'Gas Demand (kWh)',\n              data: gasMonthly,\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n              fill: true,\n            }\n          ]\n        };\n\n        setElectricityChartData(electricityChartConfig);\n        setGasChartData(gasChartConfig);\n\n        // Set summary data\n        setSummaryData({\n          electricity: {\n            annual: electricityData.annualElectricityDemand,\n            peak: electricityData.peakMonthDemand,\n            peakMonth: months[electricityData.peakMonth - 1],\n            low: electricityData.lowMonthDemand,\n            lowMonth: months[electricityData.lowMonth - 1],\n            method: electricityData.calculationMethod\n          },\n          gas: {\n            annual: gasData.annualGasDemand,\n            peak: gasData.peakMonthDemand,\n            peakMonth: months[gasData.peakMonth - 1],\n            low: gasData.lowMonthDemand,\n            lowMonth: months[gasData.lowMonth - 1],\n            method: gasData.calculationMethod\n          }\n        });\n\n      } catch (error) {\n        console.error('Error fetching energy demand data:', error);\n        setError('Failed to load energy demand data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userData) {\n      fetchEnergyDemandData();\n    }\n  }, [userData]);\n\n  // Function to prepare electricity request based on user data priority\n  const prepareElectricityRequest = (userData) => {\n    // Check if user provided monthly electricity usage\n    const hasMonthlyElectricityData = checkMonthlyElectricityData(userData);\n    if (hasMonthlyElectricityData) {\n      console.log('Using user monthly electricity data');\n      return {\n        monthlyElectricityUsage: convertMonthlyElectricityData(userData.monthlyElectricityUsage)\n      };\n    }\n\n    // Check if user provided annual electricity usage\n    const hasAnnualElectricityData = userData.annualElectricityUsage && \n                                    parseFloat(userData.annualElectricityUsage) > 0;\n    if (hasAnnualElectricityData) {\n      console.log('Using user annual electricity data');\n      return {\n        annualElectricityUsage: parseFloat(userData.annualElectricityUsage),\n        hasHeatPump: userData.heatingType === 'heat-pump' || userData.heatingType === 'heat pumps'\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using electricity estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude\n    };\n  };\n\n  // Function to prepare gas request based on user data priority\n  const prepareGasRequest = (userData) => {\n    // Check if user provided monthly gas usage\n    const hasMonthlyGasData = checkMonthlyGasData(userData);\n    if (hasMonthlyGasData) {\n      console.log('Using user monthly gas data');\n      return {\n        monthlyGasUsage: convertMonthlyGasData(userData.monthlyGasUsage)\n      };\n    }\n\n    // Check if user provided annual gas usage\n    const hasAnnualGasData = userData.annualGasUsage && \n                            parseFloat(userData.annualGasUsage) > 0;\n    if (hasAnnualGasData) {\n      console.log('Using user annual gas data');\n      return {\n        annualGasUsage: parseFloat(userData.annualGasUsage)\n      };\n    }\n\n    // Fall back to estimation\n    console.log('Using gas estimation');\n    return {\n      needsEstimation: true,\n      occupants: userData.occupants || 3,\n      hotWaterType: userData.hotWaterType || 'gas-boiler',\n      heatingType: userData.heatingType || 'gas',\n      houseArea: userData.houseArea || 100,\n      buildYear: userData.buildYear || '1981-2002',\n      wallType: userData.wallType || 'modern',\n      windowType: userData.windowType || 'double',\n      houseType: userData.houseType || 'semi-detached',\n      epcRating: userData.epcRating || 'D',\n      roofInsulation: userData.roofInsulation || 'no',\n      floorInsulation: userData.floorInsulation || 'no',\n      latitude: userData.latitude,\n      longitude: userData.longitude,\n      boilerEfficiency: userData.boilerEfficiency || 92\n    };\n  };\n\n  // Helper function to check if monthly electricity data is available and valid\n  const checkMonthlyElectricityData = (userData) => {\n    if (!userData.monthlyElectricityUsage) return false;\n    \n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyElectricityUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to check if monthly gas data is available and valid\n  const checkMonthlyGasData = (userData) => {\n    if (!userData.monthlyGasUsage) return false;\n    \n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    // Check if all months have valid data\n    return monthNames.every(month => {\n      const value = userData.monthlyGasUsage[month];\n      return value && parseFloat(value) >= 0;\n    });\n  };\n\n  // Helper function to convert frontend monthly data format to backend format\n  const convertMonthlyElectricityData = (monthlyData) => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    \n    return converted;\n  };\n\n  // Helper function to convert frontend monthly gas data format to backend format\n  const convertMonthlyGasData = (monthlyData) => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june',\n                       'july', 'august', 'september', 'october', 'november', 'december'];\n    \n    const converted = {};\n    monthNames.forEach((monthName, index) => {\n      converted[index + 1] = parseFloat(monthlyData[monthName]) || 0;\n    });\n    \n    return converted;\n  };\n\n  // Chart options for electricity\n  const electricityChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Electricity Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Electricity Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  // Chart options for gas\n  const gasChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n        }\n      },\n      title: {\n        display: true,\n        text: 'Monthly Gas Demand',\n        font: {\n          size: 16,\n          weight: 'bold'\n        },\n        padding: 20\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(0)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month',\n          font: {\n            weight: 'bold'\n          }\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Gas Demand (kWh)',\n          font: {\n            weight: 'bold'\n          }\n        },\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"loading-state\">\n          <p>Loading energy demand data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"error-state\">\n          <p className=\"error-message\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"energy-demand-section\">\n      <h3>Energy Demand</h3>\n      \n      {/* Summary Statistics */}\n      {summaryData && (\n        <div className=\"energy-summary\">\n          <div className=\"energy-summary-grid\">\n            <div className=\"energy-type-summary electricity-summary\">\n              <h4>Electricity</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.electricity.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.peakMonth}: {summaryData.electricity.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.lowMonth}: {summaryData.electricity.low.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Method</span>\n                  <span className=\"stat-value method-badge\">{getMethodLabel(summaryData.electricity.method)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"energy-type-summary gas-summary\">\n              <h4>Gas</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.gas.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.peakMonth}: {summaryData.gas.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.lowMonth}: {summaryData.gas.low.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Method</span>\n                  <span className=\"stat-value method-badge\">{getMethodLabel(summaryData.gas.method)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Separate Charts */}\n      <div className=\"charts-container\">\n        {/* Electricity Chart */}\n        <div className=\"chart-container electricity-chart\">\n          <div className=\"chart-wrapper\">\n            {electricityChartData && (\n              <Line data={electricityChartData} options={electricityChartOptions} />\n            )}\n          </div>\n        </div>\n\n        {/* Gas Chart */}\n        <div className=\"chart-container gas-chart\">\n          <div className=\"chart-wrapper\">\n            {gasChartData && (\n              <Line data={gasChartData} options={gasChartOptions} />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Method Information */}\n      {summaryData && (\n        <div className=\"calculation-info\">\n          <p className=\"calculation-method\">\n            {getCalculationDescription(summaryData.electricity.method, summaryData.gas.method)}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  // Helper function to get method label\n  function getMethodLabel(method) {\n    switch (method) {\n      case 'user_monthly':\n        return 'User Monthly Data';\n      case 'user_annual_distributed':\n        return 'User Annual Data';\n      case 'estimated':\n        return 'System Estimation';\n      default:\n        return method || 'Unknown';\n    }\n  }\n\n  // Helper function to get calculation description\n  function getCalculationDescription(electricityMethod, gasMethod) {\n    const descriptions = [];\n    \n    if (electricityMethod === 'user_monthly') {\n      descriptions.push('Electricity: based on your monthly usage data');\n    } else if (electricityMethod === 'user_annual_distributed') {\n      descriptions.push('Electricity: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Electricity: estimated based on house characteristics and occupancy');\n    }\n\n    if (gasMethod === 'user_monthly') {\n      descriptions.push('Gas: based on your monthly usage data');\n    } else if (gasMethod === 'user_annual_distributed') {\n      descriptions.push('Gas: based on your annual usage distributed by seasonal patterns');\n    } else {\n      descriptions.push('Gas: estimated based on heating and hot water requirements');\n    }\n\n    return descriptions.join('. ');\n  }\n};\n\nexport default EnergyDemandChart; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AAEjB,SAASC,0BAA0B,EAAEC,kBAAkB,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExEX,OAAO,CAACY,QAAQ,CAACX,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE/F,MAAMM,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM8B,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAEnG7B,SAAS,CAAC,MAAM;IACd,MAAM8B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACFJ,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;;QAEd;QACA,MAAMG,kBAAkB,GAAGC,yBAAyB,CAACf,QAAQ,CAAC;;QAE9D;QACA,MAAMgB,UAAU,GAAGC,iBAAiB,CAACjB,QAAQ,CAAC;QAE9CkB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEL,kBAAkB,CAAC,CAAC,CAAC;QACzDI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,UAAU,CAAC,CAAC,CAAC;;QAEzC;QACA,MAAM,CAACI,mBAAmB,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3D7B,0BAA0B,CAACoB,kBAAkB,CAAC,EAC9CnB,kBAAkB,CAACqB,UAAU,CAAC,CAC/B,CAAC;QAEF,MAAMQ,eAAe,GAAGJ,mBAAmB,CAACK,IAAI;QAChD,MAAMC,OAAO,GAAGL,WAAW,CAACI,IAAI;QAEhCP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEK,eAAe,CAAC,CAAC,CAAC;QACvDN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEO,OAAO,CAAC,CAAC,CAAC;;QAEvC;QACA,MAAMC,kBAAkB,GAAG,EAAE;QAC7B,MAAMC,UAAU,GAAG,EAAE;QAErB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,IAAI,EAAE,EAAEA,KAAK,EAAE,EAAE;UACxCF,kBAAkB,CAACG,IAAI,CAACN,eAAe,CAACO,wBAAwB,CAACF,KAAK,CAAC,IAAI,CAAC,CAAC;UAC7ED,UAAU,CAACE,IAAI,CAACJ,OAAO,CAACM,gBAAgB,CAACH,KAAK,CAAC,IAAI,CAAC,CAAC;QACvD;;QAEA;QACA,MAAMI,sBAAsB,GAAG;UAC7BC,MAAM,EAAEtB,MAAM;UACduB,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,0BAA0B;YACjCX,IAAI,EAAEE,kBAAkB;YACxBU,WAAW,EAAE,mBAAmB;YAChCC,eAAe,EAAE,yBAAyB;YAC1CC,OAAO,EAAE,GAAG;YACZC,WAAW,EAAE,CAAC;YACdC,gBAAgB,EAAE,CAAC;YACnBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC;;QAED;QACA,MAAMC,cAAc,GAAG;UACrBT,MAAM,EAAEtB,MAAM;UACduB,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,kBAAkB;YACzBX,IAAI,EAAEG,UAAU;YAChBS,WAAW,EAAE,mBAAmB;YAChCC,eAAe,EAAE,yBAAyB;YAC1CC,OAAO,EAAE,GAAG;YACZC,WAAW,EAAE,CAAC;YACdC,gBAAgB,EAAE,CAAC;YACnBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC;QAEDvC,uBAAuB,CAAC8B,sBAAsB,CAAC;QAC/C5B,eAAe,CAACsC,cAAc,CAAC;;QAE/B;QACApC,cAAc,CAAC;UACbqC,WAAW,EAAE;YACXC,MAAM,EAAErB,eAAe,CAACsB,uBAAuB;YAC/CC,IAAI,EAAEvB,eAAe,CAACwB,eAAe;YACrCC,SAAS,EAAErC,MAAM,CAACY,eAAe,CAACyB,SAAS,GAAG,CAAC,CAAC;YAChDC,GAAG,EAAE1B,eAAe,CAAC2B,cAAc;YACnCC,QAAQ,EAAExC,MAAM,CAACY,eAAe,CAAC4B,QAAQ,GAAG,CAAC,CAAC;YAC9CC,MAAM,EAAE7B,eAAe,CAAC8B;UAC1B,CAAC;UACDC,GAAG,EAAE;YACHV,MAAM,EAAEnB,OAAO,CAAC8B,eAAe;YAC/BT,IAAI,EAAErB,OAAO,CAACsB,eAAe;YAC7BC,SAAS,EAAErC,MAAM,CAACc,OAAO,CAACuB,SAAS,GAAG,CAAC,CAAC;YACxCC,GAAG,EAAExB,OAAO,CAACyB,cAAc;YAC3BC,QAAQ,EAAExC,MAAM,CAACc,OAAO,CAAC0B,QAAQ,GAAG,CAAC,CAAC;YACtCC,MAAM,EAAE3B,OAAO,CAAC4B;UAClB;QACF,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAO5C,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1DC,QAAQ,CAAC,sDAAsD,CAAC;MAClE,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIT,QAAQ,EAAE;MACZa,qBAAqB,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMe,yBAAyB,GAAIf,QAAQ,IAAK;IAC9C;IACA,MAAMyD,yBAAyB,GAAGC,2BAA2B,CAAC1D,QAAQ,CAAC;IACvE,IAAIyD,yBAAyB,EAAE;MAC7BvC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD,OAAO;QACLwC,uBAAuB,EAAEC,6BAA6B,CAAC5D,QAAQ,CAAC2D,uBAAuB;MACzF,CAAC;IACH;;IAEA;IACA,MAAME,wBAAwB,GAAG7D,QAAQ,CAAC8D,sBAAsB,IAChCC,UAAU,CAAC/D,QAAQ,CAAC8D,sBAAsB,CAAC,GAAG,CAAC;IAC/E,IAAID,wBAAwB,EAAE;MAC5B3C,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,OAAO;QACL2C,sBAAsB,EAAEC,UAAU,CAAC/D,QAAQ,CAAC8D,sBAAsB,CAAC;QACnEE,WAAW,EAAEhE,QAAQ,CAACiE,WAAW,KAAK,WAAW,IAAIjE,QAAQ,CAACiE,WAAW,KAAK;MAChF,CAAC;IACH;;IAEA;IACA/C,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,OAAO;MACL+C,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAEnE,QAAQ,CAACmE,SAAS,IAAI,CAAC;MAClCC,YAAY,EAAEpE,QAAQ,CAACoE,YAAY,IAAI,YAAY;MACnDH,WAAW,EAAEjE,QAAQ,CAACiE,WAAW,IAAI,KAAK;MAC1CI,SAAS,EAAErE,QAAQ,CAACqE,SAAS,IAAI,GAAG;MACpCC,SAAS,EAAEtE,QAAQ,CAACsE,SAAS,IAAI,WAAW;MAC5CC,QAAQ,EAAEvE,QAAQ,CAACuE,QAAQ,IAAI,QAAQ;MACvCC,UAAU,EAAExE,QAAQ,CAACwE,UAAU,IAAI,QAAQ;MAC3CC,SAAS,EAAEzE,QAAQ,CAACyE,SAAS,IAAI,eAAe;MAChDC,SAAS,EAAE1E,QAAQ,CAAC0E,SAAS,IAAI,GAAG;MACpCC,cAAc,EAAE3E,QAAQ,CAAC2E,cAAc,IAAI,IAAI;MAC/CC,eAAe,EAAE5E,QAAQ,CAAC4E,eAAe,IAAI,IAAI;MACjDC,QAAQ,EAAE7E,QAAQ,CAAC6E,QAAQ;MAC3BC,SAAS,EAAE9E,QAAQ,CAAC8E;IACtB,CAAC;EACH,CAAC;;EAED;EACA,MAAM7D,iBAAiB,GAAIjB,QAAQ,IAAK;IACtC;IACA,MAAM+E,iBAAiB,GAAGC,mBAAmB,CAAChF,QAAQ,CAAC;IACvD,IAAI+E,iBAAiB,EAAE;MACrB7D,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAO;QACL8D,eAAe,EAAEC,qBAAqB,CAAClF,QAAQ,CAACiF,eAAe;MACjE,CAAC;IACH;;IAEA;IACA,MAAME,gBAAgB,GAAGnF,QAAQ,CAACoF,cAAc,IACxBrB,UAAU,CAAC/D,QAAQ,CAACoF,cAAc,CAAC,GAAG,CAAC;IAC/D,IAAID,gBAAgB,EAAE;MACpBjE,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,OAAO;QACLiE,cAAc,EAAErB,UAAU,CAAC/D,QAAQ,CAACoF,cAAc;MACpD,CAAC;IACH;;IAEA;IACAlE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,OAAO;MACL+C,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAEnE,QAAQ,CAACmE,SAAS,IAAI,CAAC;MAClCC,YAAY,EAAEpE,QAAQ,CAACoE,YAAY,IAAI,YAAY;MACnDH,WAAW,EAAEjE,QAAQ,CAACiE,WAAW,IAAI,KAAK;MAC1CI,SAAS,EAAErE,QAAQ,CAACqE,SAAS,IAAI,GAAG;MACpCC,SAAS,EAAEtE,QAAQ,CAACsE,SAAS,IAAI,WAAW;MAC5CC,QAAQ,EAAEvE,QAAQ,CAACuE,QAAQ,IAAI,QAAQ;MACvCC,UAAU,EAAExE,QAAQ,CAACwE,UAAU,IAAI,QAAQ;MAC3CC,SAAS,EAAEzE,QAAQ,CAACyE,SAAS,IAAI,eAAe;MAChDC,SAAS,EAAE1E,QAAQ,CAAC0E,SAAS,IAAI,GAAG;MACpCC,cAAc,EAAE3E,QAAQ,CAAC2E,cAAc,IAAI,IAAI;MAC/CC,eAAe,EAAE5E,QAAQ,CAAC4E,eAAe,IAAI,IAAI;MACjDC,QAAQ,EAAE7E,QAAQ,CAAC6E,QAAQ;MAC3BC,SAAS,EAAE9E,QAAQ,CAAC8E,SAAS;MAC7BO,gBAAgB,EAAErF,QAAQ,CAACqF,gBAAgB,IAAI;IACjD,CAAC;EACH,CAAC;;EAED;EACA,MAAM3B,2BAA2B,GAAI1D,QAAQ,IAAK;IAChD,IAAI,CAACA,QAAQ,CAAC2D,uBAAuB,EAAE,OAAO,KAAK;IAEnD,MAAM2B,UAAU,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;;IAEpF;IACA,OAAOA,UAAU,CAACC,KAAK,CAAC1D,KAAK,IAAI;MAC/B,MAAM2D,KAAK,GAAGxF,QAAQ,CAAC2D,uBAAuB,CAAC9B,KAAK,CAAC;MACrD,OAAO2D,KAAK,IAAIzB,UAAU,CAACyB,KAAK,CAAC,IAAI,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMR,mBAAmB,GAAIhF,QAAQ,IAAK;IACxC,IAAI,CAACA,QAAQ,CAACiF,eAAe,EAAE,OAAO,KAAK;IAE3C,MAAMK,UAAU,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;;IAEpF;IACA,OAAOA,UAAU,CAACC,KAAK,CAAC1D,KAAK,IAAI;MAC/B,MAAM2D,KAAK,GAAGxF,QAAQ,CAACiF,eAAe,CAACpD,KAAK,CAAC;MAC7C,OAAO2D,KAAK,IAAIzB,UAAU,CAACyB,KAAK,CAAC,IAAI,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM5B,6BAA6B,GAAI6B,WAAW,IAAK;IACrD,MAAMH,UAAU,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;IAEpF,MAAMI,SAAS,GAAG,CAAC,CAAC;IACpBJ,UAAU,CAACK,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;MACvCH,SAAS,CAACG,KAAK,GAAG,CAAC,CAAC,GAAG9B,UAAU,CAAC0B,WAAW,CAACG,SAAS,CAAC,CAAC,IAAI,CAAC;IAChE,CAAC,CAAC;IAEF,OAAOF,SAAS;EAClB,CAAC;;EAED;EACA,MAAMR,qBAAqB,GAAIO,WAAW,IAAK;IAC7C,MAAMH,UAAU,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;IAEpF,MAAMI,SAAS,GAAG,CAAC,CAAC;IACpBJ,UAAU,CAACK,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;MACvCH,SAAS,CAACG,KAAK,GAAG,CAAC,CAAC,GAAG9B,UAAU,CAAC0B,WAAW,CAACG,SAAS,CAAC,CAAC,IAAI,CAAC;IAChE,CAAC,CAAC;IAEF,OAAOF,SAAS;EAClB,CAAC;;EAED;EACA,MAAMI,uBAAuB,GAAG;IAC9BC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE,KAAK;QACfjE,MAAM,EAAE;UACNkE,aAAa,EAAE,IAAI;UACnBC,OAAO,EAAE;QACX;MACF,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,4BAA4B;QAClCC,IAAI,EAAE;UACJC,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE;QACV,CAAC;QACDN,OAAO,EAAE;MACX,CAAC;MACDO,OAAO,EAAE;QACPC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,KAAK;QAChBC,SAAS,EAAE;UACT3E,KAAK,EAAE,SAAAA,CAAS4E,OAAO,EAAE;YACvB,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC7E,KAAK,KAAK4E,OAAO,CAACE,MAAM,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,MAAM;UACvE;QACF;MACF;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDf,OAAO,EAAE,IAAI;QACbD,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE;YACJE,MAAM,EAAE;UACV;QACF,CAAC;QACDY,IAAI,EAAE;UACJhB,OAAO,EAAE;QACX;MACF,CAAC;MACDY,CAAC,EAAE;QACDZ,OAAO,EAAE,IAAI;QACbD,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,0BAA0B;UAChCC,IAAI,EAAE;YACJE,MAAM,EAAE;UACV;QACF,CAAC;QACDa,WAAW,EAAE,IAAI;QACjBD,IAAI,EAAE;UACJE,KAAK,EAAE;QACT;MACF;IACF,CAAC;IACDC,WAAW,EAAE;MACXb,IAAI,EAAE,SAAS;MACfc,IAAI,EAAE,GAAG;MACTb,SAAS,EAAE;IACb;EACF,CAAC;;EAED;EACA,MAAMc,eAAe,GAAG;IACtB7B,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE,KAAK;IAC1BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE,KAAK;QACfjE,MAAM,EAAE;UACNkE,aAAa,EAAE,IAAI;UACnBC,OAAO,EAAE;QACX;MACF,CAAC;MACDC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,oBAAoB;QAC1BC,IAAI,EAAE;UACJC,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE;QACV,CAAC;QACDN,OAAO,EAAE;MACX,CAAC;MACDO,OAAO,EAAE;QACPC,IAAI,EAAE,OAAO;QACbC,SAAS,EAAE,KAAK;QAChBC,SAAS,EAAE;UACT3E,KAAK,EAAE,SAAAA,CAAS4E,OAAO,EAAE;YACvB,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC7E,KAAK,KAAK4E,OAAO,CAACE,MAAM,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,MAAM;UACvE;QACF;MACF;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDf,OAAO,EAAE,IAAI;QACbD,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE;YACJE,MAAM,EAAE;UACV;QACF,CAAC;QACDY,IAAI,EAAE;UACJhB,OAAO,EAAE;QACX;MACF,CAAC;MACDY,CAAC,EAAE;QACDZ,OAAO,EAAE,IAAI;QACbD,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE,kBAAkB;UACxBC,IAAI,EAAE;YACJE,MAAM,EAAE;UACV;QACF,CAAC;QACDa,WAAW,EAAE,IAAI;QACjBD,IAAI,EAAE;UACJE,KAAK,EAAE;QACT;MACF;IACF,CAAC;IACDC,WAAW,EAAE;MACXb,IAAI,EAAE,SAAS;MACfc,IAAI,EAAE,GAAG;MACTb,SAAS,EAAE;IACb;EACF,CAAC;EAED,IAAItG,OAAO,EAAE;IACX,oBACEX,OAAA;MAAKgI,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpCjI,OAAA;QAAAiI,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBrI,OAAA;QAAKgI,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5BjI,OAAA;UAAAiI,QAAA,EAAG;QAA6B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,IAAIxH,KAAK,EAAE;IACT,oBACEb,OAAA;MAAKgI,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpCjI,OAAA;QAAAiI,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBrI,OAAA;QAAKgI,SAAS,EAAC,aAAa;QAAAC,QAAA,eAC1BjI,OAAA;UAAGgI,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAEpH;QAAK;UAAAqH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACErI,OAAA;IAAKgI,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCjI,OAAA;MAAAiI,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGrB5H,WAAW,iBACVT,OAAA;MAAKgI,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7BjI,OAAA;QAAKgI,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClCjI,OAAA;UAAKgI,SAAS,EAAC,yCAAyC;UAAAC,QAAA,gBACtDjI,OAAA;YAAAiI,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBrI,OAAA;YAAKgI,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5BjI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACjDrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACsC,WAAW,CAACC,MAAM,CAACuE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChF,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC9CrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACsC,WAAW,CAACK,SAAS,EAAC,IAAE,EAAC3C,WAAW,CAACsC,WAAW,CAACG,IAAI,CAACqE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnH,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC7CrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACsC,WAAW,CAACQ,QAAQ,EAAC,IAAE,EAAC9C,WAAW,CAACsC,WAAW,CAACM,GAAG,CAACkE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjH,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC1CrI,OAAA;gBAAMgI,SAAS,EAAC,yBAAyB;gBAAAC,QAAA,EAAEK,cAAc,CAAC7H,WAAW,CAACsC,WAAW,CAACS,MAAM;cAAC;gBAAA0E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENrI,OAAA;UAAKgI,SAAS,EAAC,iCAAiC;UAAAC,QAAA,gBAC9CjI,OAAA;YAAAiI,QAAA,EAAI;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACZrI,OAAA;YAAKgI,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5BjI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACjDrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACiD,GAAG,CAACV,MAAM,CAACuE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxE,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC9CrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACiD,GAAG,CAACN,SAAS,EAAC,IAAE,EAAC3C,WAAW,CAACiD,GAAG,CAACR,IAAI,CAACqE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnG,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC7CrI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAExH,WAAW,CAACiD,GAAG,CAACH,QAAQ,EAAC,IAAE,EAAC9C,WAAW,CAACiD,GAAG,CAACL,GAAG,CAACkE,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjG,CAAC,eACNrI,OAAA;cAAKgI,SAAS,EAAC,WAAW;cAAAC,QAAA,gBACxBjI,OAAA;gBAAMgI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC1CrI,OAAA;gBAAMgI,SAAS,EAAC,yBAAyB;gBAAAC,QAAA,EAAEK,cAAc,CAAC7H,WAAW,CAACiD,GAAG,CAACF,MAAM;cAAC;gBAAA0E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDrI,OAAA;MAAKgI,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAE/BjI,OAAA;QAAKgI,SAAS,EAAC,mCAAmC;QAAAC,QAAA,eAChDjI,OAAA;UAAKgI,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3B5H,oBAAoB,iBACnBL,OAAA,CAACb,IAAI;YAACyC,IAAI,EAAEvB,oBAAqB;YAACkI,OAAO,EAAEtC;UAAwB;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QACtE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNrI,OAAA;QAAKgI,SAAS,EAAC,2BAA2B;QAAAC,QAAA,eACxCjI,OAAA;UAAKgI,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3B1H,YAAY,iBACXP,OAAA,CAACb,IAAI;YAACyC,IAAI,EAAErB,YAAa;YAACgI,OAAO,EAAER;UAAgB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QACtD;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAGL5H,WAAW,iBACVT,OAAA;MAAKgI,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BjI,OAAA;QAAGgI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAC9BO,yBAAyB,CAAC/H,WAAW,CAACsC,WAAW,CAACS,MAAM,EAAE/C,WAAW,CAACiD,GAAG,CAACF,MAAM;MAAC;QAAA0E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;;EAGR;EACA,SAASC,cAAcA,CAAC9E,MAAM,EAAE;IAC9B,QAAQA,MAAM;MACZ,KAAK,cAAc;QACjB,OAAO,mBAAmB;MAC5B,KAAK,yBAAyB;QAC5B,OAAO,kBAAkB;MAC3B,KAAK,WAAW;QACd,OAAO,mBAAmB;MAC5B;QACE,OAAOA,MAAM,IAAI,SAAS;IAC9B;EACF;;EAEA;EACA,SAASgF,yBAAyBA,CAACC,iBAAiB,EAAEC,SAAS,EAAE;IAC/D,MAAMC,YAAY,GAAG,EAAE;IAEvB,IAAIF,iBAAiB,KAAK,cAAc,EAAE;MACxCE,YAAY,CAAC1G,IAAI,CAAC,+CAA+C,CAAC;IACpE,CAAC,MAAM,IAAIwG,iBAAiB,KAAK,yBAAyB,EAAE;MAC1DE,YAAY,CAAC1G,IAAI,CAAC,0EAA0E,CAAC;IAC/F,CAAC,MAAM;MACL0G,YAAY,CAAC1G,IAAI,CAAC,qEAAqE,CAAC;IAC1F;IAEA,IAAIyG,SAAS,KAAK,cAAc,EAAE;MAChCC,YAAY,CAAC1G,IAAI,CAAC,uCAAuC,CAAC;IAC5D,CAAC,MAAM,IAAIyG,SAAS,KAAK,yBAAyB,EAAE;MAClDC,YAAY,CAAC1G,IAAI,CAAC,kEAAkE,CAAC;IACvF,CAAC,MAAM;MACL0G,YAAY,CAAC1G,IAAI,CAAC,4DAA4D,CAAC;IACjF;IAEA,OAAO0G,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;EAChC;AACF,CAAC;AAACxI,EAAA,CAphBIF,iBAAiB;AAAA2I,EAAA,GAAjB3I,iBAAiB;AAshBvB,eAAeA,iBAAiB;AAAC,IAAA2I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}