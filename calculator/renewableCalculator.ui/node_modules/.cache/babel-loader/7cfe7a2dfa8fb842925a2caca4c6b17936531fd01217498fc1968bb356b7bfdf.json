{"ast":null,"code":"// 气象数据服务 - 现在使用后端NASA Power API\nimport { fetchSolarData } from '../api';\n\n// 模拟气候数据 - 用于后端不可用时的演示\nconst mockClimateData = {\n  // London, UK 的典型太阳辐射数据 (kWh/m²/day)\n  mockSolarData: [{\n    month: 'Jan',\n    value: 0.6\n  }, {\n    month: 'Feb',\n    value: 1.2\n  }, {\n    month: 'Mar',\n    value: 2.4\n  }, {\n    month: 'Apr',\n    value: 3.8\n  }, {\n    month: 'May',\n    value: 4.9\n  }, {\n    month: 'Jun',\n    value: 5.2\n  }, {\n    month: 'Jul',\n    value: 4.8\n  }, {\n    month: 'Aug',\n    value: 4.1\n  }, {\n    month: 'Sep',\n    value: 2.8\n  }, {\n    month: 'Oct',\n    value: 1.6\n  }, {\n    month: 'Nov',\n    value: 0.8\n  }, {\n    month: 'Dec',\n    value: 0.5\n  }],\n  // London, UK 的典型温度数据 (°C)\n  mockTemperatureData: [{\n    month: 'Jan',\n    value: 4.2\n  }, {\n    month: 'Feb',\n    value: 4.8\n  }, {\n    month: 'Mar',\n    value: 7.2\n  }, {\n    month: 'Apr',\n    value: 9.8\n  }, {\n    month: 'May',\n    value: 13.5\n  }, {\n    month: 'Jun',\n    value: 16.8\n  }, {\n    month: 'Jul',\n    value: 19.1\n  }, {\n    month: 'Aug',\n    value: 18.7\n  }, {\n    month: 'Sep',\n    value: 15.6\n  }, {\n    month: 'Oct',\n    value: 11.9\n  }, {\n    month: 'Nov',\n    value: 7.8\n  }, {\n    month: 'Dec',\n    value: 5.1\n  }]\n};\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据 (现在通过后端)\n  async getSolarRadiationData(latitude, longitude, location = '') {\n    try {\n      const response = await fetchSolarData(latitude, longitude, location);\n      if (response.data.success) {\n        console.log('Backend NASA POWER API response:', response.data);\n\n        // Convert backend response to frontend format\n        const monthlyData = response.data.data;\n        const processedData = this.processSolarDataFromBackend(monthlyData);\n        return {\n          success: true,\n          data: processedData,\n          source: response.data.source,\n          message: response.data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: response.data.error || 'Backend API error'\n        };\n      }\n    } catch (error) {\n      console.error('Backend NASA API Error:', error);\n      return {\n        success: false,\n        error: 'Network error connecting to backend: ' + error.message\n      };\n    }\n  },\n  // 获取Open Meteo气温数据 (保持原有实现)\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` + `latitude=${latitude}&` + `longitude=${longitude}&` + `start_date=${startDate}&` + `end_date=${endDate}&` + `daily=temperature_2m_mean&` + `timezone=Europe/London`;\n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return {\n            success: true,\n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return {\n            success: false,\n            error: 'Invalid Open-Meteo API response structure'\n          };\n        }\n      }\n\n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return {\n        success: false,\n        error: 'Network error: ' + error.message\n      };\n    }\n  },\n  // 处理来自后端的NASA数据\n  processSolarDataFromBackend(backendData) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log('Processing backend solar data:', backendData);\n\n    // Convert backend monthly data (month number -> value) to frontend format\n    const monthlyData = months.map((month, index) => ({\n      month,\n      value: backendData[index + 1] || 0\n    }));\n    console.log('Processed solar data from backend:', monthlyData);\n    return monthlyData;\n  },\n  // 处理NASA数据为月度数据 (保留用于兼容性，但现在使用后端)\n  processSolarData(nasaData, isClimatology = false) {\n    // 这个方法保留用于向后兼容，但实际会使用 processSolarDataFromBackend\n    console.warn('processSolarData is deprecated, using backend NASA API now');\n    return this.processSolarDataFromBackend(nasaData);\n  },\n  // 获取模拟气候数据 - 用于演示和后端不可用时\n  getMockClimateData(location = 'Demo Location') {\n    return {\n      success: true,\n      data: {\n        solar: mockClimateData.mockSolarData,\n        temperature: mockClimateData.mockTemperatureData\n      },\n      source: 'Mock Data',\n      message: `Using mock climate data for demonstration (based on London, UK). Location: ${location}`\n    };\n  },\n  // 处理Open Meteo温度数据为月度平均值 (保持原有实现)\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n\n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length : 0;\n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n  // 获取完整的气候数据 (现在使用后端NASA API)\n  async getCompleteClimateData(latitude, longitude, location = '') {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n\n      // 使用后端NASA POWER API获取太阳辐照数据\n      const solarResult = await this.getSolarRadiationData(latitude, longitude, location);\n\n      // 并行获取温度数据 (仍然直接调用Open-Meteo)\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n      console.log('Backend Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据 (太阳能数据已经在后端处理过了)\n      const solarData = solarResult.data;\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        },\n        source: solarResult.source,\n        message: solarResult.message\n      };\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["fetchSolarData","mockClimateData","mockSolarData","month","value","mockTemperatureData","weatherService","getSolarRadiationData","latitude","longitude","location","response","data","success","console","log","monthlyData","processedData","processSolarDataFromBackend","source","message","error","getTemperatureData","years","currentDate","Date","currentYear","getFullYear","endYear","startYear","endDate","startDate","url","fetch","method","headers","ok","json","Object","keys","daily","time","temperature_2m_mean","timezone","errorMessage","status","statusText","errorData","reason","e","backendData","months","map","index","processSolarData","nasaData","isClimatology","warn","getMockClimateData","solar","temperature","processTemperatureData","openMeteoData","length","monthlyGroups","Array","fill","forEach","date","temp","isNaN","getMonth","push","parseFloat","temps","avgTemp","reduce","sum","Math","round","getCompleteClimateData","solarResult","tempResult","Error","solarData","temperatureData"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/services/weatherService.js"],"sourcesContent":["// 气象数据服务 - 现在使用后端NASA Power API\nimport { fetchSolarData } from '../api';\n\n// 模拟气候数据 - 用于后端不可用时的演示\nconst mockClimateData = {\n  // London, UK 的典型太阳辐射数据 (kWh/m²/day)\n  mockSolarData: [\n    { month: 'Jan', value: 0.6 },\n    { month: 'Feb', value: 1.2 },\n    { month: 'Mar', value: 2.4 },\n    { month: 'Apr', value: 3.8 },\n    { month: 'May', value: 4.9 },\n    { month: 'Jun', value: 5.2 },\n    { month: 'Jul', value: 4.8 },\n    { month: 'Aug', value: 4.1 },\n    { month: 'Sep', value: 2.8 },\n    { month: 'Oct', value: 1.6 },\n    { month: 'Nov', value: 0.8 },\n    { month: 'Dec', value: 0.5 }\n  ],\n  \n  // London, UK 的典型温度数据 (°C)\n  mockTemperatureData: [\n    { month: 'Jan', value: 4.2 },\n    { month: 'Feb', value: 4.8 },\n    { month: 'Mar', value: 7.2 },\n    { month: 'Apr', value: 9.8 },\n    { month: 'May', value: 13.5 },\n    { month: 'Jun', value: 16.8 },\n    { month: 'Jul', value: 19.1 },\n    { month: 'Aug', value: 18.7 },\n    { month: 'Sep', value: 15.6 },\n    { month: 'Oct', value: 11.9 },\n    { month: 'Nov', value: 7.8 },\n    { month: 'Dec', value: 5.1 }\n  ]\n};\n\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据 (现在通过后端)\n  async getSolarRadiationData(latitude, longitude, location = '') {\n    try {\n      const response = await fetchSolarData(latitude, longitude, location);\n      \n      if (response.data.success) {\n        console.log('Backend NASA POWER API response:', response.data);\n        \n        // Convert backend response to frontend format\n        const monthlyData = response.data.data;\n        const processedData = this.processSolarDataFromBackend(monthlyData);\n        \n        return { \n          success: true, \n          data: processedData,\n          source: response.data.source,\n          message: response.data.message\n        };\n      } else {\n        return { \n          success: false, \n          error: response.data.error || 'Backend API error'\n        };\n      }\n      \n    } catch (error) {\n      console.error('Backend NASA API Error:', error);\n      return { \n        success: false, \n        error: 'Network error connecting to backend: ' + error.message \n      };\n    }\n  },\n\n  // 获取Open Meteo气温数据 (保持原有实现)\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    \n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` +\n        `latitude=${latitude}&` +\n        `longitude=${longitude}&` +\n        `start_date=${startDate}&` +\n        `end_date=${endDate}&` +\n        `daily=temperature_2m_mean&` +\n        `timezone=Europe/London`;\n      \n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        \n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return { \n            success: true, \n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return { success: false, error: 'Invalid Open-Meteo API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 处理来自后端的NASA数据\n  processSolarDataFromBackend(backendData) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log('Processing backend solar data:', backendData);\n    \n    // Convert backend monthly data (month number -> value) to frontend format\n    const monthlyData = months.map((month, index) => ({\n      month,\n      value: backendData[index + 1] || 0\n    }));\n\n    console.log('Processed solar data from backend:', monthlyData);\n    return monthlyData;\n  },\n\n  // 处理NASA数据为月度数据 (保留用于兼容性，但现在使用后端)\n  processSolarData(nasaData, isClimatology = false) {\n    // 这个方法保留用于向后兼容，但实际会使用 processSolarDataFromBackend\n    console.warn('processSolarData is deprecated, using backend NASA API now');\n    return this.processSolarDataFromBackend(nasaData);\n  },\n\n  // 获取模拟气候数据 - 用于演示和后端不可用时\n  getMockClimateData(location = 'Demo Location') {\n    return {\n      success: true,\n      data: {\n        solar: mockClimateData.mockSolarData,\n        temperature: mockClimateData.mockTemperatureData\n      },\n      source: 'Mock Data',\n      message: `Using mock climate data for demonstration (based on London, UK). Location: ${location}`\n    };\n  },\n\n  // 处理Open Meteo温度数据为月度平均值 (保持原有实现)\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n    \n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    \n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 \n        ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 获取完整的气候数据 (现在使用后端NASA API)\n  async getCompleteClimateData(latitude, longitude, location = '') {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n      \n      // 使用后端NASA POWER API获取太阳辐照数据\n      const solarResult = await this.getSolarRadiationData(latitude, longitude, location);\n      \n      // 并行获取温度数据 (仍然直接调用Open-Meteo)\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n\n      console.log('Backend Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据 (太阳能数据已经在后端处理过了)\n      const solarData = solarResult.data;\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        },\n        source: solarResult.source,\n        message: solarResult.message\n      };\n\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}