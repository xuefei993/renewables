{"ast":null,"code":"// 气象数据服务 - 现在使用后端NASA Power API\nimport{fetchSolarData}from'../api';export const weatherService={// 获取NASA Power太阳辐照数据 (现在通过后端)\nasync getSolarRadiationData(latitude,longitude){let location=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{const response=await fetchSolarData(latitude,longitude,location);if(response.data.success){console.log('Backend NASA POWER API response:',response.data);// Convert backend response to frontend format\nconst monthlyData=response.data.data;const processedData=this.processSolarDataFromBackend(monthlyData);return{success:true,data:processedData,source:response.data.source,message:response.data.message};}else{return{success:false,error:response.data.error||'Backend API error'};}}catch(error){console.error('Backend NASA API Error:',error);return{success:false,error:'Network error connecting to backend: '+error.message};}},// 获取Open Meteo气温数据 (保持原有实现)\nasync getTemperatureData(latitude,longitude){let years=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;// 使用相同的日期逻辑\nconst currentDate=new Date();const currentYear=currentDate.getFullYear();const endYear=currentYear-1;// 总是使用前一年\nconst startYear=endYear-years+1;const endDate=\"\".concat(endYear,\"-12-31\");const startDate=\"\".concat(startYear,\"-01-01\");try{const url=\"https://archive-api.open-meteo.com/v1/archive?\"+\"latitude=\".concat(latitude,\"&\")+\"longitude=\".concat(longitude,\"&\")+\"start_date=\".concat(startDate,\"&\")+\"end_date=\".concat(endDate,\"&\")+\"daily=temperature_2m_mean&\"+\"timezone=Europe/London\";console.log('Open-Meteo API URL:',url);console.log(\"Date range: \".concat(startDate,\" to \").concat(endDate));const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json'}});if(response.ok){const data=await response.json();console.log('Open-Meteo response keys:',Object.keys(data));if(data.daily&&data.daily.time&&data.daily.temperature_2m_mean){return{success:true,data:data.daily,timezone:data.timezone||'Europe/London'};}else{return{success:false,error:'Invalid Open-Meteo API response structure'};}}// 尝试解析错误响应\nlet errorMessage=\"Open Meteo API error: \".concat(response.status,\" \").concat(response.statusText);try{const errorData=await response.json();console.log('Open-Meteo API error response:',errorData);if(errorData.reason){errorMessage+=\" - \".concat(errorData.reason);}}catch(e){// 如果无法解析错误响应，使用默认错误信息\n}return{success:false,error:errorMessage};}catch(error){console.error('Open Meteo API Error:',error);return{success:false,error:'Network error: '+error.message};}},// 处理来自后端的NASA数据\nprocessSolarDataFromBackend(backendData){const months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];console.log('Processing backend solar data:',backendData);// Convert backend monthly data (month number -> value) to frontend format\nconst monthlyData=months.map((month,index)=>({month,value:backendData[index+1]||0}));console.log('Processed solar data from backend:',monthlyData);return monthlyData;},// 处理NASA数据为月度数据 (保留用于兼容性，但现在使用后端)\nprocessSolarData(nasaData){let isClimatology=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// 这个方法保留用于向后兼容，但实际会使用 processSolarDataFromBackend\nconsole.warn('processSolarData is deprecated, using backend NASA API now');return this.processSolarDataFromBackend(nasaData);},// 处理Open Meteo温度数据为月度平均值 (保持原有实现)\nprocessTemperatureData(openMeteoData){if(!openMeteoData.time||!openMeteoData.temperature_2m_mean){console.error('Invalid temperature data structure:',openMeteoData);return[];}const months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];console.log(\"Processing \".concat(openMeteoData.time.length,\" temperature data points\"));// 按月份分组数据\nconst monthlyGroups=Array(12).fill(null).map(()=>[]);openMeteoData.time.forEach((date,index)=>{const temp=openMeteoData.temperature_2m_mean[index];if(temp!==null&&!isNaN(temp)){const month=new Date(date).getMonth();// 0-11\nmonthlyGroups[month].push(parseFloat(temp));}});// 计算每月平均值\nconst monthlyData=months.map((month,index)=>{const temps=monthlyGroups[index];const avgTemp=temps.length>0?temps.reduce((sum,temp)=>sum+temp,0)/temps.length:0;return{month,value:Math.round(avgTemp*100)/100};});console.log('Processed temperature data:',monthlyData);return monthlyData;},// 获取完整的气候数据 (现在使用后端NASA API)\nasync getCompleteClimateData(latitude,longitude){let location=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{console.log(\"Fetching climate data for coordinates: \".concat(latitude,\", \").concat(longitude));// 使用后端NASA POWER API获取太阳辐照数据\nconst solarResult=await this.getSolarRadiationData(latitude,longitude,location);// 并行获取温度数据 (仍然直接调用Open-Meteo)\nconst tempResult=await this.getTemperatureData(latitude,longitude);console.log('Backend Solar API result:',solarResult);console.log('Temperature API result:',tempResult);if(!solarResult.success){throw new Error(\"Solar data: \".concat(solarResult.error));}if(!tempResult.success){throw new Error(\"Temperature data: \".concat(tempResult.error));}// 处理数据 (太阳能数据已经在后端处理过了)\nconst solarData=solarResult.data;const temperatureData=this.processTemperatureData(tempResult.data);// 验证处理后的数据\nif(solarData.length===0){throw new Error('No valid solar radiation data after processing');}if(temperatureData.length===0){throw new Error('No valid temperature data after processing');}console.log('Final processed solar data:',solarData);console.log('Final processed temperature data:',temperatureData);return{success:true,data:{solar:solarData,temperature:temperatureData},source:solarResult.source,message:solarResult.message};}catch(error){console.error('Complete climate data error:',error);return{success:false,error:error.message};}}};","map":{"version":3,"names":["fetchSolarData","weatherService","getSolarRadiationData","latitude","longitude","location","arguments","length","undefined","response","data","success","console","log","monthlyData","processedData","processSolarDataFromBackend","source","message","error","getTemperatureData","years","currentDate","Date","currentYear","getFullYear","endYear","startYear","endDate","concat","startDate","url","fetch","method","headers","ok","json","Object","keys","daily","time","temperature_2m_mean","timezone","errorMessage","status","statusText","errorData","reason","e","backendData","months","map","month","index","value","processSolarData","nasaData","isClimatology","warn","processTemperatureData","openMeteoData","monthlyGroups","Array","fill","forEach","date","temp","isNaN","getMonth","push","parseFloat","temps","avgTemp","reduce","sum","Math","round","getCompleteClimateData","solarResult","tempResult","Error","solarData","temperatureData","solar","temperature"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/weatherService.js"],"sourcesContent":["// 气象数据服务 - 现在使用后端NASA Power API\nimport { fetchSolarData } from '../api';\n\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据 (现在通过后端)\n  async getSolarRadiationData(latitude, longitude, location = '') {\n    try {\n      const response = await fetchSolarData(latitude, longitude, location);\n      \n      if (response.data.success) {\n        console.log('Backend NASA POWER API response:', response.data);\n        \n        // Convert backend response to frontend format\n        const monthlyData = response.data.data;\n        const processedData = this.processSolarDataFromBackend(monthlyData);\n        \n        return { \n          success: true, \n          data: processedData,\n          source: response.data.source,\n          message: response.data.message\n        };\n      } else {\n        return { \n          success: false, \n          error: response.data.error || 'Backend API error'\n        };\n      }\n      \n    } catch (error) {\n      console.error('Backend NASA API Error:', error);\n      return { \n        success: false, \n        error: 'Network error connecting to backend: ' + error.message \n      };\n    }\n  },\n\n  // 获取Open Meteo气温数据 (保持原有实现)\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    \n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` +\n        `latitude=${latitude}&` +\n        `longitude=${longitude}&` +\n        `start_date=${startDate}&` +\n        `end_date=${endDate}&` +\n        `daily=temperature_2m_mean&` +\n        `timezone=Europe/London`;\n      \n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        \n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return { \n            success: true, \n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return { success: false, error: 'Invalid Open-Meteo API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 处理来自后端的NASA数据\n  processSolarDataFromBackend(backendData) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log('Processing backend solar data:', backendData);\n    \n    // Convert backend monthly data (month number -> value) to frontend format\n    const monthlyData = months.map((month, index) => ({\n      month,\n      value: backendData[index + 1] || 0\n    }));\n\n    console.log('Processed solar data from backend:', monthlyData);\n    return monthlyData;\n  },\n\n  // 处理NASA数据为月度数据 (保留用于兼容性，但现在使用后端)\n  processSolarData(nasaData, isClimatology = false) {\n    // 这个方法保留用于向后兼容，但实际会使用 processSolarDataFromBackend\n    console.warn('processSolarData is deprecated, using backend NASA API now');\n    return this.processSolarDataFromBackend(nasaData);\n  },\n\n  // 处理Open Meteo温度数据为月度平均值 (保持原有实现)\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n    \n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    \n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 \n        ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 获取完整的气候数据 (现在使用后端NASA API)\n  async getCompleteClimateData(latitude, longitude, location = '') {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n      \n      // 使用后端NASA POWER API获取太阳辐照数据\n      const solarResult = await this.getSolarRadiationData(latitude, longitude, location);\n      \n      // 并行获取温度数据 (仍然直接调用Open-Meteo)\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n\n      console.log('Backend Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据 (太阳能数据已经在后端处理过了)\n      const solarData = solarResult.data;\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        },\n        source: solarResult.source,\n        message: solarResult.message\n      };\n\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}; "],"mappings":"AAAA;AACA,OAASA,cAAc,KAAQ,QAAQ,CAEvC,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B;AACA,KAAM,CAAAC,qBAAqBA,CAACC,QAAQ,CAAEC,SAAS,CAAiB,IAAf,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC5D,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAT,cAAc,CAACG,QAAQ,CAAEC,SAAS,CAAEC,QAAQ,CAAC,CAEpE,GAAII,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAE,CACzBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEJ,QAAQ,CAACC,IAAI,CAAC,CAE9D;AACA,KAAM,CAAAI,WAAW,CAAGL,QAAQ,CAACC,IAAI,CAACA,IAAI,CACtC,KAAM,CAAAK,aAAa,CAAG,IAAI,CAACC,2BAA2B,CAACF,WAAW,CAAC,CAEnE,MAAO,CACLH,OAAO,CAAE,IAAI,CACbD,IAAI,CAAEK,aAAa,CACnBE,MAAM,CAAER,QAAQ,CAACC,IAAI,CAACO,MAAM,CAC5BC,OAAO,CAAET,QAAQ,CAACC,IAAI,CAACQ,OACzB,CAAC,CACH,CAAC,IAAM,CACL,MAAO,CACLP,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAEV,QAAQ,CAACC,IAAI,CAACS,KAAK,EAAI,mBAChC,CAAC,CACH,CAEF,CAAE,MAAOA,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAE,uCAAuC,CAAGA,KAAK,CAACD,OACzD,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAE,kBAAkBA,CAACjB,QAAQ,CAAEC,SAAS,CAAa,IAAX,CAAAiB,KAAK,CAAAf,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACrD;AACA,KAAM,CAAAgB,WAAW,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC9B,KAAM,CAAAC,WAAW,CAAGF,WAAW,CAACG,WAAW,CAAC,CAAC,CAC7C,KAAM,CAAAC,OAAO,CAAGF,WAAW,CAAG,CAAC,CAAE;AACjC,KAAM,CAAAG,SAAS,CAAGD,OAAO,CAAGL,KAAK,CAAG,CAAC,CAErC,KAAM,CAAAO,OAAO,IAAAC,MAAA,CAAMH,OAAO,UAAQ,CAClC,KAAM,CAAAI,SAAS,IAAAD,MAAA,CAAMF,SAAS,UAAQ,CAEtC,GAAI,CACF,KAAM,CAAAI,GAAG,CAAG,6DAAAF,MAAA,CACE1B,QAAQ,KAAG,cAAA0B,MAAA,CACVzB,SAAS,KAAG,eAAAyB,MAAA,CACXC,SAAS,KAAG,aAAAD,MAAA,CACdD,OAAO,KAAG,6BACM,yBACJ,CAE1BhB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEkB,GAAG,CAAC,CACvCnB,OAAO,CAACC,GAAG,gBAAAgB,MAAA,CAAgBC,SAAS,SAAAD,MAAA,CAAOD,OAAO,CAAE,CAAC,CAErD,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAuB,KAAK,CAACD,GAAG,CAAE,CAChCE,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,kBACZ,CACF,CAAC,CAAC,CAEF,GAAIzB,QAAQ,CAAC0B,EAAE,CAAE,CACf,KAAM,CAAAzB,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAAC2B,IAAI,CAAC,CAAC,CAClCxB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEwB,MAAM,CAACC,IAAI,CAAC5B,IAAI,CAAC,CAAC,CAE3D,GAAIA,IAAI,CAAC6B,KAAK,EAAI7B,IAAI,CAAC6B,KAAK,CAACC,IAAI,EAAI9B,IAAI,CAAC6B,KAAK,CAACE,mBAAmB,CAAE,CACnE,MAAO,CACL9B,OAAO,CAAE,IAAI,CACbD,IAAI,CAAEA,IAAI,CAAC6B,KAAK,CAChBG,QAAQ,CAAEhC,IAAI,CAACgC,QAAQ,EAAI,eAC7B,CAAC,CACH,CAAC,IAAM,CACL,MAAO,CAAE/B,OAAO,CAAE,KAAK,CAAEQ,KAAK,CAAE,2CAA4C,CAAC,CAC/E,CACF,CAEA;AACA,GAAI,CAAAwB,YAAY,0BAAAd,MAAA,CAA4BpB,QAAQ,CAACmC,MAAM,MAAAf,MAAA,CAAIpB,QAAQ,CAACoC,UAAU,CAAE,CACpF,GAAI,CACF,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAArC,QAAQ,CAAC2B,IAAI,CAAC,CAAC,CACvCxB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEiC,SAAS,CAAC,CACxD,GAAIA,SAAS,CAACC,MAAM,CAAE,CACpBJ,YAAY,QAAAd,MAAA,CAAUiB,SAAS,CAACC,MAAM,CAAE,CAC1C,CACF,CAAE,MAAOC,CAAC,CAAE,CACV;AAAA,CAGF,MAAO,CAAErC,OAAO,CAAE,KAAK,CAAEQ,KAAK,CAAEwB,YAAa,CAAC,CAChD,CAAE,MAAOxB,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,CAAER,OAAO,CAAE,KAAK,CAAEQ,KAAK,CAAE,iBAAiB,CAAGA,KAAK,CAACD,OAAQ,CAAC,CACrE,CACF,CAAC,CAED;AACAF,2BAA2BA,CAACiC,WAAW,CAAE,CACvC,KAAM,CAAAC,MAAM,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CACzC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAExDtC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEoC,WAAW,CAAC,CAE1D;AACA,KAAM,CAAAnC,WAAW,CAAGoC,MAAM,CAACC,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAM,CAChDD,KAAK,CACLE,KAAK,CAAEL,WAAW,CAACI,KAAK,CAAG,CAAC,CAAC,EAAI,CACnC,CAAC,CAAC,CAAC,CAEHzC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEC,WAAW,CAAC,CAC9D,MAAO,CAAAA,WAAW,CACpB,CAAC,CAED;AACAyC,gBAAgBA,CAACC,QAAQ,CAAyB,IAAvB,CAAAC,aAAa,CAAAnD,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC9C;AACAM,OAAO,CAAC8C,IAAI,CAAC,4DAA4D,CAAC,CAC1E,MAAO,KAAI,CAAC1C,2BAA2B,CAACwC,QAAQ,CAAC,CACnD,CAAC,CAED;AACAG,sBAAsBA,CAACC,aAAa,CAAE,CACpC,GAAI,CAACA,aAAa,CAACpB,IAAI,EAAI,CAACoB,aAAa,CAACnB,mBAAmB,CAAE,CAC7D7B,OAAO,CAACO,KAAK,CAAC,qCAAqC,CAAEyC,aAAa,CAAC,CACnE,MAAO,EAAE,CACX,CAEA,KAAM,CAAAV,MAAM,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CACzC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAExDtC,OAAO,CAACC,GAAG,eAAAgB,MAAA,CAAe+B,aAAa,CAACpB,IAAI,CAACjC,MAAM,4BAA0B,CAAC,CAE9E;AACA,KAAM,CAAAsD,aAAa,CAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACZ,GAAG,CAAC,IAAM,EAAE,CAAC,CAExDS,aAAa,CAACpB,IAAI,CAACwB,OAAO,CAAC,CAACC,IAAI,CAAEZ,KAAK,GAAK,CAC1C,KAAM,CAAAa,IAAI,CAAGN,aAAa,CAACnB,mBAAmB,CAACY,KAAK,CAAC,CACrD,GAAIa,IAAI,GAAK,IAAI,EAAI,CAACC,KAAK,CAACD,IAAI,CAAC,CAAE,CACjC,KAAM,CAAAd,KAAK,CAAG,GAAI,CAAA7B,IAAI,CAAC0C,IAAI,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAE;AACzCP,aAAa,CAACT,KAAK,CAAC,CAACiB,IAAI,CAACC,UAAU,CAACJ,IAAI,CAAC,CAAC,CAC7C,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAApD,WAAW,CAAGoC,MAAM,CAACC,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,GAAK,CAC/C,KAAM,CAAAkB,KAAK,CAAGV,aAAa,CAACR,KAAK,CAAC,CAClC,KAAM,CAAAmB,OAAO,CAAGD,KAAK,CAAChE,MAAM,CAAG,CAAC,CAC5BgE,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,CAAER,IAAI,GAAKQ,GAAG,CAAGR,IAAI,CAAE,CAAC,CAAC,CAAGK,KAAK,CAAChE,MAAM,CACzD,CAAC,CAEL,MAAO,CACL6C,KAAK,CACLE,KAAK,CAAEqB,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAG,GAAG,CAAC,CAAG,GACrC,CAAC,CACH,CAAC,CAAC,CAEF5D,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEC,WAAW,CAAC,CACvD,MAAO,CAAAA,WAAW,CACpB,CAAC,CAED;AACA,KAAM,CAAA+D,sBAAsBA,CAAC1E,QAAQ,CAAEC,SAAS,CAAiB,IAAf,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC7D,GAAI,CACFM,OAAO,CAACC,GAAG,2CAAAgB,MAAA,CAA2C1B,QAAQ,OAAA0B,MAAA,CAAKzB,SAAS,CAAE,CAAC,CAE/E;AACA,KAAM,CAAA0E,WAAW,CAAG,KAAM,KAAI,CAAC5E,qBAAqB,CAACC,QAAQ,CAAEC,SAAS,CAAEC,QAAQ,CAAC,CAEnF;AACA,KAAM,CAAA0E,UAAU,CAAG,KAAM,KAAI,CAAC3D,kBAAkB,CAACjB,QAAQ,CAAEC,SAAS,CAAC,CAErEQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEiE,WAAW,CAAC,CACrDlE,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEkE,UAAU,CAAC,CAElD,GAAI,CAACD,WAAW,CAACnE,OAAO,CAAE,CACxB,KAAM,IAAI,CAAAqE,KAAK,gBAAAnD,MAAA,CAAgBiD,WAAW,CAAC3D,KAAK,CAAE,CAAC,CACrD,CAEA,GAAI,CAAC4D,UAAU,CAACpE,OAAO,CAAE,CACvB,KAAM,IAAI,CAAAqE,KAAK,sBAAAnD,MAAA,CAAsBkD,UAAU,CAAC5D,KAAK,CAAE,CAAC,CAC1D,CAEA;AACA,KAAM,CAAA8D,SAAS,CAAGH,WAAW,CAACpE,IAAI,CAClC,KAAM,CAAAwE,eAAe,CAAG,IAAI,CAACvB,sBAAsB,CAACoB,UAAU,CAACrE,IAAI,CAAC,CAEpE;AACA,GAAIuE,SAAS,CAAC1E,MAAM,GAAK,CAAC,CAAE,CAC1B,KAAM,IAAI,CAAAyE,KAAK,CAAC,gDAAgD,CAAC,CACnE,CAEA,GAAIE,eAAe,CAAC3E,MAAM,GAAK,CAAC,CAAE,CAChC,KAAM,IAAI,CAAAyE,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CAEApE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEoE,SAAS,CAAC,CACrDrE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAEqE,eAAe,CAAC,CAEjE,MAAO,CACLvE,OAAO,CAAE,IAAI,CACbD,IAAI,CAAE,CACJyE,KAAK,CAAEF,SAAS,CAChBG,WAAW,CAAEF,eACf,CAAC,CACDjE,MAAM,CAAE6D,WAAW,CAAC7D,MAAM,CAC1BC,OAAO,CAAE4D,WAAW,CAAC5D,OACvB,CAAC,CAEH,CAAE,MAAOC,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAEA,KAAK,CAACD,OACf,CAAC,CACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}