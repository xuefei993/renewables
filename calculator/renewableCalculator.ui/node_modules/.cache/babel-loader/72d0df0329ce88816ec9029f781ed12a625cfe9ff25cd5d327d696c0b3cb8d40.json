{"ast":null,"code":"import _objectSpread from\"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useRef}from'react';import{Wrapper}from'@googlemaps/react-wrapper';import GoogleMapsPolygonDrawer from'./roof-condition/GoogleMapsPolygonDrawer';import RoofConfigurationForm from'./roof-condition/RoofConfigurationForm';import RoofSelectionList from'./roof-condition/RoofSelectionList';import{calculateActualRoofArea}from'./roof-condition/roofAreaUtils';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RoofCondition=_ref=>{let{data,onDataChange,onNext,onBack,userLocation}=_ref;const[projectedRoofArea,setProjectedRoofArea]=useState(data.projectedRoofArea||0);const[roofConfig,setRoofConfig]=useState({roofOrientation:data.roofOrientation||'',roofAngle:data.roofAngle||'',roofShading:data.roofShading||'',roofUtilisation:data.roofUtilisation||''});const[addedRoofs,setAddedRoofs]=useState(data.addedRoofs||[]);const[showMeasurementGuide,setShowMeasurementGuide]=useState(false);const[isSelectionMode,setIsSelectionMode]=useState(data.isSelectionMode||false);// Ref to control Google Maps polygon clearing\nconst googleMapsRef=useRef(null);// Calculate actual roof area based on angle\nconst actualRoofArea=calculateActualRoofArea(projectedRoofArea,roofConfig.roofAngle);// Handle area changes from map\nconst handleAreaChange=area=>{setProjectedRoofArea(area);const actualArea=calculateActualRoofArea(area,roofConfig.roofAngle);// Validate that actualArea is a number before calling toFixed\nif(typeof actualArea==='number'&&!isNaN(actualArea)){onDataChange({projectedRoofArea:area,roofArea:actualArea});}else{onDataChange({projectedRoofArea:area,roofArea:area});}};const render=status=>{return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});};// Handle configuration changes\nconst handleConfigChange=(field,value)=>{const newConfig=_objectSpread(_objectSpread({},roofConfig),{},{[field]:value});setRoofConfig(newConfig);if(field==='roofAngle'){const actualArea=calculateActualRoofArea(projectedRoofArea,value);// Validate that actualArea is a number before calling toFixed\nif(typeof actualArea==='number'&&!isNaN(actualArea)){onDataChange(_objectSpread(_objectSpread({},newConfig),{},{roofArea:actualArea}));}else{onDataChange(_objectSpread(_objectSpread({},newConfig),{},{roofArea:projectedRoofArea}));}}else{onDataChange({[field]:value});}};const handleRoofsUpdate=newAddedRoofs=>{setAddedRoofs(newAddedRoofs);onDataChange({addedRoofs:newAddedRoofs,isSelectionMode});};const handleClearCurrentMeasurement=()=>{setProjectedRoofArea(0);setRoofConfig({roofOrientation:'',roofAngle:'',roofShading:'',roofUtilisation:''});onDataChange({roofArea:0,projectedRoofArea:0,roofOrientation:'',roofAngle:'',roofShading:'',roofUtilisation:''});};// New function to handle \"Add Another Roof\" functionality\nconst handleAddAnotherRoof=()=>{// Clear the polygon from the map\nif(googleMapsRef.current){googleMapsRef.current.clearPolygon();}// Clear current measurement and config\nhandleClearCurrentMeasurement();};// Handle \"Add more roofs\" button click\nconst handleAddMoreRoofs=()=>{handleAddAnotherRoof();};// Handle \"Finish Measurement\" button click\nconst handleFinishMeasurement=()=>{setIsSelectionMode(true);onDataChange({isSelectionMode:true,addedRoofs});};// Validation function\nconst isFormValid=()=>{if(isSelectionMode){// In selection mode, at least one roof must be selected\nreturn addedRoofs.some(roof=>roof.selected);}else{// In measurement mode, at least one roof must be added\nreturn addedRoofs.length>0;}};const apiKey=\"AIzaSyCpAABUQR_MiKb4yDovC3-1jM0LdIs59Hc\";return/*#__PURE__*/_jsxs(\"div\",{className:\"step-container roof-condition-step\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"step-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"title-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Roof Condition\"}),/*#__PURE__*/_jsx(\"p\",{className:\"step-description\",children:isSelectionMode?\"Select which roofs you want to install solar panels on.\":\"Use Google Maps to measure your roof area and assess its solar potential.\"})]}),!isSelectionMode&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-guide\",onClick:()=>setShowMeasurementGuide(true),children:\"Measurement Guide\"})]})}),showMeasurementGuide&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",onClick:()=>setShowMeasurementGuide(false),children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"modal-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Instructions for Accurate Roof Measurement\"}),/*#__PURE__*/_jsx(\"button\",{className:\"modal-close\",onClick:()=>setShowMeasurementGuide(false),\"aria-label\":\"Close guide\",children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"modal-body\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"measurement-instructions-list\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Search your postcode or find your property on the satellite map\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Use the compass on the right to help identify directions\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Zoom in as much as possible for precise measurements\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Click on the corners of your roof to draw the outline\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Close the shape by clicking on the first point\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Select your roof orientation using the dropdown below\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Adjust roof angle and shading details\"})]})})]})}),isSelectionMode?/*#__PURE__*/// Selection Mode: Show roof selection interface\n_jsx(RoofSelectionList,{addedRoofs:addedRoofs,onRoofsUpdate:handleRoofsUpdate}):/*#__PURE__*/// Measurement Mode: Show measurement interface\n_jsxs(\"div\",{className:\"roof-measurement-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(Wrapper,{apiKey:apiKey,render:render,libraries:['drawing','geometry'],children:/*#__PURE__*/_jsx(GoogleMapsPolygonDrawer,{ref:googleMapsRef,onAreaChange:handleAreaChange,userLocation:userLocation,apiKey:apiKey})})}),/*#__PURE__*/_jsx(RoofConfigurationForm,{roofConfig:roofConfig,onConfigChange:handleConfigChange,projectedArea:projectedRoofArea,actualRoofArea:actualRoofArea,visible:projectedRoofArea>0||addedRoofs.length>0,addedRoofs:addedRoofs,onRoofsUpdate:handleRoofsUpdate,onClearMeasurement:handleClearCurrentMeasurement,onAddAnotherRoof:handleAddAnotherRoof})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-secondary\",onClick:isSelectionMode?()=>setIsSelectionMode(false):onBack,children:isSelectionMode?'Back to Measurement':'Back'}),!isSelectionMode&&addedRoofs.length>0&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-outline\",onClick:handleAddMoreRoofs,children:\"Add More Roofs\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary \".concat(!isFormValid()?'disabled':''),onClick:isSelectionMode?onNext:handleFinishMeasurement,disabled:!isFormValid(),children:isSelectionMode?'Next: Insulation Performance':'Finish Measurement'})]})]});};export default RoofCondition;","map":{"version":3,"names":["React","useState","useRef","Wrapper","GoogleMapsPolygonDrawer","RoofConfigurationForm","RoofSelectionList","calculateActualRoofArea","jsx","_jsx","jsxs","_jsxs","RoofCondition","_ref","data","onDataChange","onNext","onBack","userLocation","projectedRoofArea","setProjectedRoofArea","roofConfig","setRoofConfig","roofOrientation","roofAngle","roofShading","roofUtilisation","addedRoofs","setAddedRoofs","showMeasurementGuide","setShowMeasurementGuide","isSelectionMode","setIsSelectionMode","googleMapsRef","actualRoofArea","handleAreaChange","area","actualArea","isNaN","roofArea","render","status","children","handleConfigChange","field","value","newConfig","_objectSpread","handleRoofsUpdate","newAddedRoofs","handleClearCurrentMeasurement","handleAddAnotherRoof","current","clearPolygon","handleAddMoreRoofs","handleFinishMeasurement","isFormValid","some","roof","selected","length","apiKey","className","type","onClick","e","stopPropagation","onRoofsUpdate","libraries","ref","onAreaChange","onConfigChange","projectedArea","visible","onClearMeasurement","onAddAnotherRoof","concat","disabled"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/RoofCondition.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Wrapper } from '@googlemaps/react-wrapper';\nimport GoogleMapsPolygonDrawer from './roof-condition/GoogleMapsPolygonDrawer';\nimport RoofConfigurationForm from './roof-condition/RoofConfigurationForm';\nimport RoofSelectionList from './roof-condition/RoofSelectionList';\nimport { calculateActualRoofArea } from './roof-condition/roofAreaUtils';\n\nconst RoofCondition = ({ data, onDataChange, onNext, onBack, userLocation }) => {\n  const [projectedRoofArea, setProjectedRoofArea] = useState(data.projectedRoofArea || 0);\n  const [roofConfig, setRoofConfig] = useState({\n    roofOrientation: data.roofOrientation || '',\n    roofAngle: data.roofAngle || '',\n    roofShading: data.roofShading || '',\n    roofUtilisation: data.roofUtilisation || ''\n  });\n  const [addedRoofs, setAddedRoofs] = useState(data.addedRoofs || []);\n  const [showMeasurementGuide, setShowMeasurementGuide] = useState(false);\n  const [isSelectionMode, setIsSelectionMode] = useState(data.isSelectionMode || false);\n  \n  // Ref to control Google Maps polygon clearing\n  const googleMapsRef = useRef(null);\n\n  // Calculate actual roof area based on angle\n  const actualRoofArea = calculateActualRoofArea(projectedRoofArea, roofConfig.roofAngle);\n\n  // Handle area changes from map\n  const handleAreaChange = (area) => {\n    setProjectedRoofArea(area);\n    const actualArea = calculateActualRoofArea(area, roofConfig.roofAngle);\n    \n    // Validate that actualArea is a number before calling toFixed\n    if (typeof actualArea === 'number' && !isNaN(actualArea)) {\n      onDataChange({ \n        projectedRoofArea: area,\n        roofArea: actualArea\n      });\n    } else {\n      onDataChange({ \n        projectedRoofArea: area,\n        roofArea: area\n      });\n    }\n  };\n\n  const render = (status) => {\n    return <div>Loading...</div>;\n  };\n\n  // Handle configuration changes\n  const handleConfigChange = (field, value) => {\n    const newConfig = { ...roofConfig, [field]: value };\n    setRoofConfig(newConfig);\n    \n    if (field === 'roofAngle') {\n      const actualArea = calculateActualRoofArea(projectedRoofArea, value);\n      // Validate that actualArea is a number before calling toFixed\n      if (typeof actualArea === 'number' && !isNaN(actualArea)) {\n        onDataChange({ \n          ...newConfig,\n          roofArea: actualArea\n        });\n      } else {\n        onDataChange({ \n          ...newConfig,\n          roofArea: projectedRoofArea\n        });\n      }\n    } else {\n      onDataChange({ [field]: value });\n    }\n  };\n\n  const handleRoofsUpdate = (newAddedRoofs) => {\n    setAddedRoofs(newAddedRoofs);\n    onDataChange({ addedRoofs: newAddedRoofs, isSelectionMode });\n  };\n\n  const handleClearCurrentMeasurement = () => {\n    setProjectedRoofArea(0);\n    setRoofConfig({\n      roofOrientation: '',\n      roofAngle: '',\n      roofShading: '',\n      roofUtilisation: ''\n    });\n    onDataChange({\n      roofArea: 0,\n      projectedRoofArea: 0,\n      roofOrientation: '',\n      roofAngle: '',\n      roofShading: '',\n      roofUtilisation: ''\n    });\n  };\n\n  // New function to handle \"Add Another Roof\" functionality\n  const handleAddAnotherRoof = () => {\n    // Clear the polygon from the map\n    if (googleMapsRef.current) {\n      googleMapsRef.current.clearPolygon();\n    }\n    \n    // Clear current measurement and config\n    handleClearCurrentMeasurement();\n  };\n\n  // Handle \"Add more roofs\" button click\n  const handleAddMoreRoofs = () => {\n    handleAddAnotherRoof();\n  };\n\n  // Handle \"Finish Measurement\" button click\n  const handleFinishMeasurement = () => {\n    setIsSelectionMode(true);\n    onDataChange({ isSelectionMode: true, addedRoofs });\n  };\n\n  // Validation function\n  const isFormValid = () => {\n    if (isSelectionMode) {\n      // In selection mode, at least one roof must be selected\n      return addedRoofs.some(roof => roof.selected);\n    } else {\n      // In measurement mode, at least one roof must be added\n      return addedRoofs.length > 0;\n    }\n  };\n\n  const apiKey = \"AIzaSyCpAABUQR_MiKb4yDovC3-1jM0LdIs59Hc\";\n\n  return (\n    <div className=\"step-container roof-condition-step\">\n      <div className=\"step-header\">\n        <div className=\"header-content\">\n          <div className=\"title-section\">\n            <h2>Roof Condition</h2>\n            <p className=\"step-description\">\n              {isSelectionMode \n                ? \"Select which roofs you want to install solar panels on.\"\n                : \"Use Google Maps to measure your roof area and assess its solar potential.\"\n              }\n            </p>\n          </div>\n          {!isSelectionMode && (\n            <button \n              type=\"button\" \n              className=\"btn btn-guide\"\n              onClick={() => setShowMeasurementGuide(true)}\n            >\n              Measurement Guide\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Measurement Guide Modal */}\n      {showMeasurementGuide && (\n        <div className=\"modal-overlay\" onClick={() => setShowMeasurementGuide(false)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h3>Instructions for Accurate Roof Measurement</h3>\n              <button \n                className=\"modal-close\" \n                onClick={() => setShowMeasurementGuide(false)}\n                aria-label=\"Close guide\"\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <ol className=\"measurement-instructions-list\">\n                <li>Search your postcode or find your property on the satellite map</li>\n                <li>Use the compass on the right to help identify directions</li>\n                <li>Zoom in as much as possible for precise measurements</li>\n                <li>Click on the corners of your roof to draw the outline</li>\n                <li>Close the shape by clicking on the first point</li>\n                <li>Select your roof orientation using the dropdown below</li>\n                <li>Adjust roof angle and shading details</li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isSelectionMode ? (\n        // Selection Mode: Show roof selection interface\n        <RoofSelectionList \n          addedRoofs={addedRoofs}\n          onRoofsUpdate={handleRoofsUpdate}\n        />\n      ) : (\n        // Measurement Mode: Show measurement interface\n        <div className=\"roof-measurement-container\">\n          <div className=\"form-group\">\n            <Wrapper apiKey={apiKey} render={render} libraries={['drawing', 'geometry']}>\n              <GoogleMapsPolygonDrawer\n                ref={googleMapsRef}\n                onAreaChange={handleAreaChange}\n                userLocation={userLocation}\n                apiKey={apiKey}\n              />\n            </Wrapper>\n          </div>\n\n          <RoofConfigurationForm\n            roofConfig={roofConfig}\n            onConfigChange={handleConfigChange}\n            projectedArea={projectedRoofArea}\n            actualRoofArea={actualRoofArea}\n            visible={projectedRoofArea > 0 || addedRoofs.length > 0}\n            addedRoofs={addedRoofs}\n            onRoofsUpdate={handleRoofsUpdate}\n            onClearMeasurement={handleClearCurrentMeasurement}\n            onAddAnotherRoof={handleAddAnotherRoof}\n          />\n        </div>\n      )}\n\n      <div className=\"button-group\">\n        <button \n          type=\"button\" \n          className=\"btn btn-secondary\"\n          onClick={isSelectionMode ? () => setIsSelectionMode(false) : onBack}\n        >\n          {isSelectionMode ? 'Back to Measurement' : 'Back'}\n        </button>\n        \n        {!isSelectionMode && addedRoofs.length > 0 && (\n          <button \n            type=\"button\" \n            className=\"btn btn-outline\"\n            onClick={handleAddMoreRoofs}\n          >\n            Add More Roofs\n          </button>\n        )}\n        \n        <button \n          type=\"button\" \n          className={`btn btn-primary ${!isFormValid() ? 'disabled' : ''}`}\n          onClick={isSelectionMode ? onNext : handleFinishMeasurement}\n          disabled={!isFormValid()}\n        >\n          {isSelectionMode ? 'Next: Insulation Performance' : 'Finish Measurement'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RoofCondition; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}