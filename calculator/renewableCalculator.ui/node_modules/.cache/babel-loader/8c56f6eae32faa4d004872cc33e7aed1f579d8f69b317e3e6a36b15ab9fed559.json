{"ast":null,"code":"// Utility functions for Results component\n// Function to get solar potential rating based on percentage\nexport const getSolarPotentialRating=percentage=>{if(percentage>95){return{rating:'Excellent',className:'excellent',recommended:true};}else if(percentage>=90){return{rating:'Very Good',className:'very-good',recommended:true};}else if(percentage>=80){return{rating:'Good',className:'good',recommended:true};}else if(percentage>=60){return{rating:'Medium',className:'medium',recommended:true};}else{return{rating:'Poor',className:'poor',recommended:false};}};export const getOrientationLabel=orientation=>{const orientationLabels={'N':'North','NE':'Northeast','E':'East','SE':'Southeast','S':'South','SW':'Southwest','W':'West','NW':'Northwest'};return orientationLabels[orientation]||orientation;};export const getShadingLabel=shading=>{const shadingLabels={'no-shading':'No Shading','light-shading':'Light Shading','moderate-shading':'Moderate Shading','heavy-shading':'Heavy Shading'};return shadingLabels[shading]||shading;};export const getUtilisationLabel=utilisation=>{const utilisationLabels={'minimal-obstacles':'Minimal Obstacles','some-obstacles':'Some Obstacles','many-obstacles':'Many Obstacles'};return utilisationLabels[utilisation]||utilisation;};// Function to convert frontend heating method to backend heating type\nexport const convertHeatingMethod=heatingMethod=>{switch(heatingMethod){case\"gas boiler\":return\"gas\";case\"electricity heating\":return\"electric\";case\"heat pumps\":return\"heat-pump\";default:return\"gas\";// default fallback\n}};// Function to convert frontend hot water method to backend hot water type\nexport const convertHotWaterMethod=hotWaterMethod=>{switch(hotWaterMethod){case\"gas boiler\":return\"gas-boiler\";case\"electricity\":return\"electricity\";case\"heat pumps\":return\"heat-pump\";default:return\"gas-boiler\";// default fallback\n}};// Function to prepare user data for Energy Demand component\nexport const prepareUserData=data=>{var _data$coordinates,_data$coordinates2;return{// Basic household information\noccupants:data.householdSize||data.occupants||3,hotWaterType:convertHotWaterMethod(data.hotWaterMethod),heatingType:convertHeatingMethod(data.heatingMethod),houseArea:data.floorArea||data.houseArea||100,buildYear:data.buildingYear||data.buildYear||'1981-2002',wallType:data.wallType||'modern',windowType:data.windowType||'double',houseType:data.propertyType||data.houseType||'semi-detached',epcRating:data.epcRating||'D',roofInsulation:data.roofInsulation||'no',floorInsulation:data.floorInsulation||'no',latitude:data.latitude||((_data$coordinates=data.coordinates)===null||_data$coordinates===void 0?void 0:_data$coordinates.latitude)||null,longitude:data.longitude||((_data$coordinates2=data.coordinates)===null||_data$coordinates2===void 0?void 0:_data$coordinates2.longitude)||null,// User electricity usage data\nknowsMonthlyUsage:data.knowsMonthlyUsage,monthlyElectricityUsage:data.monthlyElectricityUsage,knowsAnnualUsage:data.knowsAnnualUsage,annualElectricityUsage:data.annualElectricityUsage,// User gas usage data\nknowsMonthlyGasUsage:data.knowsMonthlyGasUsage,monthlyGasUsage:data.monthlyGasUsage,knowsAnnualGasUsage:data.knowsAnnualGasUsage,annualGasUsage:data.annualGasUsage,// Equipment efficiency data\nheatPumpCOP:data.heatPumpCOP,hotWaterHeatPumpCOP:data.hotWaterHeatPumpCOP,boilerEfficiency:data.boilerEfficiency,// Other energy-related data\ndaytimeHomeHabits:data.daytimeHomeHabits};};// Function to calculate solar potential totals\nexport const calculateSolarTotals=selectedRoofs=>{const totalSelectedArea=selectedRoofs.reduce((sum,roof)=>sum+(roof.area||0),0);const totalSolarPanels=selectedRoofs.reduce((sum,roof)=>sum+(roof.solarPanelCount||0),0);const averageSolarPotential=selectedRoofs.length>0?selectedRoofs.reduce((sum,roof)=>sum+(roof.solarPotential||0),0)/selectedRoofs.length:0;return{totalSelectedArea,totalSolarPanels,averageSolarPotential};};","map":{"version":3,"names":["getSolarPotentialRating","percentage","rating","className","recommended","getOrientationLabel","orientation","orientationLabels","getShadingLabel","shading","shadingLabels","getUtilisationLabel","utilisation","utilisationLabels","convertHeatingMethod","heatingMethod","convertHotWaterMethod","hotWaterMethod","prepareUserData","data","_data$coordinates","_data$coordinates2","occupants","householdSize","hotWaterType","heatingType","houseArea","floorArea","buildYear","buildingYear","wallType","windowType","houseType","propertyType","epcRating","roofInsulation","floorInsulation","latitude","coordinates","longitude","knowsMonthlyUsage","monthlyElectricityUsage","knowsAnnualUsage","annualElectricityUsage","knowsMonthlyGasUsage","monthlyGasUsage","knowsAnnualGasUsage","annualGasUsage","heatPumpCOP","hotWaterHeatPumpCOP","boilerEfficiency","daytimeHomeHabits","calculateSolarTotals","selectedRoofs","totalSelectedArea","reduce","sum","roof","area","totalSolarPanels","solarPanelCount","averageSolarPotential","length","solarPotential"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/resultsUtils.js"],"sourcesContent":["// Utility functions for Results component\n\n// Function to get solar potential rating based on percentage\nexport const getSolarPotentialRating = (percentage) => {\n  if (percentage > 95) {\n    return { rating: 'Excellent', className: 'excellent', recommended: true };\n  } else if (percentage >= 90) {\n    return { rating: 'Very Good', className: 'very-good', recommended: true };\n  } else if (percentage >= 80) {\n    return { rating: 'Good', className: 'good', recommended: true };\n  } else if (percentage >= 60) {\n    return { rating: 'Medium', className: 'medium', recommended: true };\n  } else {\n    return { rating: 'Poor', className: 'poor', recommended: false };\n  }\n};\n\nexport const getOrientationLabel = (orientation) => {\n  const orientationLabels = {\n    'N': 'North',\n    'NE': 'Northeast', \n    'E': 'East',\n    'SE': 'Southeast',\n    'S': 'South',\n    'SW': 'Southwest',\n    'W': 'West',\n    'NW': 'Northwest'\n  };\n  return orientationLabels[orientation] || orientation;\n};\n\nexport const getShadingLabel = (shading) => {\n  const shadingLabels = {\n    'no-shading': 'No Shading',\n    'light-shading': 'Light Shading',\n    'moderate-shading': 'Moderate Shading', \n    'heavy-shading': 'Heavy Shading'\n  };\n  return shadingLabels[shading] || shading;\n};\n\nexport const getUtilisationLabel = (utilisation) => {\n  const utilisationLabels = {\n    'minimal-obstacles': 'Minimal Obstacles',\n    'some-obstacles': 'Some Obstacles',\n    'many-obstacles': 'Many Obstacles'\n  };\n  return utilisationLabels[utilisation] || utilisation;\n};\n\n// Function to convert frontend heating method to backend heating type\nexport const convertHeatingMethod = (heatingMethod) => {\n  switch (heatingMethod) {\n    case \"gas boiler\":\n      return \"gas\";\n    case \"electricity heating\":\n      return \"electric\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas\"; // default fallback\n  }\n};\n\n// Function to convert frontend hot water method to backend hot water type\nexport const convertHotWaterMethod = (hotWaterMethod) => {\n  switch (hotWaterMethod) {\n    case \"gas boiler\":\n      return \"gas-boiler\";\n    case \"electricity\":\n      return \"electricity\";\n    case \"heat pumps\":\n      return \"heat-pump\";\n    default:\n      return \"gas-boiler\"; // default fallback\n  }\n};\n\n// Function to prepare user data for Energy Demand component\nexport const prepareUserData = (data) => {\n  return {\n    // Basic household information\n    occupants: data.householdSize || data.occupants || 3,\n    hotWaterType: convertHotWaterMethod(data.hotWaterMethod),\n    heatingType: convertHeatingMethod(data.heatingMethod),\n    houseArea: data.floorArea || data.houseArea || 100,\n    buildYear: data.buildingYear || data.buildYear || '1981-2002',\n    wallType: data.wallType || 'modern',\n    windowType: data.windowType || 'double',\n    houseType: data.propertyType || data.houseType || 'semi-detached',\n    epcRating: data.epcRating || 'D',\n    roofInsulation: data.roofInsulation || 'no',\n    floorInsulation: data.floorInsulation || 'no',\n    latitude: data.latitude || data.coordinates?.latitude || null,\n    longitude: data.longitude || data.coordinates?.longitude || null,\n    \n    // User electricity usage data\n    knowsMonthlyUsage: data.knowsMonthlyUsage,\n    monthlyElectricityUsage: data.monthlyElectricityUsage,\n    knowsAnnualUsage: data.knowsAnnualUsage,\n    annualElectricityUsage: data.annualElectricityUsage,\n    \n    // User gas usage data\n    knowsMonthlyGasUsage: data.knowsMonthlyGasUsage,\n    monthlyGasUsage: data.monthlyGasUsage,\n    knowsAnnualGasUsage: data.knowsAnnualGasUsage,\n    annualGasUsage: data.annualGasUsage,\n    \n    // Equipment efficiency data\n    heatPumpCOP: data.heatPumpCOP,\n    hotWaterHeatPumpCOP: data.hotWaterHeatPumpCOP,\n    boilerEfficiency: data.boilerEfficiency,\n    \n    // Other energy-related data\n    daytimeHomeHabits: data.daytimeHomeHabits\n  };\n};\n\n// Function to calculate solar potential totals\nexport const calculateSolarTotals = (selectedRoofs) => {\n  const totalSelectedArea = selectedRoofs.reduce((sum, roof) => sum + (roof.area || 0), 0);\n  const totalSolarPanels = selectedRoofs.reduce((sum, roof) => sum + (roof.solarPanelCount || 0), 0);\n  const averageSolarPotential = selectedRoofs.length > 0 \n    ? selectedRoofs.reduce((sum, roof) => sum + (roof.solarPotential || 0), 0) / selectedRoofs.length\n    : 0;\n\n  return {\n    totalSelectedArea,\n    totalSolarPanels,\n    averageSolarPotential\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}