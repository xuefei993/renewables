{"ast":null,"code":"// Tariff Constants and Helper Functions\n\nexport const majorSuppliers = ['British Gas', 'E.ON', 'EDF Energy', 'Npower', 'ScottishPower', 'SSE', 'Bulb', 'Octopus Energy', 'Avro Energy', 'Together Energy', 'Green Supplier Limited', 'Pure Planet', 'Shell Energy', 'So Energy', 'Utility Warehouse', 'Other'];\nexport const getCurrentElectricityInfo = electricityRate => {\n  if (!electricityRate) return \"Please enter your current electricity rate\";\n  const rate = parseFloat(electricityRate);\n  if (rate < 15) return \"This rate seems low - please check it's in pence per kWh\";\n  if (rate > 50) return \"This rate seems high - renewable energy could provide significant savings\";\n  if (rate >= 15 && rate <= 25) return \"Standard rate - renewable energy will provide good savings\";\n  if (rate > 25 && rate <= 35) return \"Above average rate - excellent potential for renewable energy savings\";\n  return \"High rate - renewable energy systems will be very beneficial\";\n};\n\n// Check if tariff type requires additional rate inputs\nexport const requiresTimeOfUseRates = electricityTariffType => {\n  return electricityTariffType === 'time-of-use';\n};\nexport const requiresEconomy7Rates = electricityTariffType => {\n  return electricityTariffType === 'economy7';\n};\nexport const requiresEconomy10Rates = electricityTariffType => {\n  return electricityTariffType === 'economy10';\n};\nexport const calculateTotalUsagePercentage = formData => {\n  const peak = parseFloat(formData.peakUsagePercentage) || 0;\n  const offPeak = parseFloat(formData.offPeakUsagePercentage) || 0;\n  const standard = parseFloat(formData.standardUsagePercentage) || 0;\n  return peak + offPeak + standard;\n};","map":{"version":3,"names":["majorSuppliers","getCurrentElectricityInfo","electricityRate","rate","parseFloat","requiresTimeOfUseRates","electricityTariffType","requiresEconomy7Rates","requiresEconomy10Rates","calculateTotalUsagePercentage","formData","peak","peakUsagePercentage","offPeak","offPeakUsagePercentage","standard","standardUsagePercentage"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/steps/tariffs/tariffConstants.js"],"sourcesContent":["// Tariff Constants and Helper Functions\n\nexport const majorSuppliers = [\n  'British Gas', 'E.ON', 'EDF Energy', 'Npower', 'ScottishPower', 'SSE',\n  'Bulb', 'Octopus Energy', 'Avro Energy', 'Together Energy', 'Green Supplier Limited',\n  'Pure Planet', 'Shell Energy', 'So Energy', 'Utility Warehouse', 'Other'\n];\n\nexport const getCurrentElectricityInfo = (electricityRate) => {\n  if (!electricityRate) return \"Please enter your current electricity rate\";\n  \n  const rate = parseFloat(electricityRate);\n  if (rate < 15) return \"This rate seems low - please check it's in pence per kWh\";\n  if (rate > 50) return \"This rate seems high - renewable energy could provide significant savings\";\n  if (rate >= 15 && rate <= 25) return \"Standard rate - renewable energy will provide good savings\";\n  if (rate > 25 && rate <= 35) return \"Above average rate - excellent potential for renewable energy savings\";\n  return \"High rate - renewable energy systems will be very beneficial\";\n};\n\n// Check if tariff type requires additional rate inputs\nexport const requiresTimeOfUseRates = (electricityTariffType) => {\n  return electricityTariffType === 'time-of-use';\n};\n\nexport const requiresEconomy7Rates = (electricityTariffType) => {\n  return electricityTariffType === 'economy7';\n};\n\nexport const requiresEconomy10Rates = (electricityTariffType) => {\n  return electricityTariffType === 'economy10';\n};\n\nexport const calculateTotalUsagePercentage = (formData) => {\n  const peak = parseFloat(formData.peakUsagePercentage) || 0;\n  const offPeak = parseFloat(formData.offPeakUsagePercentage) || 0;\n  const standard = parseFloat(formData.standardUsagePercentage) || 0;\n  return peak + offPeak + standard;\n}; "],"mappings":"AAAA;;AAEA,OAAO,MAAMA,cAAc,GAAG,CAC5B,aAAa,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EACrE,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE,iBAAiB,EAAE,wBAAwB,EACpF,aAAa,EAAE,cAAc,EAAE,WAAW,EAAE,mBAAmB,EAAE,OAAO,CACzE;AAED,OAAO,MAAMC,yBAAyB,GAAIC,eAAe,IAAK;EAC5D,IAAI,CAACA,eAAe,EAAE,OAAO,4CAA4C;EAEzE,MAAMC,IAAI,GAAGC,UAAU,CAACF,eAAe,CAAC;EACxC,IAAIC,IAAI,GAAG,EAAE,EAAE,OAAO,0DAA0D;EAChF,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAO,2EAA2E;EACjG,IAAIA,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,EAAE,EAAE,OAAO,4DAA4D;EACjG,IAAIA,IAAI,GAAG,EAAE,IAAIA,IAAI,IAAI,EAAE,EAAE,OAAO,uEAAuE;EAC3G,OAAO,8DAA8D;AACvE,CAAC;;AAED;AACA,OAAO,MAAME,sBAAsB,GAAIC,qBAAqB,IAAK;EAC/D,OAAOA,qBAAqB,KAAK,aAAa;AAChD,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAID,qBAAqB,IAAK;EAC9D,OAAOA,qBAAqB,KAAK,UAAU;AAC7C,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAIF,qBAAqB,IAAK;EAC/D,OAAOA,qBAAqB,KAAK,WAAW;AAC9C,CAAC;AAED,OAAO,MAAMG,6BAA6B,GAAIC,QAAQ,IAAK;EACzD,MAAMC,IAAI,GAAGP,UAAU,CAACM,QAAQ,CAACE,mBAAmB,CAAC,IAAI,CAAC;EAC1D,MAAMC,OAAO,GAAGT,UAAU,CAACM,QAAQ,CAACI,sBAAsB,CAAC,IAAI,CAAC;EAChE,MAAMC,QAAQ,GAAGX,UAAU,CAACM,QAAQ,CAACM,uBAAuB,CAAC,IAAI,CAAC;EAClE,OAAOL,IAAI,GAAGE,OAAO,GAAGE,QAAQ;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}