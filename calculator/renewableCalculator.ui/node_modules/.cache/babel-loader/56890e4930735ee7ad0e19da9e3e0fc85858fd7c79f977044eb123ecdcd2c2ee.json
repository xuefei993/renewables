{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/GoogleMapsPolygonDrawer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport PostcodeLocationInput from './PostcodeLocationInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Compass = () => {\n  const directions = [{\n    label: 'N',\n    angle: 0,\n    fullName: 'North'\n  }, {\n    label: 'NNE',\n    angle: 30,\n    fullName: 'North-Northeast'\n  }, {\n    label: 'NE',\n    angle: 60,\n    fullName: 'Northeast'\n  }, {\n    label: 'ENE',\n    angle: 90,\n    fullName: 'East-Northeast'\n  }, {\n    label: 'E',\n    angle: 120,\n    fullName: 'East'\n  }, {\n    label: 'ESE',\n    angle: 150,\n    fullName: 'East-Southeast'\n  }, {\n    label: 'SE',\n    angle: 180,\n    fullName: 'Southeast'\n  }, {\n    label: 'SSE',\n    angle: 210,\n    fullName: 'South-Southeast'\n  }, {\n    label: 'S',\n    angle: 240,\n    fullName: 'South'\n  }, {\n    label: 'SSW',\n    angle: 270,\n    fullName: 'South-Southwest'\n  }, {\n    label: 'SW',\n    angle: 300,\n    fullName: 'Southwest'\n  }, {\n    label: 'WSW',\n    angle: 330,\n    fullName: 'West-Southwest'\n  }, {\n    label: 'W',\n    angle: 360,\n    fullName: 'West'\n  }, {\n    label: 'WNW',\n    angle: 30,\n    fullName: 'West-Northwest'\n  }, {\n    label: 'NW',\n    angle: 60,\n    fullName: 'Northwest'\n  }, {\n    label: 'NNW',\n    angle: 90,\n    fullName: 'North-Northwest'\n  }];\n\n  // Correct the direction angles (0Â° = North, clockwise)\n  const correctedDirections = [{\n    label: 'N',\n    angle: 0,\n    fullName: 'North'\n  }, {\n    label: 'NNE',\n    angle: 22.5,\n    fullName: 'North-Northeast'\n  }, {\n    label: 'NE',\n    angle: 45,\n    fullName: 'Northeast'\n  }, {\n    label: 'ENE',\n    angle: 67.5,\n    fullName: 'East-Northeast'\n  }, {\n    label: 'E',\n    angle: 90,\n    fullName: 'East'\n  }, {\n    label: 'ESE',\n    angle: 112.5,\n    fullName: 'East-Southeast'\n  }, {\n    label: 'SE',\n    angle: 135,\n    fullName: 'Southeast'\n  }, {\n    label: 'SSE',\n    angle: 157.5,\n    fullName: 'South-Southeast'\n  }, {\n    label: 'S',\n    angle: 180,\n    fullName: 'South'\n  }, {\n    label: 'SSW',\n    angle: 202.5,\n    fullName: 'South-Southwest'\n  }, {\n    label: 'SW',\n    angle: 225,\n    fullName: 'Southwest'\n  }, {\n    label: 'WSW',\n    angle: 247.5,\n    fullName: 'West-Southwest'\n  }, {\n    label: 'W',\n    angle: 270,\n    fullName: 'West'\n  }, {\n    label: 'WNW',\n    angle: 292.5,\n    fullName: 'West-Northwest'\n  }, {\n    label: 'NW',\n    angle: 315,\n    fullName: 'Northwest'\n  }, {\n    label: 'NNW',\n    angle: 337.5,\n    fullName: 'North-Northwest'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"compass-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compass\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compass-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compass-needle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), correctedDirections.map((direction, index) => {\n        const radius = 45; // Distance from center\n        const x = Math.sin(direction.angle * Math.PI / 180) * radius;\n        const y = -Math.cos(direction.angle * Math.PI / 180) * radius;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `compass-direction ${direction.label === 'N' || direction.label === 'S' || direction.label === 'E' || direction.label === 'W' ? 'cardinal' : 'intermediate'}`,\n          style: {\n            transform: `translate(${x}px, ${y}px)`\n          },\n          title: direction.fullName,\n          children: direction.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compass-label\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Compass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Click directions to see full names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = Compass;\nconst GoogleMapsPolygonDrawer = ({\n  onAreaChange,\n  userLocation,\n  apiKey\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n  const [currentLocation, setCurrentLocation] = useState(userLocation);\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (map && currentLocation) {\n      map.setCenter(currentLocation);\n      map.setZoom(20);\n    }\n  }, [currentLocation, map]);\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: currentLocation || {\n          lat: 51.5074,\n          lng: -0.1278\n        },\n        // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON]\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true\n        }\n      });\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', newPolygon => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, currentLocation]);\n  const calculateArea = polygon => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n  const enableDrawing = () => {\n    if (map) {\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON]\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true\n        }\n      });\n      drawingManager.setMap(map);\n    }\n  };\n  const handleLocationChange = newLocation => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      clearPolygon();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-maps-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-location-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Change Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a different postcode to locate another property:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostcodeLocationInput, {\n        onLocationChange: handleLocationChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-with-compass\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          height: '500px',\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Compass, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearPolygon,\n        className: \"btn btn-secondary\",\n        disabled: !polygon,\n        children: \"Clear Roof Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: enableDrawing,\n        className: \"btn btn-outline\",\n        children: \"Draw New Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapsPolygonDrawer, \"7Hza/UWUXwEi7OIcuUKMD44l//4=\");\n_c2 = GoogleMapsPolygonDrawer;\nexport default GoogleMapsPolygonDrawer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Compass\");\n$RefreshReg$(_c2, \"GoogleMapsPolygonDrawer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","PostcodeLocationInput","jsxDEV","_jsxDEV","Compass","directions","label","angle","fullName","correctedDirections","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","direction","index","radius","x","Math","sin","PI","y","cos","style","transform","title","_c","GoogleMapsPolygonDrawer","onAreaChange","userLocation","apiKey","_s","mapRef","setMap","polygon","setPolygon","area","setArea","currentLocation","setCurrentLocation","setCenter","setZoom","current","newMap","window","google","maps","Map","center","lat","lng","zoom","mapTypeId","tilt","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","polygonOptions","fillColor","fillOpacity","strokeColor","strokeWeight","editable","draggable","addListener","newPolygon","calculateArea","getPath","setDrawingMode","path","areaInSquareMeters","geometry","spherical","computeArea","clearPolygon","enableDrawing","handleLocationChange","newLocation","onLocationChange","ref","height","width","onClick","disabled","_c2","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/GoogleMapsPolygonDrawer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PostcodeLocationInput from './PostcodeLocationInput';\n\nconst Compass = () => {\n  const directions = [\n    { label: 'N', angle: 0, fullName: 'North' },\n    { label: 'NNE', angle: 30, fullName: 'North-Northeast' },\n    { label: 'NE', angle: 60, fullName: 'Northeast' },\n    { label: 'ENE', angle: 90, fullName: 'East-Northeast' },\n    { label: 'E', angle: 120, fullName: 'East' },\n    { label: 'ESE', angle: 150, fullName: 'East-Southeast' },\n    { label: 'SE', angle: 180, fullName: 'Southeast' },\n    { label: 'SSE', angle: 210, fullName: 'South-Southeast' },\n    { label: 'S', angle: 240, fullName: 'South' },\n    { label: 'SSW', angle: 270, fullName: 'South-Southwest' },\n    { label: 'SW', angle: 300, fullName: 'Southwest' },\n    { label: 'WSW', angle: 330, fullName: 'West-Southwest' },\n    { label: 'W', angle: 360, fullName: 'West' },\n    { label: 'WNW', angle: 30, fullName: 'West-Northwest' },\n    { label: 'NW', angle: 60, fullName: 'Northwest' },\n    { label: 'NNW', angle: 90, fullName: 'North-Northwest' }\n  ];\n\n  // Correct the direction angles (0Â° = North, clockwise)\n  const correctedDirections = [\n    { label: 'N', angle: 0, fullName: 'North' },\n    { label: 'NNE', angle: 22.5, fullName: 'North-Northeast' },\n    { label: 'NE', angle: 45, fullName: 'Northeast' },\n    { label: 'ENE', angle: 67.5, fullName: 'East-Northeast' },\n    { label: 'E', angle: 90, fullName: 'East' },\n    { label: 'ESE', angle: 112.5, fullName: 'East-Southeast' },\n    { label: 'SE', angle: 135, fullName: 'Southeast' },\n    { label: 'SSE', angle: 157.5, fullName: 'South-Southeast' },\n    { label: 'S', angle: 180, fullName: 'South' },\n    { label: 'SSW', angle: 202.5, fullName: 'South-Southwest' },\n    { label: 'SW', angle: 225, fullName: 'Southwest' },\n    { label: 'WSW', angle: 247.5, fullName: 'West-Southwest' },\n    { label: 'W', angle: 270, fullName: 'West' },\n    { label: 'WNW', angle: 292.5, fullName: 'West-Northwest' },\n    { label: 'NW', angle: 315, fullName: 'Northwest' },\n    { label: 'NNW', angle: 337.5, fullName: 'North-Northwest' }\n  ];\n\n  return (\n    <div className=\"compass-container\">\n      <div className=\"compass\">\n        <div className=\"compass-center\">\n          <div className=\"compass-needle\"></div>\n        </div>\n        {correctedDirections.map((direction, index) => {\n          const radius = 45; // Distance from center\n          const x = Math.sin((direction.angle * Math.PI) / 180) * radius;\n          const y = -Math.cos((direction.angle * Math.PI) / 180) * radius;\n          \n          return (\n            <div\n              key={index}\n              className={`compass-direction ${direction.label === 'N' || direction.label === 'S' || direction.label === 'E' || direction.label === 'W' ? 'cardinal' : 'intermediate'}`}\n              style={{\n                transform: `translate(${x}px, ${y}px)`,\n              }}\n              title={direction.fullName}\n            >\n              {direction.label}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"compass-label\">\n        <span>Compass</span>\n        <small>Click directions to see full names</small>\n      </div>\n    </div>\n  );\n};\n\nconst GoogleMapsPolygonDrawer = ({ onAreaChange, userLocation, apiKey }) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n  const [currentLocation, setCurrentLocation] = useState(userLocation);\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (map && currentLocation) {\n      map.setCenter(currentLocation);\n      map.setZoom(20);\n    }\n  }, [currentLocation, map]);\n\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: currentLocation || { lat: 51.5074, lng: -0.1278 }, // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0,\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON],\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true,\n        },\n      });\n\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', (newPolygon) => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, currentLocation]);\n\n  const calculateArea = (polygon) => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n\n  const enableDrawing = () => {\n    if (map) {\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON],\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true,\n        },\n      });\n      drawingManager.setMap(map);\n    }\n  };\n\n  const handleLocationChange = (newLocation) => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      clearPolygon();\n    }\n  };\n\n  return (\n    <div className=\"google-maps-container\">\n      <div className=\"map-location-controls\">\n        <h5>Change Location</h5>\n        <p>Enter a different postcode to locate another property:</p>\n        <PostcodeLocationInput onLocationChange={handleLocationChange} />\n      </div>\n      \n      <div className=\"map-with-compass\">\n        <div ref={mapRef} style={{ height: '500px', width: '100%' }} />\n        <Compass />\n      </div>\n      \n      <div className=\"map-controls\">\n        <button onClick={clearPolygon} className=\"btn btn-secondary\" disabled={!polygon}>\n          Clear Roof Area\n        </button>\n        <button onClick={enableDrawing} className=\"btn btn-outline\">\n          Draw New Area\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleMapsPolygonDrawer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}