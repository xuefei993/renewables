{"ast":null,"code":"// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService = {\n  // 模拟太阳能潜力计算结果\n  getSolarPotentialResult(request) {\n    return {\n      solarPotential: 85.6,\n      shadingFactor: 0.9,\n      utilisationFactor: 0.85,\n      tiltOrientationFactor: 0.95,\n      solarPanelCount: Math.floor((request.roofSize || 50) / 2)\n    };\n  },\n  // 模拟位置信息\n  getLocationData() {\n    return [{\n      id: 1,\n      name: \"London\",\n      postcode: \"SW1A 1AA\",\n      country: \"England\",\n      region: \"Greater London\",\n      latitude: 51.5074,\n      longitude: -0.1278\n    }, {\n      id: 2,\n      name: \"Manchester\",\n      postcode: \"M1 1AA\",\n      country: \"England\",\n      region: \"Greater Manchester\",\n      latitude: 53.4808,\n      longitude: -2.2426\n    }, {\n      id: 3,\n      name: \"Birmingham\",\n      postcode: \"B1 1AA\",\n      country: \"England\",\n      region: \"West Midlands\",\n      latitude: 52.4862,\n      longitude: -1.8904\n    }];\n  },\n  // 模拟太阳能板类型数据\n  getSolarPanelTypes() {\n    return [{\n      id: 1,\n      name: \"Monocrystalline Premium\",\n      efficiency: 22.0,\n      ratedPowerPerPanel: 450,\n      price: 380,\n      costPerWatt: 0.85,\n      warrantyYears: 25\n    }, {\n      id: 2,\n      name: \"Monocrystalline Standard\",\n      efficiency: 20.5,\n      ratedPowerPerPanel: 410,\n      price: 310,\n      costPerWatt: 0.75,\n      warrantyYears: 25\n    }, {\n      id: 3,\n      name: \"Polycrystalline\",\n      efficiency: 18.5,\n      ratedPowerPerPanel: 370,\n      price: 240,\n      costPerWatt: 0.65,\n      warrantyYears: 20\n    }];\n  },\n  // 模拟总安装容量计算\n  getTotalInstalledCapacity(data) {\n    const panelCount = data.solarPanelCount || 20;\n    const panelWattage = data.panelWattage || 410;\n    return {\n      totalCapacity: panelCount * panelWattage / 1000,\n      // kW\n      panelCount: panelCount,\n      panelWattage: panelWattage,\n      systemEfficiency: 0.85\n    };\n  },\n  // 模拟月度发电量\n  getMonthlyElectricityGeneration(data) {\n    const capacity = data.totalCapacity || 8.2;\n    return {\n      monthlyGeneration: [{\n        month: 1,\n        generation: capacity * 45\n      }, {\n        month: 2,\n        generation: capacity * 65\n      }, {\n        month: 3,\n        generation: capacity * 95\n      }, {\n        month: 4,\n        generation: capacity * 125\n      }, {\n        month: 5,\n        generation: capacity * 145\n      }, {\n        month: 6,\n        generation: capacity * 155\n      }, {\n        month: 7,\n        generation: capacity * 150\n      }, {\n        month: 8,\n        generation: capacity * 135\n      }, {\n        month: 9,\n        generation: capacity * 110\n      }, {\n        month: 10,\n        generation: capacity * 80\n      }, {\n        month: 11,\n        generation: capacity * 50\n      }, {\n        month: 12,\n        generation: capacity * 35\n      }],\n      annualGeneration: capacity * 1200,\n      systemCapacity: capacity\n    };\n  },\n  // 模拟电力需求计算\n  getElectricityDemand(data) {\n    const baseUsage = data.annualUsage || 3500;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.09),\n      2: Math.round(baseUsage * 0.08),\n      3: Math.round(baseUsage * 0.08),\n      4: Math.round(baseUsage * 0.07),\n      5: Math.round(baseUsage * 0.07),\n      6: Math.round(baseUsage * 0.07),\n      7: Math.round(baseUsage * 0.08),\n      8: Math.round(baseUsage * 0.08),\n      9: Math.round(baseUsage * 0.08),\n      10: Math.round(baseUsage * 0.09),\n      11: Math.round(baseUsage * 0.10),\n      12: Math.round(baseUsage * 0.11)\n    };\n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    return {\n      annualElectricityDemand: baseUsage,\n      monthlyElectricityDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n  // 模拟燃气需求计算  \n  getGasDemand(data) {\n    const baseUsage = data.annualUsage || 12000;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.15),\n      2: Math.round(baseUsage * 0.13),\n      3: Math.round(baseUsage * 0.11),\n      4: Math.round(baseUsage * 0.08),\n      5: Math.round(baseUsage * 0.05),\n      6: Math.round(baseUsage * 0.03),\n      7: Math.round(baseUsage * 0.03),\n      8: Math.round(baseUsage * 0.03),\n      9: Math.round(baseUsage * 0.05),\n      10: Math.round(baseUsage * 0.08),\n      11: Math.round(baseUsage * 0.12),\n      12: Math.round(baseUsage * 0.14)\n    };\n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    return {\n      annualGasDemand: baseUsage,\n      monthlyGasDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n  // 模拟太阳能安装成本\n  getSolarInstallationCost(data) {\n    const systemSize = data.systemSize || 8.2;\n    const baseCostPerKW = 1850;\n    const totalCost = systemSize * baseCostPerKW;\n    return {\n      systemSize: systemSize,\n      equipmentCost: totalCost * 0.6,\n      installationCost: totalCost * 0.25,\n      permitsCost: totalCost * 0.05,\n      otherCosts: totalCost * 0.1,\n      totalCost: totalCost,\n      costPerKW: baseCostPerKW,\n      paybackPeriod: 8.5,\n      roi: 12.8\n    };\n  },\n  // 模拟月度节约计算\n  getMonthlySavings(data) {\n    const monthlyGeneration = data.monthlyGeneration || 685;\n    const electricityRate = data.electricityRate || 0.28;\n    const exportRate = data.exportRate || 0.15;\n    return {\n      monthlySavings: [{\n        month: 1,\n        savings: monthlyGeneration * 0.4 * electricityRate + monthlyGeneration * 0.6 * exportRate\n      }, {\n        month: 2,\n        savings: monthlyGeneration * 0.5 * electricityRate + monthlyGeneration * 0.5 * exportRate\n      }, {\n        month: 3,\n        savings: monthlyGeneration * 0.6 * electricityRate + monthlyGeneration * 0.4 * exportRate\n      }, {\n        month: 4,\n        savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate\n      }, {\n        month: 5,\n        savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate\n      }, {\n        month: 6,\n        savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate\n      }, {\n        month: 7,\n        savings: monthlyGeneration * 0.75 * electricityRate + monthlyGeneration * 0.25 * exportRate\n      }, {\n        month: 8,\n        savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate\n      }, {\n        month: 9,\n        savings: monthlyGeneration * 0.65 * electricityRate + monthlyGeneration * 0.35 * exportRate\n      }, {\n        month: 10,\n        savings: monthlyGeneration * 0.55 * electricityRate + monthlyGeneration * 0.45 * exportRate\n      }, {\n        month: 11,\n        savings: monthlyGeneration * 0.45 * electricityRate + monthlyGeneration * 0.55 * exportRate\n      }, {\n        month: 12,\n        savings: monthlyGeneration * 0.35 * electricityRate + monthlyGeneration * 0.65 * exportRate\n      }],\n      annualSavings: monthlyGeneration * 12 * (0.6 * electricityRate + 0.4 * exportRate),\n      selfConsumptionRate: 0.6,\n      exportRate: 0.4\n    };\n  },\n  // 模拟碳排放节约\n  getCarbonSavings(data) {\n    const annualGeneration = data.annualGeneration || 8220;\n    const carbonIntensity = 0.233; // kg CO2/kWh UK grid average\n\n    return {\n      annualCarbonSaved: annualGeneration * carbonIntensity,\n      lifetimeCarbonSaved: annualGeneration * carbonIntensity * 25,\n      equivalentTrees: Math.round(annualGeneration * carbonIntensity / 21.8),\n      equivalentCars: Math.round(annualGeneration * carbonIntensity / 4600),\n      carbonIntensity: carbonIntensity\n    };\n  },\n  // 模拟设备对比\n  getEquipmentComparison(data) {\n    var _data$solarPanelTypeI, _data$heatPumpTypeIds, _data$batteryIds;\n    const solarPanels = this.getSolarPanelTypes();\n    const heatPumps = this.getHeatPumps();\n    const batteries = this.getBatteries();\n\n    // 根据选择的设备ID获取对应的价格和性能\n    const getSolarPanelData = panelId => {\n      const panel = solarPanels.find(p => p.id == panelId);\n      if (!panel) return {\n        cost: 12500,\n        generation: 8200,\n        savings: 1250,\n        export: 350,\n        co2: 2100\n      };\n\n      // 计算系统规模\n      const panelCount = Math.floor((data.roofArea || 60) / 2); // 假设每块板2平米\n      const systemSizeKW = panelCount * panel.ratedPowerPerPanel / 1000;\n\n      // 成本计算\n      const systemCost = panel.price * panelCount;\n      const installationCost = systemCost * 0.3;\n      const totalCost = Math.round(systemCost + installationCost);\n\n      // 发电量计算（基于效率）\n      const baseGeneration = 8200;\n      const generationMultiplier = panel.efficiency / 20.5; // 以Standard面板为基准\n      const annualGeneration = Math.round(baseGeneration * generationMultiplier * (systemSizeKW / 8.2));\n\n      // 节约和收入计算\n      const electricityRate = 0.28; // £/kWh\n      const exportRate = 0.15; // £/kWh\n      const selfUseRatio = 0.65; // 65%自用\n      const exportRatio = 0.35; // 35%出口\n\n      const annualSavings = Math.round(annualGeneration * selfUseRatio * electricityRate);\n      const annualExport = Math.round(annualGeneration * exportRatio * exportRate);\n\n      // CO2节约计算\n      const co2Intensity = 0.233; // kg CO2/kWh\n      const annualCO2 = Math.round(annualGeneration * co2Intensity);\n\n      // 月度数据计算\n      const monthlyPattern = [0.05, 0.07, 0.10, 0.13, 0.16, 0.17, 0.16, 0.15, 0.12, 0.08, 0.05, 0.04];\n      const monthlyGeneration = monthlyPattern.map(ratio => Math.round(annualGeneration * ratio));\n      const monthlySavings = monthlyGeneration.map(gen => Math.round(gen * selfUseRatio * electricityRate));\n      const monthlyExport = monthlyGeneration.map(gen => Math.round(gen * exportRatio * exportRate));\n      const monthlyCO2Direct = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.7));\n      const monthlyCO2Indirect = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.3));\n      return {\n        cost: totalCost,\n        generation: annualGeneration,\n        savings: annualSavings,\n        export: annualExport,\n        co2: annualCO2,\n        monthlyData: {\n          generation: monthlyGeneration,\n          savings: monthlySavings,\n          export: monthlyExport,\n          co2Direct: monthlyCO2Direct,\n          co2Indirect: monthlyCO2Indirect\n        }\n      };\n    };\n    const getHeatPumpData = heatPumpId => {\n      const heatPump = heatPumps.find(h => h.id == heatPumpId);\n      if (!heatPump) return {\n        cost: 10500,\n        savings: 850,\n        co2: 1800\n      };\n      const totalCost = heatPump.cost + heatPump.installationCost;\n\n      // 基于COP计算效率和节约\n      const baseSavings = 850;\n      const savingsMultiplier = heatPump.cop / 3.8; // 以Standard为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n\n      // CO2节约（热泵替代燃气）\n      const baseCO2 = 1800;\n      const co2Savings = Math.round(baseCO2 * savingsMultiplier);\n\n      // 月度数据（冬季高，夏季低）\n      const monthlyPattern = [0.15, 0.13, 0.11, 0.08, 0.05, 0.03, 0.03, 0.03, 0.05, 0.08, 0.12, 0.14];\n      const monthlySavings = monthlyPattern.map(ratio => Math.round(annualSavings * ratio));\n      const monthlyCO2 = monthlyPattern.map(ratio => Math.round(co2Savings * ratio));\n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        co2: co2Savings,\n        monthlyData: {\n          savings: monthlySavings,\n          co2Direct: monthlyCO2,\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n    const getBatteryData = batteryId => {\n      const battery = batteries.find(b => b.id == batteryId);\n      if (!battery) return {\n        cost: 8500,\n        savings: 420\n      };\n      const totalCost = battery.cost + 1500; // 加安装费\n\n      // 基于容量计算节约（更大容量=更多节约）\n      const baseSavings = 420;\n      const savingsMultiplier = battery.capacityKwh / 9.8; // 以LG Chem为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n\n      // 电池存储会减少出口收入\n      const exportReduction = Math.round(annualSavings * 0.3);\n      const monthlySavings = new Array(12).fill(Math.round(annualSavings / 12));\n      const monthlyExportReduction = new Array(12).fill(Math.round(-exportReduction / 12));\n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        exportReduction: -exportReduction,\n        monthlyData: {\n          savings: monthlySavings,\n          export: monthlyExportReduction,\n          co2Direct: new Array(12).fill(0),\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n\n    // 模拟真实API返回的设备对比结果格式\n    const solarData = ((_data$solarPanelTypeI = data.solarPanelTypeIds) === null || _data$solarPanelTypeI === void 0 ? void 0 : _data$solarPanelTypeI.length) > 0 ? getSolarPanelData(data.solarPanelTypeIds[0]) : null;\n    const heatPumpData = ((_data$heatPumpTypeIds = data.heatPumpTypeIds) === null || _data$heatPumpTypeIds === void 0 ? void 0 : _data$heatPumpTypeIds.length) > 0 ? getHeatPumpData(data.heatPumpTypeIds[0]) : null;\n    const batteryData = ((_data$batteryIds = data.batteryIds) === null || _data$batteryIds === void 0 ? void 0 : _data$batteryIds.length) > 0 ? getBatteryData(data.batteryIds[0]) : null;\n    return {\n      solarPanelOptions: solarData ? [{\n        id: data.solarPanelTypeIds[0],\n        installationCost: solarData.cost,\n        annualGeneration: solarData.generation,\n        annualCostSavings: solarData.savings,\n        annualExportRevenue: solarData.export,\n        annualTotalCO2Savings: solarData.co2,\n        monthlyGeneration: solarData.monthlyData.generation,\n        monthlyCostSavings: solarData.monthlyData.savings,\n        monthlyExportRevenue: solarData.monthlyData.export,\n        monthlyDirectCO2Savings: solarData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: solarData.monthlyData.co2Indirect\n      }] : [],\n      heatPumpOptions: heatPumpData ? [{\n        id: data.heatPumpTypeIds[0],\n        installationCost: heatPumpData.cost,\n        annualGeneration: 0,\n        annualCostSavings: heatPumpData.savings,\n        annualExportRevenue: 0,\n        annualTotalCO2Savings: heatPumpData.co2,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: heatPumpData.monthlyData.savings,\n        monthlyExportRevenue: new Array(12).fill(0),\n        monthlyDirectCO2Savings: heatPumpData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: heatPumpData.monthlyData.co2Indirect\n      }] : [],\n      batteryOptions: batteryData ? [{\n        id: data.batteryIds[0],\n        installationCost: batteryData.cost,\n        annualGeneration: 0,\n        annualCostSavings: batteryData.savings,\n        annualExportRevenue: batteryData.exportReduction,\n        annualTotalCO2Savings: 0,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: batteryData.monthlyData.savings,\n        monthlyExportRevenue: batteryData.monthlyData.export,\n        monthlyDirectCO2Savings: batteryData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: batteryData.monthlyData.co2Indirect\n      }] : []\n    };\n  },\n  // 模拟政府补贴\n  getGovernmentSubsidies(data) {\n    const subsidies = [];\n\n    // Heat Pump subsidies\n    if (data.hasHeatPump) {\n      subsidies.push({\n        subsidyId: \"bus-2024\",\n        name: \"Boiler Upgrade Scheme\",\n        shortDescription: \"Get £7,500 towards the cost of replacing your fossil fuel heating system with a heat pump\",\n        isEligible: true,\n        estimatedAmount: 7500,\n        deadline: \"2025-03-31\",\n        applicationUrl: \"https://www.gov.uk/apply-boiler-upgrade-scheme\"\n      });\n    }\n\n    // Always include some general schemes\n    if (!data.hasHeatPump && !data.hasSolarPanels && !data.hasBattery) {\n      subsidies.push({\n        subsidyId: \"general-eco4-2024\",\n        name: \"ECO4 Scheme\",\n        shortDescription: \"Support for home energy efficiency improvements including insulation and heating upgrades\",\n        isEligible: false,\n        ineligibilityReason: \"Based on current configuration, no qualifying measures selected\",\n        applicationUrl: \"https://www.gov.uk/energy-company-obligation\"\n      });\n    }\n    return {\n      availableSubsidies: subsidies,\n      totalPotentialSavings: subsidies.reduce((sum, s) => sum + (s.estimatedAmount || 0), 0),\n      applicableSubsidies: subsidies.filter(s => s.isEligible).length\n    };\n  },\n  // 获取完整计算结果\n  getCompleteCalculationResult(data) {\n    return {\n      solarInstallation: this.getSolarInstallationCost(data),\n      monthlyGeneration: this.getMonthlyElectricityGeneration(data),\n      monthlySavings: this.getMonthlySavings(data),\n      carbonSavings: this.getCarbonSavings(data),\n      paybackAnalysis: {\n        paybackPeriod: 8.5,\n        roi: 12.8,\n        netPresentValue: 8450,\n        internalRateOfReturn: 0.135\n      },\n      systemConfiguration: {\n        recommendedSystem: \"8.2kW Solar + 13.5kWh Battery\",\n        annualGeneration: 8220,\n        selfConsumption: 65,\n        exportToGrid: 35\n      }\n    };\n  },\n  // 获取热泵数据\n  getHeatPumps() {\n    return [{\n      id: 1,\n      name: \"Air Source Heat Pump - Premium\",\n      type: \"air_source\",\n      capacity: 12.0,\n      cop: 4.2,\n      cost: 16000,\n      price: 16000,\n      installationCost: 3500\n    }, {\n      id: 2,\n      name: \"Air Source Heat Pump - Standard\",\n      type: \"air_source\",\n      capacity: 10.0,\n      cop: 3.8,\n      cost: 12500,\n      price: 12500,\n      installationCost: 3000\n    }, {\n      id: 3,\n      name: \"Air Source Heat Pump - Basic\",\n      type: \"air_source\",\n      capacity: 8.0,\n      cop: 3.5,\n      cost: 10000,\n      price: 10000,\n      installationCost: 2500\n    }];\n  },\n  // 获取电池存储系统\n  getBatteries() {\n    return [{\n      id: 1,\n      name: \"Tesla Powerwall 2\",\n      capacityKwh: 13.5,\n      power: 5.0,\n      efficiency: 0.92,\n      cost: 8500,\n      price: 8500,\n      warranty: 10\n    }, {\n      id: 2,\n      name: \"LG Chem RESU\",\n      capacityKwh: 9.8,\n      power: 5.0,\n      efficiency: 0.90,\n      cost: 6200,\n      price: 6200,\n      warranty: 10\n    }, {\n      id: 3,\n      name: \"Sonnen Eco\",\n      capacityKwh: 10.0,\n      power: 3.3,\n      efficiency: 0.88,\n      cost: 7000,\n      price: 7000,\n      warranty: 10\n    }];\n  }\n};","map":{"version":3,"names":["mockDataService","getSolarPotentialResult","request","solarPotential","shadingFactor","utilisationFactor","tiltOrientationFactor","solarPanelCount","Math","floor","roofSize","getLocationData","id","name","postcode","country","region","latitude","longitude","getSolarPanelTypes","efficiency","ratedPowerPerPanel","price","costPerWatt","warrantyYears","getTotalInstalledCapacity","data","panelCount","panelWattage","totalCapacity","systemEfficiency","getMonthlyElectricityGeneration","capacity","monthlyGeneration","month","generation","annualGeneration","systemCapacity","getElectricityDemand","baseUsage","annualUsage","monthlyData","round","monthlyValues","Object","values","maxValue","max","minValue","min","peakMonth","keys","find","key","lowMonth","annualElectricityDemand","monthlyElectricityDemand","peakMonthDemand","parseInt","lowMonthDemand","calculationMethod","getGasDemand","annualGasDemand","monthlyGasDemand","getSolarInstallationCost","systemSize","baseCostPerKW","totalCost","equipmentCost","installationCost","permitsCost","otherCosts","costPerKW","paybackPeriod","roi","getMonthlySavings","electricityRate","exportRate","monthlySavings","savings","annualSavings","selfConsumptionRate","getCarbonSavings","carbonIntensity","annualCarbonSaved","lifetimeCarbonSaved","equivalentTrees","equivalentCars","getEquipmentComparison","_data$solarPanelTypeI","_data$heatPumpTypeIds","_data$batteryIds","solarPanels","heatPumps","getHeatPumps","batteries","getBatteries","getSolarPanelData","panelId","panel","p","cost","export","co2","roofArea","systemSizeKW","systemCost","baseGeneration","generationMultiplier","selfUseRatio","exportRatio","annualExport","co2Intensity","annualCO2","monthlyPattern","map","ratio","gen","monthlyExport","monthlyCO2Direct","monthlyCO2Indirect","co2Direct","co2Indirect","getHeatPumpData","heatPumpId","heatPump","h","baseSavings","savingsMultiplier","cop","baseCO2","co2Savings","monthlyCO2","Array","fill","getBatteryData","batteryId","battery","b","capacityKwh","exportReduction","monthlyExportReduction","solarData","solarPanelTypeIds","length","heatPumpData","heatPumpTypeIds","batteryData","batteryIds","solarPanelOptions","annualCostSavings","annualExportRevenue","annualTotalCO2Savings","monthlyCostSavings","monthlyExportRevenue","monthlyDirectCO2Savings","monthlyIndirectCO2Savings","heatPumpOptions","batteryOptions","getGovernmentSubsidies","subsidies","hasHeatPump","push","subsidyId","shortDescription","isEligible","estimatedAmount","deadline","applicationUrl","hasSolarPanels","hasBattery","ineligibilityReason","availableSubsidies","totalPotentialSavings","reduce","sum","s","applicableSubsidies","filter","getCompleteCalculationResult","solarInstallation","carbonSavings","paybackAnalysis","netPresentValue","internalRateOfReturn","systemConfiguration","recommendedSystem","selfConsumption","exportToGrid","type","power","warranty"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/services/mockDataService.js"],"sourcesContent":["// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService = {\n  \n  // 模拟太阳能潜力计算结果\n  getSolarPotentialResult(request) {\n    return {\n      solarPotential: 85.6,\n      shadingFactor: 0.9,\n      utilisationFactor: 0.85,\n      tiltOrientationFactor: 0.95,\n      solarPanelCount: Math.floor((request.roofSize || 50) / 2)\n    };\n  },\n\n  // 模拟位置信息\n  getLocationData() {\n    return [\n      {\n        id: 1,\n        name: \"London\",\n        postcode: \"SW1A 1AA\",\n        country: \"England\",\n        region: \"Greater London\",\n        latitude: 51.5074,\n        longitude: -0.1278\n      },\n      {\n        id: 2,\n        name: \"Manchester\",\n        postcode: \"M1 1AA\",\n        country: \"England\", \n        region: \"Greater Manchester\",\n        latitude: 53.4808,\n        longitude: -2.2426\n      },\n      {\n        id: 3,\n        name: \"Birmingham\",\n        postcode: \"B1 1AA\",\n        country: \"England\",\n        region: \"West Midlands\", \n        latitude: 52.4862,\n        longitude: -1.8904\n      }\n    ];\n  },\n\n  // 模拟太阳能板类型数据\n  getSolarPanelTypes() {\n    return [\n      {\n        id: 1,\n        name: \"Monocrystalline Premium\",\n        efficiency: 22.0,\n        ratedPowerPerPanel: 450,\n        price: 380,\n        costPerWatt: 0.85,\n        warrantyYears: 25\n      },\n      {\n        id: 2, \n        name: \"Monocrystalline Standard\",\n        efficiency: 20.5,\n        ratedPowerPerPanel: 410,\n        price: 310,\n        costPerWatt: 0.75,\n        warrantyYears: 25\n      },\n      {\n        id: 3,\n        name: \"Polycrystalline\", \n        efficiency: 18.5,\n        ratedPowerPerPanel: 370,\n        price: 240,\n        costPerWatt: 0.65,\n        warrantyYears: 20\n      }\n    ];\n  },\n\n  // 模拟总安装容量计算\n  getTotalInstalledCapacity(data) {\n    const panelCount = data.solarPanelCount || 20;\n    const panelWattage = data.panelWattage || 410;\n    return {\n      totalCapacity: (panelCount * panelWattage) / 1000, // kW\n      panelCount: panelCount,\n      panelWattage: panelWattage,\n      systemEfficiency: 0.85\n    };\n  },\n\n  // 模拟月度发电量\n  getMonthlyElectricityGeneration(data) {\n    const capacity = data.totalCapacity || 8.2;\n    return {\n      monthlyGeneration: [\n        { month: 1, generation: capacity * 45 },\n        { month: 2, generation: capacity * 65 },\n        { month: 3, generation: capacity * 95 },\n        { month: 4, generation: capacity * 125 },\n        { month: 5, generation: capacity * 145 },\n        { month: 6, generation: capacity * 155 },\n        { month: 7, generation: capacity * 150 },\n        { month: 8, generation: capacity * 135 },\n        { month: 9, generation: capacity * 110 },\n        { month: 10, generation: capacity * 80 },\n        { month: 11, generation: capacity * 50 },\n        { month: 12, generation: capacity * 35 }\n      ],\n      annualGeneration: capacity * 1200,\n      systemCapacity: capacity\n    };\n  },\n\n  // 模拟电力需求计算\n  getElectricityDemand(data) {\n    const baseUsage = data.annualUsage || 3500;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.09),\n      2: Math.round(baseUsage * 0.08),\n      3: Math.round(baseUsage * 0.08),\n      4: Math.round(baseUsage * 0.07),\n      5: Math.round(baseUsage * 0.07),\n      6: Math.round(baseUsage * 0.07),\n      7: Math.round(baseUsage * 0.08),\n      8: Math.round(baseUsage * 0.08),\n      9: Math.round(baseUsage * 0.08),\n      10: Math.round(baseUsage * 0.09),\n      11: Math.round(baseUsage * 0.10),\n      12: Math.round(baseUsage * 0.11)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualElectricityDemand: baseUsage,\n      monthlyElectricityDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟燃气需求计算  \n  getGasDemand(data) {\n    const baseUsage = data.annualUsage || 12000;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.15),\n      2: Math.round(baseUsage * 0.13),\n      3: Math.round(baseUsage * 0.11),\n      4: Math.round(baseUsage * 0.08),\n      5: Math.round(baseUsage * 0.05),\n      6: Math.round(baseUsage * 0.03),\n      7: Math.round(baseUsage * 0.03),\n      8: Math.round(baseUsage * 0.03),\n      9: Math.round(baseUsage * 0.05),\n      10: Math.round(baseUsage * 0.08),\n      11: Math.round(baseUsage * 0.12),\n      12: Math.round(baseUsage * 0.14)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualGasDemand: baseUsage,\n      monthlyGasDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟太阳能安装成本\n  getSolarInstallationCost(data) {\n    const systemSize = data.systemSize || 8.2;\n    const baseCostPerKW = 1850;\n    const totalCost = systemSize * baseCostPerKW;\n    \n    return {\n      systemSize: systemSize,\n      equipmentCost: totalCost * 0.6,\n      installationCost: totalCost * 0.25,\n      permitsCost: totalCost * 0.05,\n      otherCosts: totalCost * 0.1,\n      totalCost: totalCost,\n      costPerKW: baseCostPerKW,\n      paybackPeriod: 8.5,\n      roi: 12.8\n    };\n  },\n\n  // 模拟月度节约计算\n  getMonthlySavings(data) {\n    const monthlyGeneration = data.monthlyGeneration || 685;\n    const electricityRate = data.electricityRate || 0.28;\n    const exportRate = data.exportRate || 0.15;\n    \n    return {\n      monthlySavings: [\n        { month: 1, savings: monthlyGeneration * 0.4 * electricityRate + monthlyGeneration * 0.6 * exportRate },\n        { month: 2, savings: monthlyGeneration * 0.5 * electricityRate + monthlyGeneration * 0.5 * exportRate },\n        { month: 3, savings: monthlyGeneration * 0.6 * electricityRate + monthlyGeneration * 0.4 * exportRate },\n        { month: 4, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 5, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 6, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 7, savings: monthlyGeneration * 0.75 * electricityRate + monthlyGeneration * 0.25 * exportRate },\n        { month: 8, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 9, savings: monthlyGeneration * 0.65 * electricityRate + monthlyGeneration * 0.35 * exportRate },\n        { month: 10, savings: monthlyGeneration * 0.55 * electricityRate + monthlyGeneration * 0.45 * exportRate },\n        { month: 11, savings: monthlyGeneration * 0.45 * electricityRate + monthlyGeneration * 0.55 * exportRate },\n        { month: 12, savings: monthlyGeneration * 0.35 * electricityRate + monthlyGeneration * 0.65 * exportRate }\n      ],\n      annualSavings: monthlyGeneration * 12 * ((0.6 * electricityRate) + (0.4 * exportRate)),\n      selfConsumptionRate: 0.6,\n      exportRate: 0.4\n    };\n  },\n\n  // 模拟碳排放节约\n  getCarbonSavings(data) {\n    const annualGeneration = data.annualGeneration || 8220;\n    const carbonIntensity = 0.233; // kg CO2/kWh UK grid average\n    \n    return {\n      annualCarbonSaved: annualGeneration * carbonIntensity,\n      lifetimeCarbonSaved: annualGeneration * carbonIntensity * 25,\n      equivalentTrees: Math.round(annualGeneration * carbonIntensity / 21.8),\n      equivalentCars: Math.round(annualGeneration * carbonIntensity / 4600),\n      carbonIntensity: carbonIntensity\n    };\n  },\n\n  // 模拟设备对比\n  getEquipmentComparison(data) {\n    const solarPanels = this.getSolarPanelTypes();\n    const heatPumps = this.getHeatPumps();\n    const batteries = this.getBatteries();\n    \n    // 根据选择的设备ID获取对应的价格和性能\n    const getSolarPanelData = (panelId) => {\n      const panel = solarPanels.find(p => p.id == panelId);\n      if (!panel) return { cost: 12500, generation: 8200, savings: 1250, export: 350, co2: 2100 };\n      \n      // 计算系统规模\n      const panelCount = Math.floor((data.roofArea || 60) / 2); // 假设每块板2平米\n      const systemSizeKW = (panelCount * panel.ratedPowerPerPanel) / 1000;\n      \n      // 成本计算\n      const systemCost = panel.price * panelCount;\n      const installationCost = systemCost * 0.3;\n      const totalCost = Math.round(systemCost + installationCost);\n      \n      // 发电量计算（基于效率）\n      const baseGeneration = 8200;\n      const generationMultiplier = panel.efficiency / 20.5; // 以Standard面板为基准\n      const annualGeneration = Math.round(baseGeneration * generationMultiplier * (systemSizeKW / 8.2));\n      \n      // 节约和收入计算\n      const electricityRate = 0.28; // £/kWh\n      const exportRate = 0.15; // £/kWh\n      const selfUseRatio = 0.65; // 65%自用\n      const exportRatio = 0.35; // 35%出口\n      \n      const annualSavings = Math.round(annualGeneration * selfUseRatio * electricityRate);\n      const annualExport = Math.round(annualGeneration * exportRatio * exportRate);\n      \n      // CO2节约计算\n      const co2Intensity = 0.233; // kg CO2/kWh\n      const annualCO2 = Math.round(annualGeneration * co2Intensity);\n      \n      // 月度数据计算\n      const monthlyPattern = [0.05, 0.07, 0.10, 0.13, 0.16, 0.17, 0.16, 0.15, 0.12, 0.08, 0.05, 0.04];\n      const monthlyGeneration = monthlyPattern.map(ratio => Math.round(annualGeneration * ratio));\n      const monthlySavings = monthlyGeneration.map(gen => Math.round(gen * selfUseRatio * electricityRate));\n      const monthlyExport = monthlyGeneration.map(gen => Math.round(gen * exportRatio * exportRate));\n      const monthlyCO2Direct = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.7));\n      const monthlyCO2Indirect = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.3));\n      \n      return {\n        cost: totalCost,\n        generation: annualGeneration,\n        savings: annualSavings,\n        export: annualExport,\n        co2: annualCO2,\n        monthlyData: {\n          generation: monthlyGeneration,\n          savings: monthlySavings,\n          export: monthlyExport,\n          co2Direct: monthlyCO2Direct,\n          co2Indirect: monthlyCO2Indirect\n        }\n      };\n    };\n    \n    const getHeatPumpData = (heatPumpId) => {\n      const heatPump = heatPumps.find(h => h.id == heatPumpId);\n      if (!heatPump) return { cost: 10500, savings: 850, co2: 1800 };\n      \n      const totalCost = heatPump.cost + heatPump.installationCost;\n      \n      // 基于COP计算效率和节约\n      const baseSavings = 850;\n      const savingsMultiplier = heatPump.cop / 3.8; // 以Standard为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n      \n      // CO2节约（热泵替代燃气）\n      const baseCO2 = 1800;\n      const co2Savings = Math.round(baseCO2 * savingsMultiplier);\n      \n      // 月度数据（冬季高，夏季低）\n      const monthlyPattern = [0.15, 0.13, 0.11, 0.08, 0.05, 0.03, 0.03, 0.03, 0.05, 0.08, 0.12, 0.14];\n      const monthlySavings = monthlyPattern.map(ratio => Math.round(annualSavings * ratio));\n      const monthlyCO2 = monthlyPattern.map(ratio => Math.round(co2Savings * ratio));\n      \n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        co2: co2Savings,\n        monthlyData: {\n          savings: monthlySavings,\n          co2Direct: monthlyCO2,\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n    \n    const getBatteryData = (batteryId) => {\n      const battery = batteries.find(b => b.id == batteryId);\n      if (!battery) return { cost: 8500, savings: 420 };\n      \n      const totalCost = battery.cost + 1500; // 加安装费\n      \n      // 基于容量计算节约（更大容量=更多节约）\n      const baseSavings = 420;\n      const savingsMultiplier = battery.capacityKwh / 9.8; // 以LG Chem为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n      \n      // 电池存储会减少出口收入\n      const exportReduction = Math.round(annualSavings * 0.3);\n      \n      const monthlySavings = new Array(12).fill(Math.round(annualSavings / 12));\n      const monthlyExportReduction = new Array(12).fill(Math.round(-exportReduction / 12));\n      \n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        exportReduction: -exportReduction,\n        monthlyData: {\n          savings: monthlySavings,\n          export: monthlyExportReduction,\n          co2Direct: new Array(12).fill(0),\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n    \n    // 模拟真实API返回的设备对比结果格式\n    const solarData = data.solarPanelTypeIds?.length > 0 ? getSolarPanelData(data.solarPanelTypeIds[0]) : null;\n    const heatPumpData = data.heatPumpTypeIds?.length > 0 ? getHeatPumpData(data.heatPumpTypeIds[0]) : null;\n    const batteryData = data.batteryIds?.length > 0 ? getBatteryData(data.batteryIds[0]) : null;\n    \n    return {\n      solarPanelOptions: solarData ? [{\n        id: data.solarPanelTypeIds[0],\n        installationCost: solarData.cost,\n        annualGeneration: solarData.generation,\n        annualCostSavings: solarData.savings,\n        annualExportRevenue: solarData.export,\n        annualTotalCO2Savings: solarData.co2,\n        monthlyGeneration: solarData.monthlyData.generation,\n        monthlyCostSavings: solarData.monthlyData.savings,\n        monthlyExportRevenue: solarData.monthlyData.export,\n        monthlyDirectCO2Savings: solarData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: solarData.monthlyData.co2Indirect\n      }] : [],\n      \n      heatPumpOptions: heatPumpData ? [{\n        id: data.heatPumpTypeIds[0],\n        installationCost: heatPumpData.cost,\n        annualGeneration: 0,\n        annualCostSavings: heatPumpData.savings,\n        annualExportRevenue: 0,\n        annualTotalCO2Savings: heatPumpData.co2,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: heatPumpData.monthlyData.savings,\n        monthlyExportRevenue: new Array(12).fill(0),\n        monthlyDirectCO2Savings: heatPumpData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: heatPumpData.monthlyData.co2Indirect\n      }] : [],\n      \n      batteryOptions: batteryData ? [{\n        id: data.batteryIds[0],\n        installationCost: batteryData.cost,\n        annualGeneration: 0,\n        annualCostSavings: batteryData.savings,\n        annualExportRevenue: batteryData.exportReduction,\n        annualTotalCO2Savings: 0,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: batteryData.monthlyData.savings,\n        monthlyExportRevenue: batteryData.monthlyData.export,\n        monthlyDirectCO2Savings: batteryData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: batteryData.monthlyData.co2Indirect\n      }] : []\n    };\n  },\n\n  // 模拟政府补贴\n  getGovernmentSubsidies(data) {\n    const subsidies = [];\n    \n    // Heat Pump subsidies\n    if (data.hasHeatPump) {\n      subsidies.push({\n        subsidyId: \"bus-2024\",\n        name: \"Boiler Upgrade Scheme\",\n        shortDescription: \"Get £7,500 towards the cost of replacing your fossil fuel heating system with a heat pump\",\n        isEligible: true,\n        estimatedAmount: 7500,\n        deadline: \"2025-03-31\",\n        applicationUrl: \"https://www.gov.uk/apply-boiler-upgrade-scheme\"\n      });\n    }\n    \n    // Always include some general schemes\n    if (!data.hasHeatPump && !data.hasSolarPanels && !data.hasBattery) {\n      subsidies.push({\n        subsidyId: \"general-eco4-2024\",\n        name: \"ECO4 Scheme\",\n        shortDescription: \"Support for home energy efficiency improvements including insulation and heating upgrades\",\n        isEligible: false,\n        ineligibilityReason: \"Based on current configuration, no qualifying measures selected\",\n        applicationUrl: \"https://www.gov.uk/energy-company-obligation\"\n      });\n    }\n    \n    return {\n      availableSubsidies: subsidies,\n      totalPotentialSavings: subsidies.reduce((sum, s) => sum + (s.estimatedAmount || 0), 0),\n      applicableSubsidies: subsidies.filter(s => s.isEligible).length\n    };\n  },\n\n  // 获取完整计算结果\n  getCompleteCalculationResult(data) {\n    return {\n      solarInstallation: this.getSolarInstallationCost(data),\n      monthlyGeneration: this.getMonthlyElectricityGeneration(data),\n      monthlySavings: this.getMonthlySavings(data),\n      carbonSavings: this.getCarbonSavings(data),\n      paybackAnalysis: {\n        paybackPeriod: 8.5,\n        roi: 12.8,\n        netPresentValue: 8450,\n        internalRateOfReturn: 0.135\n      },\n      systemConfiguration: {\n        recommendedSystem: \"8.2kW Solar + 13.5kWh Battery\",\n        annualGeneration: 8220,\n        selfConsumption: 65,\n        exportToGrid: 35\n      }\n    };\n  },\n\n  // 获取热泵数据\n  getHeatPumps() {\n    return [\n      {\n        id: 1,\n        name: \"Air Source Heat Pump - Premium\",\n        type: \"air_source\",\n        capacity: 12.0,\n        cop: 4.2,\n        cost: 16000,\n        price: 16000,\n        installationCost: 3500\n      },\n      {\n        id: 2,\n        name: \"Air Source Heat Pump - Standard\", \n        type: \"air_source\",\n        capacity: 10.0,\n        cop: 3.8,\n        cost: 12500,\n        price: 12500,\n        installationCost: 3000\n      },\n      {\n        id: 3,\n        name: \"Air Source Heat Pump - Basic\",\n        type: \"air_source\", \n        capacity: 8.0,\n        cop: 3.5,\n        cost: 10000,\n        price: 10000,\n        installationCost: 2500\n      }\n    ];\n  },\n\n  // 获取电池存储系统\n  getBatteries() {\n    return [\n      {\n        id: 1,\n        name: \"Tesla Powerwall 2\",\n        capacityKwh: 13.5,\n        power: 5.0,\n        efficiency: 0.92,\n        cost: 8500,\n        price: 8500,\n        warranty: 10\n      },\n      {\n        id: 2,\n        name: \"LG Chem RESU\",\n        capacityKwh: 9.8,\n        power: 5.0,\n        efficiency: 0.90,\n        cost: 6200,\n        price: 6200,\n        warranty: 10\n      },\n      {\n        id: 3,\n        name: \"Sonnen Eco\",\n        capacityKwh: 10.0,\n        power: 3.3,\n        efficiency: 0.88,\n        cost: 7000,\n        price: 7000,\n        warranty: 10\n      }\n    ];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}