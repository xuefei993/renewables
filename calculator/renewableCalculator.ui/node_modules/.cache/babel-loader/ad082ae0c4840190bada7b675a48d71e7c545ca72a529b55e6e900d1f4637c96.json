{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/EnergyDemand.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ElectricityUsageSection from \"./energy-demand/ElectricityUsageSection\";\nimport HeatingSection from \"./energy-demand/HeatingSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnergyDemand = ({\n  data,\n  onDataChange,\n  onNext,\n  onBack\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    householdSize: data.householdSize || \"\",\n    knowsMonthlyUsage: data.knowsMonthlyUsage || \"\",\n    monthlyElectricityUsage: data.monthlyElectricityUsage || {\n      january: \"\",\n      february: \"\",\n      march: \"\",\n      april: \"\",\n      may: \"\",\n      june: \"\",\n      july: \"\",\n      august: \"\",\n      september: \"\",\n      october: \"\",\n      november: \"\",\n      december: \"\"\n    },\n    knowsAnnualUsage: data.knowsAnnualUsage || \"\",\n    annualElectricityUsage: data.annualElectricityUsage || \"\",\n    floorArea: data.floorArea || \"\",\n    heatingMethod: data.heatingMethod || \"\",\n    knowsMonthlyGasUsage: data.knowsMonthlyGasUsage || \"\",\n    monthlyGasUsage: data.monthlyGasUsage || {\n      january: \"\",\n      february: \"\",\n      march: \"\",\n      april: \"\",\n      may: \"\",\n      june: \"\",\n      july: \"\",\n      august: \"\",\n      september: \"\",\n      october: \"\",\n      november: \"\",\n      december: \"\"\n    },\n    knowsAnnualGasUsage: data.knowsAnnualGasUsage || \"\",\n    annualGasUsage: data.annualGasUsage || \"\",\n    heatPumpCOP: data.heatPumpCOP || \"3.0\",\n    ...data\n  });\n  const updateFormData = updates => {\n    setFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n    onDataChange(updates);\n  };\n\n  // Basic form handlers\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    updateFormData({\n      [name]: value\n    });\n  };\n\n  // Electricity usage handlers\n  const handleKnowsMonthlyUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsMonthlyUsage: value\n    };\n    if (value === \"yes\") {\n      updates.knowsAnnualUsage = \"\";\n      updates.annualElectricityUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsAnnualUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsAnnualUsage: value\n    };\n    if (value === \"yes\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleMonthlyElectricityChange = (month, value) => {\n    const updatedMonthlyUsage = {\n      ...formData.monthlyElectricityUsage,\n      [month]: value\n    };\n    updateFormData({\n      monthlyElectricityUsage: updatedMonthlyUsage\n    });\n  };\n  const handleAnnualElectricityChange = e => {\n    updateFormData({\n      annualElectricityUsage: e.target.value\n    });\n  };\n\n  // Heating method handlers\n  const handleHeatingMethodChange = e => {\n    const value = e.target.value;\n    let updates = {\n      heatingMethod: value,\n      knowsMonthlyGasUsage: \"\",\n      monthlyGasUsage: {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      },\n      knowsAnnualGasUsage: \"\",\n      annualGasUsage: \"\"\n    };\n    if (value !== \"heat pumps\") {\n      updates.heatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsMonthlyGasUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsMonthlyGasUsage: value\n    };\n    if (value === \"yes\") {\n      updates.knowsAnnualGasUsage = \"\";\n      updates.annualGasUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyGasUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsAnnualGasUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsAnnualGasUsage: value\n    };\n    if (value === \"yes\") {\n      updates.monthlyGasUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleMonthlyGasChange = (month, value) => {\n    const updatedMonthlyGasUsage = {\n      ...formData.monthlyGasUsage,\n      [month]: value\n    };\n    updateFormData({\n      monthlyGasUsage: updatedMonthlyGasUsage\n    });\n  };\n  const handleAnnualGasUsageChange = e => {\n    updateFormData({\n      annualGasUsage: e.target.value\n    });\n  };\n  const handleHeatPumpCOPChange = e => {\n    updateFormData({\n      heatPumpCOP: e.target.value\n    });\n  };\n  const handleNext = () => {\n    onNext();\n  };\n  const isFormValid = () => {\n    if (!formData.householdSize || !formData.knowsMonthlyUsage || !formData.floorArea || !formData.heatingMethod) {\n      return false;\n    }\n\n    // Validate electricity usage\n    if (formData.knowsMonthlyUsage === \"yes\") {\n      const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n      const electricityValid = months.every(month => formData.monthlyElectricityUsage[month] && formData.monthlyElectricityUsage[month].trim() !== \"\");\n      if (!electricityValid) return false;\n    } else if (formData.knowsMonthlyUsage === \"no\") {\n      if (!formData.knowsAnnualUsage) {\n        return false;\n      }\n      if (formData.knowsAnnualUsage === \"yes\" && !formData.annualElectricityUsage) {\n        return false;\n      }\n    }\n\n    // Validate heating method specific requirements\n    if (formData.heatingMethod === \"gas boiler\") {\n      if (!formData.knowsMonthlyGasUsage) {\n        return false;\n      }\n      if (formData.knowsMonthlyGasUsage === \"yes\") {\n        const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n        return months.every(month => formData.monthlyGasUsage[month] && formData.monthlyGasUsage[month].trim() !== \"\");\n      } else if (formData.knowsMonthlyGasUsage === \"no\") {\n        if (!formData.knowsAnnualGasUsage) {\n          return false;\n        }\n        if (formData.knowsAnnualGasUsage === \"yes\" && !formData.annualGasUsage) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tell us about your household's energy usage patterns to calculate accurate renewable energy recommendations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"householdSize\",\n        children: \"How many people live in your household regularly?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"householdSize\",\n        name: \"householdSize\",\n        value: formData.householdSize,\n        onChange: handleChange,\n        placeholder: \"Enter number of people\",\n        min: \"1\",\n        max: \"20\",\n        className: \"form-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ElectricityUsageSection, {\n      formData: formData,\n      onKnowsMonthlyUsageChange: handleKnowsMonthlyUsageChange,\n      onKnowsAnnualUsageChange: handleKnowsAnnualUsageChange,\n      onMonthlyElectricityChange: handleMonthlyElectricityChange,\n      onAnnualElectricityChange: handleAnnualElectricityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"floorArea\",\n        children: \"What is your approximate floor area? (m\\xB2)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"floorArea\",\n        name: \"floorArea\",\n        value: formData.floorArea,\n        onChange: handleChange,\n        placeholder: \"Enter floor area in square metres\",\n        min: \"1\",\n        step: \"0.1\",\n        className: \"form-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HeatingSection, {\n      formData: formData,\n      onHeatingMethodChange: handleHeatingMethodChange,\n      onKnowsMonthlyGasUsageChange: handleKnowsMonthlyGasUsageChange,\n      onKnowsAnnualGasUsageChange: handleKnowsAnnualGasUsageChange,\n      onMonthlyGasChange: handleMonthlyGasChange,\n      onAnnualGasUsageChange: handleAnnualGasUsageChange,\n      onHeatPumpCOPChange: handleHeatPumpCOPChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary\",\n        onClick: onBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `btn btn-primary ${!isFormValid() ? 'disabled' : ''}`,\n        onClick: handleNext,\n        disabled: !isFormValid(),\n        children: \"Next: Solar Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(EnergyDemand, \"SwSe43YX6PpfxhVh0BOBpTe+gl0=\");\n_c = EnergyDemand;\nexport default EnergyDemand;\nvar _c;\n$RefreshReg$(_c, \"EnergyDemand\");","map":{"version":3,"names":["React","useState","ElectricityUsageSection","HeatingSection","jsxDEV","_jsxDEV","EnergyDemand","data","onDataChange","onNext","onBack","_s","formData","setFormData","householdSize","knowsMonthlyUsage","monthlyElectricityUsage","january","february","march","april","may","june","july","august","september","october","november","december","knowsAnnualUsage","annualElectricityUsage","floorArea","heatingMethod","knowsMonthlyGasUsage","monthlyGasUsage","knowsAnnualGasUsage","annualGasUsage","heatPumpCOP","updateFormData","updates","prev","handleChange","e","name","value","target","handleKnowsMonthlyUsageChange","handleKnowsAnnualUsageChange","handleMonthlyElectricityChange","month","updatedMonthlyUsage","handleAnnualElectricityChange","handleHeatingMethodChange","handleKnowsMonthlyGasUsageChange","handleKnowsAnnualGasUsageChange","handleMonthlyGasChange","updatedMonthlyGasUsage","handleAnnualGasUsageChange","handleHeatPumpCOPChange","handleNext","isFormValid","months","electricityValid","every","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","min","max","required","onKnowsMonthlyUsageChange","onKnowsAnnualUsageChange","onMonthlyElectricityChange","onAnnualElectricityChange","step","onHeatingMethodChange","onKnowsMonthlyGasUsageChange","onKnowsAnnualGasUsageChange","onMonthlyGasChange","onAnnualGasUsageChange","onHeatPumpCOPChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/EnergyDemand.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ElectricityUsageSection from \"./energy-demand/ElectricityUsageSection\";\nimport HeatingSection from \"./energy-demand/HeatingSection\";\n\nconst EnergyDemand = ({ data, onDataChange, onNext, onBack }) => {\n  const [formData, setFormData] = useState({\n    householdSize: data.householdSize || \"\",\n    knowsMonthlyUsage: data.knowsMonthlyUsage || \"\",\n    monthlyElectricityUsage: data.monthlyElectricityUsage || {\n      january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n      july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n    },\n    knowsAnnualUsage: data.knowsAnnualUsage || \"\",\n    annualElectricityUsage: data.annualElectricityUsage || \"\",\n    floorArea: data.floorArea || \"\",\n    heatingMethod: data.heatingMethod || \"\",\n    knowsMonthlyGasUsage: data.knowsMonthlyGasUsage || \"\",\n    monthlyGasUsage: data.monthlyGasUsage || {\n      january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n      july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n    },\n    knowsAnnualGasUsage: data.knowsAnnualGasUsage || \"\",\n    annualGasUsage: data.annualGasUsage || \"\",\n    heatPumpCOP: data.heatPumpCOP || \"3.0\",\n    ...data\n  });\n\n  const updateFormData = (updates) => {\n    setFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n    onDataChange(updates);\n  };\n\n  // Basic form handlers\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    updateFormData({ [name]: value });\n  };\n\n  // Electricity usage handlers\n  const handleKnowsMonthlyUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsMonthlyUsage: value };\n    \n    if (value === \"yes\") {\n      updates.knowsAnnualUsage = \"\";\n      updates.annualElectricityUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsAnnualUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsAnnualUsage: value };\n    \n    if (value === \"yes\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleMonthlyElectricityChange = (month, value) => {\n    const updatedMonthlyUsage = {\n      ...formData.monthlyElectricityUsage,\n      [month]: value\n    };\n    updateFormData({ monthlyElectricityUsage: updatedMonthlyUsage });\n  };\n\n  const handleAnnualElectricityChange = (e) => {\n    updateFormData({ annualElectricityUsage: e.target.value });\n  };\n\n  // Heating method handlers\n  const handleHeatingMethodChange = (e) => {\n    const value = e.target.value;\n    let updates = { \n      heatingMethod: value,\n      knowsMonthlyGasUsage: \"\",\n      monthlyGasUsage: {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      },\n      knowsAnnualGasUsage: \"\",\n      annualGasUsage: \"\"\n    };\n    \n    if (value !== \"heat pumps\") {\n      updates.heatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsMonthlyGasUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsMonthlyGasUsage: value };\n    \n    if (value === \"yes\") {\n      updates.knowsAnnualGasUsage = \"\";\n      updates.annualGasUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyGasUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsAnnualGasUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsAnnualGasUsage: value };\n    \n    if (value === \"yes\") {\n      updates.monthlyGasUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleMonthlyGasChange = (month, value) => {\n    const updatedMonthlyGasUsage = {\n      ...formData.monthlyGasUsage,\n      [month]: value\n    };\n    updateFormData({ monthlyGasUsage: updatedMonthlyGasUsage });\n  };\n\n  const handleAnnualGasUsageChange = (e) => {\n    updateFormData({ annualGasUsage: e.target.value });\n  };\n\n  const handleHeatPumpCOPChange = (e) => {\n    updateFormData({ heatPumpCOP: e.target.value });\n  };\n\n  const handleNext = () => {\n    onNext();\n  };\n\n  const isFormValid = () => {\n    if (!formData.householdSize || !formData.knowsMonthlyUsage || !formData.floorArea || !formData.heatingMethod) {\n      return false;\n    }\n    \n    // Validate electricity usage\n    if (formData.knowsMonthlyUsage === \"yes\") {\n      const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \n                     \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n      const electricityValid = months.every(month => formData.monthlyElectricityUsage[month] && \n                                   formData.monthlyElectricityUsage[month].trim() !== \"\");\n      if (!electricityValid) return false;\n    } else if (formData.knowsMonthlyUsage === \"no\") {\n      if (!formData.knowsAnnualUsage) {\n        return false;\n      }\n      if (formData.knowsAnnualUsage === \"yes\" && !formData.annualElectricityUsage) {\n        return false;\n      }\n    }\n    \n    // Validate heating method specific requirements\n    if (formData.heatingMethod === \"gas boiler\") {\n      if (!formData.knowsMonthlyGasUsage) {\n        return false;\n      }\n      if (formData.knowsMonthlyGasUsage === \"yes\") {\n        const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \n                       \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n        return months.every(month => formData.monthlyGasUsage[month] && \n                                     formData.monthlyGasUsage[month].trim() !== \"\");\n      } else if (formData.knowsMonthlyGasUsage === \"no\") {\n        if (!formData.knowsAnnualGasUsage) {\n          return false;\n        }\n        if (formData.knowsAnnualGasUsage === \"yes\" && !formData.annualGasUsage) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  };\n\n  return (\n    <div className=\"step-container\">\n      <div className=\"step-header\">\n        <h2>Energy Demand</h2>\n        <p>Tell us about your household's energy usage patterns to calculate accurate renewable energy recommendations.</p>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"householdSize\">How many people live in your household regularly?</label>\n        <input\n          type=\"number\"\n          id=\"householdSize\"\n          name=\"householdSize\"\n          value={formData.householdSize}\n          onChange={handleChange}\n          placeholder=\"Enter number of people\"\n          min=\"1\"\n          max=\"20\"\n          className=\"form-input\"\n          required\n        />\n      </div>\n\n      <ElectricityUsageSection\n        formData={formData}\n        onKnowsMonthlyUsageChange={handleKnowsMonthlyUsageChange}\n        onKnowsAnnualUsageChange={handleKnowsAnnualUsageChange}\n        onMonthlyElectricityChange={handleMonthlyElectricityChange}\n        onAnnualElectricityChange={handleAnnualElectricityChange}\n      />\n\n      <div className=\"form-group\">\n        <label htmlFor=\"floorArea\">What is your approximate floor area? (m²)</label>\n        <input\n          type=\"number\"\n          id=\"floorArea\"\n          name=\"floorArea\"\n          value={formData.floorArea}\n          onChange={handleChange}\n          placeholder=\"Enter floor area in square metres\"\n          min=\"1\"\n          step=\"0.1\"\n          className=\"form-input\"\n          required\n        />\n      </div>\n\n      <HeatingSection\n        formData={formData}\n        onHeatingMethodChange={handleHeatingMethodChange}\n        onKnowsMonthlyGasUsageChange={handleKnowsMonthlyGasUsageChange}\n        onKnowsAnnualGasUsageChange={handleKnowsAnnualGasUsageChange}\n        onMonthlyGasChange={handleMonthlyGasChange}\n        onAnnualGasUsageChange={handleAnnualGasUsageChange}\n        onHeatPumpCOPChange={handleHeatPumpCOPChange}\n      />\n\n      <div className=\"button-group\">\n        <button \n          type=\"button\" \n          className=\"btn btn-secondary\"\n          onClick={onBack}\n        >\n          Back\n        </button>\n        <button \n          type=\"button\" \n          className={`btn btn-primary ${!isFormValid() ? 'disabled' : ''}`}\n          onClick={handleNext}\n          disabled={!isFormValid()}\n        >\n          Next: Solar Configuration\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EnergyDemand; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}