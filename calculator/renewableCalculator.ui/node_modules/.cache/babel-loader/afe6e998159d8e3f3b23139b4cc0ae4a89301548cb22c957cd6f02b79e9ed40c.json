{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE = \"http://localhost:8080/api\";\nexport const getComponents = type => axios.get(`${API_BASE}/${type}`);\nexport const calculate = data => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = data => axios.post(`${API_BASE}/solar-potential`, data);\n\n// New Location APIs\nexport const getAllRegions = () => axios.get(`${API_BASE}/locations/regions`);\nexport const getRegionsByCountry = country => axios.get(`${API_BASE}/locations/regions/country/${country}`);\nexport const searchCitiesByName = name => axios.get(`${API_BASE}/locations/cities/search?name=${name}`);\nexport const searchCitiesByPostcode = prefix => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`);\nexport const getCitiesByCountry = country => axios.get(`${API_BASE}/locations/cities/country/${country}`);\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => axios.post(`${API_BASE}/nasa-power/solar-data`, {\n  latitude,\n  longitude,\n  location\n});\nexport const fetchSolarDataGet = (latitude, longitude, location) => axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = data => axios.post(`${API_BASE}/location-yield/calculate`, data);\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = data => axios.post(`${API_BASE}/solar-capacity/calculate`, data);\nexport const getAllSolarPanelTypes = () => axios.get(`${API_BASE}/solar-capacity/panel-types`);\nexport const getSolarPanelTypeById = id => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`);\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = data => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = data => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\nexport const validateMonthlyElectricityUsage = monthlyUsage => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);","map":{"version":3,"names":["axios","API_BASE","getComponents","type","get","calculate","data","post","calculateSolarPotential","getAllRegions","getRegionsByCountry","country","searchCitiesByName","name","searchCitiesByPostcode","prefix","getCitiesByCountry","fetchSolarData","latitude","longitude","location","fetchSolarDataGet","calculateLocationSpecificYield","calculateLocationSpecificYieldForMonth","month","calculateTotalInstalledCapacity","getAllSolarPanelTypes","getSolarPanelTypeById","id","calculateMonthlyElectricityGeneration","calculateElectricityDemand","getElectricityDemandProportions","validateMonthlyElectricityUsage","monthlyUsage"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE = \"http://localhost:8080/api\";\n\nexport const getComponents = (type) => axios.get(`${API_BASE}/${type}`);\nexport const calculate = (data) => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = (data) => axios.post(`${API_BASE}/solar-potential`, data);\n\n// New Location APIs\nexport const getAllRegions = () => axios.get(`${API_BASE}/locations/regions`);\n\nexport const getRegionsByCountry = (country) => axios.get(`${API_BASE}/locations/regions/country/${country}`);\n\nexport const searchCitiesByName = (name) => axios.get(`${API_BASE}/locations/cities/search?name=${name}`);\n\nexport const searchCitiesByPostcode = (prefix) => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`);\n\nexport const getCitiesByCountry = (country) => axios.get(`${API_BASE}/locations/cities/country/${country}`);\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => \n    axios.post(`${API_BASE}/nasa-power/solar-data`, { latitude, longitude, location });\n\nexport const fetchSolarDataGet = (latitude, longitude, location) => \n    axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = (data) => axios.post(`${API_BASE}/location-yield/calculate`, data);\n\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => \n    axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = (data) => axios.post(`${API_BASE}/solar-capacity/calculate`, data);\n\nexport const getAllSolarPanelTypes = () => axios.get(`${API_BASE}/solar-capacity/panel-types`);\n\nexport const getSolarPanelTypeById = (id) => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`);\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = (data) => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = (data) => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\n\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\n\nexport const validateMonthlyElectricityUsage = (monthlyUsage) => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}