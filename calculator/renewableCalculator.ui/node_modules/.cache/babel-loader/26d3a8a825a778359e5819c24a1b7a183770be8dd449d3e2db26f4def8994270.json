{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/RoofConfigurationForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { calculateSolarPotential } from '../../../api';\nimport { getNextRoofNumber } from './roofLabelUtils';\nimport RoofConfigForm from './RoofConfigForm';\nimport SolarPotentialCalculation from './SolarPotentialCalculation';\nimport AddedRoofsList from './AddedRoofsList';\nimport RoofHelpModals from './RoofHelpModals';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RoofConfigurationForm = ({\n  roofConfig,\n  onConfigChange,\n  projectedArea,\n  actualRoofArea,\n  visible = true,\n  addedRoofs = [],\n  onRoofsUpdate,\n  onClearMeasurement,\n  onAddAnotherRoof\n}) => {\n  _s();\n  const [showAngleTooltip, setShowAngleTooltip] = useState(false);\n  const [showShadingTooltip, setShowShadingTooltip] = useState(false);\n  const [showUtilisationTooltip, setShowUtilisationTooltip] = useState(false);\n  const [solarPotentialResult, setSolarPotentialResult] = useState(null);\n  const [showPotentialResults, setShowPotentialResults] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  if (!visible) return null;\n\n  // Determine which area to display\n  const displayArea = actualRoofArea || projectedArea;\n  const currentRoofNumber = getNextRoofNumber(addedRoofs);\n\n  // Check if all required fields are filled for solar potential calculation\n  const isReadyForCalculation = () => {\n    return displayArea > 0 && roofConfig.roofOrientation && roofConfig.roofAngle !== '' && roofConfig.roofShading && roofConfig.roofUtilisation;\n  };\n  const handleSolarPotentialCalculation = async () => {\n    if (!isReadyForCalculation()) return;\n    setIsCalculating(true);\n    try {\n      const request = {\n        roofSize: displayArea,\n        shadingLevel: roofConfig.roofShading,\n        utilisationLevel: roofConfig.roofUtilisation,\n        tiltAngle: parseInt(roofConfig.roofAngle),\n        orientation: roofConfig.roofOrientation\n      };\n      const response = await calculateSolarPotential(request);\n\n      // Transform backend response to match frontend format\n      const result = {\n        solarPotential: parseFloat(response.data.solarPotential),\n        factors: {\n          shading: parseFloat(response.data.shadingFactor),\n          utilisation: parseFloat(response.data.utilisationFactor),\n          tiltOrientation: parseFloat(response.data.tiltOrientationFactor)\n        }\n      };\n      setSolarPotentialResult(result);\n      setShowPotentialResults(true);\n    } catch (error) {\n      console.error('Error calculating solar potential:', error);\n      // Fallback to a default result or show error message\n      alert('Failed to calculate solar potential. Please try again.');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n  const handleAddRoof = () => {\n    if (!solarPotentialResult) return;\n    const newRoof = {\n      id: currentRoofNumber,\n      area: displayArea,\n      orientation: roofConfig.roofOrientation,\n      angle: roofConfig.roofAngle,\n      shading: roofConfig.roofShading,\n      utilisation: roofConfig.roofUtilisation,\n      solarPotential: solarPotentialResult.solarPotential,\n      config: {\n        ...roofConfig\n      },\n      selected: true // Default to selected for installation\n    };\n    const updatedRoofs = [...addedRoofs, newRoof];\n    onRoofsUpdate(updatedRoofs);\n\n    // Reset states but keep current measurement visible\n    setShowPotentialResults(false);\n    setSolarPotentialResult(null);\n\n    // Clear current configuration but keep the measurement\n    onConfigChange('roofOrientation', '');\n    onConfigChange('roofAngle', '');\n    onConfigChange('roofShading', '');\n    onConfigChange('roofUtilisation', '');\n  };\n  const handleRemoveRoof = roofId => {\n    const updatedRoofs = addedRoofs.filter(roof => roof.id !== roofId);\n    onRoofsUpdate(updatedRoofs);\n  };\n\n  // Tooltip handlers\n  const toggleAngleTooltip = () => setShowAngleTooltip(!showAngleTooltip);\n  const toggleShadingTooltip = () => setShowShadingTooltip(!showShadingTooltip);\n  const toggleUtilisationTooltip = () => setShowUtilisationTooltip(!showUtilisationTooltip);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roof-configuration\",\n    children: [projectedArea > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Roof \", currentRoofNumber, \" Details\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roof-size-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"roof-size-label\",\n          children: \"Roof Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"roof-size-value\",\n          children: [displayArea.toFixed(2), \" m\\xB2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RoofConfigForm, {\n        roofConfig: roofConfig,\n        onConfigChange: onConfigChange,\n        onShowAngleTooltip: toggleAngleTooltip,\n        onShowShadingTooltip: toggleShadingTooltip,\n        onShowUtilisationTooltip: toggleUtilisationTooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SolarPotentialCalculation, {\n        isReadyForCalculation: isReadyForCalculation(),\n        onCalculate: handleSolarPotentialCalculation,\n        showResults: showPotentialResults,\n        result: solarPotentialResult,\n        currentRoofNumber: currentRoofNumber,\n        onAddRoof: handleAddRoof,\n        isCalculating: isCalculating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(AddedRoofsList, {\n      addedRoofs: addedRoofs,\n      onRemoveRoof: handleRemoveRoof,\n      showTotal: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoofHelpModals, {\n      showAngleTooltip: showAngleTooltip,\n      showShadingTooltip: showShadingTooltip,\n      showUtilisationTooltip: showUtilisationTooltip,\n      onToggleAngleTooltip: toggleAngleTooltip,\n      onToggleShadingTooltip: toggleShadingTooltip,\n      onToggleUtilisationTooltip: toggleUtilisationTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(RoofConfigurationForm, \"Z0Mk2d3ujveiYZ2Jbju8JOgvFIY=\");\n_c = RoofConfigurationForm;\nexport default RoofConfigurationForm;\nvar _c;\n$RefreshReg$(_c, \"RoofConfigurationForm\");","map":{"version":3,"names":["React","useState","calculateSolarPotential","getNextRoofNumber","RoofConfigForm","SolarPotentialCalculation","AddedRoofsList","RoofHelpModals","jsxDEV","_jsxDEV","Fragment","_Fragment","RoofConfigurationForm","roofConfig","onConfigChange","projectedArea","actualRoofArea","visible","addedRoofs","onRoofsUpdate","onClearMeasurement","onAddAnotherRoof","_s","showAngleTooltip","setShowAngleTooltip","showShadingTooltip","setShowShadingTooltip","showUtilisationTooltip","setShowUtilisationTooltip","solarPotentialResult","setSolarPotentialResult","showPotentialResults","setShowPotentialResults","isCalculating","setIsCalculating","displayArea","currentRoofNumber","isReadyForCalculation","roofOrientation","roofAngle","roofShading","roofUtilisation","handleSolarPotentialCalculation","request","roofSize","shadingLevel","utilisationLevel","tiltAngle","parseInt","orientation","response","result","solarPotential","parseFloat","data","factors","shading","shadingFactor","utilisation","utilisationFactor","tiltOrientation","tiltOrientationFactor","error","console","alert","handleAddRoof","newRoof","id","area","angle","config","selected","updatedRoofs","handleRemoveRoof","roofId","filter","roof","toggleAngleTooltip","toggleShadingTooltip","toggleUtilisationTooltip","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onShowAngleTooltip","onShowShadingTooltip","onShowUtilisationTooltip","onCalculate","showResults","onAddRoof","onRemoveRoof","showTotal","onToggleAngleTooltip","onToggleShadingTooltip","onToggleUtilisationTooltip","_c","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/RoofConfigurationForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { calculateSolarPotential } from '../../../api';\nimport { getNextRoofNumber } from './roofLabelUtils';\nimport RoofConfigForm from './RoofConfigForm';\nimport SolarPotentialCalculation from './SolarPotentialCalculation';\nimport AddedRoofsList from './AddedRoofsList';\nimport RoofHelpModals from './RoofHelpModals';\n\nconst RoofConfigurationForm = ({ \n  roofConfig, \n  onConfigChange, \n  projectedArea, \n  actualRoofArea, \n  visible = true, \n  addedRoofs = [], \n  onRoofsUpdate, \n  onClearMeasurement,\n  onAddAnotherRoof\n}) => {\n  const [showAngleTooltip, setShowAngleTooltip] = useState(false);\n  const [showShadingTooltip, setShowShadingTooltip] = useState(false);\n  const [showUtilisationTooltip, setShowUtilisationTooltip] = useState(false);\n  const [solarPotentialResult, setSolarPotentialResult] = useState(null);\n  const [showPotentialResults, setShowPotentialResults] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  \n  if (!visible) return null;\n\n  // Determine which area to display\n  const displayArea = actualRoofArea || projectedArea;\n  const currentRoofNumber = getNextRoofNumber(addedRoofs);\n\n  // Check if all required fields are filled for solar potential calculation\n  const isReadyForCalculation = () => {\n    return displayArea > 0 &&\n           roofConfig.roofOrientation &&\n           roofConfig.roofAngle !== '' &&\n           roofConfig.roofShading &&\n           roofConfig.roofUtilisation;\n  };\n\n  const handleSolarPotentialCalculation = async () => {\n    if (!isReadyForCalculation()) return;\n\n    setIsCalculating(true);\n    try {\n      const request = {\n        roofSize: displayArea,\n        shadingLevel: roofConfig.roofShading,\n        utilisationLevel: roofConfig.roofUtilisation,\n        tiltAngle: parseInt(roofConfig.roofAngle),\n        orientation: roofConfig.roofOrientation\n      };\n\n      const response = await calculateSolarPotential(request);\n      \n      // Transform backend response to match frontend format\n      const result = {\n        solarPotential: parseFloat(response.data.solarPotential),\n        factors: {\n          shading: parseFloat(response.data.shadingFactor),\n          utilisation: parseFloat(response.data.utilisationFactor),\n          tiltOrientation: parseFloat(response.data.tiltOrientationFactor)\n        }\n      };\n\n      setSolarPotentialResult(result);\n      setShowPotentialResults(true);\n    } catch (error) {\n      console.error('Error calculating solar potential:', error);\n      // Fallback to a default result or show error message\n      alert('Failed to calculate solar potential. Please try again.');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const handleAddRoof = () => {\n    if (!solarPotentialResult) return;\n\n    const newRoof = {\n      id: currentRoofNumber,\n      area: displayArea,\n      orientation: roofConfig.roofOrientation,\n      angle: roofConfig.roofAngle,\n      shading: roofConfig.roofShading,\n      utilisation: roofConfig.roofUtilisation,\n      solarPotential: solarPotentialResult.solarPotential,\n      config: { ...roofConfig },\n      selected: true // Default to selected for installation\n    };\n\n    const updatedRoofs = [...addedRoofs, newRoof];\n    onRoofsUpdate(updatedRoofs);\n    \n    // Reset states but keep current measurement visible\n    setShowPotentialResults(false);\n    setSolarPotentialResult(null);\n    \n    // Clear current configuration but keep the measurement\n    onConfigChange('roofOrientation', '');\n    onConfigChange('roofAngle', '');\n    onConfigChange('roofShading', '');\n    onConfigChange('roofUtilisation', '');\n  };\n\n  const handleRemoveRoof = (roofId) => {\n    const updatedRoofs = addedRoofs.filter(roof => roof.id !== roofId);\n    onRoofsUpdate(updatedRoofs);\n  };\n\n  // Tooltip handlers\n  const toggleAngleTooltip = () => setShowAngleTooltip(!showAngleTooltip);\n  const toggleShadingTooltip = () => setShowShadingTooltip(!showShadingTooltip);\n  const toggleUtilisationTooltip = () => setShowUtilisationTooltip(!showUtilisationTooltip);\n\n  return (\n    <div className=\"roof-configuration\">\n      {/* Current Roof Configuration - Only show when measuring a new roof */}\n      {projectedArea > 0 && (\n        <>\n          <h4>Roof {currentRoofNumber} Details</h4>\n          \n          {/* Roof Size Display */}\n          <div className=\"roof-size-display\">\n            <span className=\"roof-size-label\">Roof Size:</span>\n            <strong className=\"roof-size-value\">{displayArea.toFixed(2)} m²</strong>\n          </div>\n          \n          <RoofConfigForm\n            roofConfig={roofConfig}\n            onConfigChange={onConfigChange}\n            onShowAngleTooltip={toggleAngleTooltip}\n            onShowShadingTooltip={toggleShadingTooltip}\n            onShowUtilisationTooltip={toggleUtilisationTooltip}\n          />\n\n          <SolarPotentialCalculation\n            isReadyForCalculation={isReadyForCalculation()}\n            onCalculate={handleSolarPotentialCalculation}\n            showResults={showPotentialResults}\n            result={solarPotentialResult}\n            currentRoofNumber={currentRoofNumber}\n            onAddRoof={handleAddRoof}\n            isCalculating={isCalculating}\n          />\n        </>\n      )}\n\n      {/* Added Roofs Display */}\n      <AddedRoofsList \n        addedRoofs={addedRoofs} \n        onRemoveRoof={handleRemoveRoof}\n        showTotal={false}\n      />\n\n      {/* Help Modals */}\n      <RoofHelpModals\n        showAngleTooltip={showAngleTooltip}\n        showShadingTooltip={showShadingTooltip}\n        showUtilisationTooltip={showUtilisationTooltip}\n        onToggleAngleTooltip={toggleAngleTooltip}\n        onToggleShadingTooltip={toggleShadingTooltip}\n        onToggleUtilisationTooltip={toggleUtilisationTooltip}\n      />\n    </div>\n  );\n};\n\nexport default RoofConfigurationForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}