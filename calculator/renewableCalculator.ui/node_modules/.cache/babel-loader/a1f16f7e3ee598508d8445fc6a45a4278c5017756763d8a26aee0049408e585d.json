{"ast":null,"code":"// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService={// 获取NASA Power太阳辐照数据\nasync getSolarRadiationData(latitude,longitude){let years=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;// 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\nconst currentDate=new Date();const currentYear=currentDate.getFullYear();const endYear=currentYear-1;// 总是使用前一年\nconst startYear=endYear-years+1;// 确保不会请求太早的数据（NASA POWER数据从1981年开始）\nconst actualStartYear=Math.max(startYear,1981);try{// 使用NASA POWER API v2.0的正确格式\nconst url=\"https://power.larc.nasa.gov/api/temporal/monthly/point?\"+\"parameters=ALLSKY_SFC_SW_DWN&\"+\"community=RE&\"+\"longitude=\".concat(longitude,\"&\")+\"latitude=\".concat(latitude,\"&\")+\"start=\".concat(actualStartYear,\"&\")+// 移除0101后缀\n\"end=\".concat(endYear,\"&\")+// 移除1231后缀\n\"format=JSON\";console.log('NASA POWER API URL:',url);console.log(\"Date range: \".concat(actualStartYear,\"-\").concat(endYear,\" (\").concat(endYear-actualStartYear+1,\" years)\"));const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json','User-Agent':'RenewableCalculator/1.0'}});if(response.ok){const data=await response.json();console.log('NASA POWER response structure:',Object.keys(data));console.log('NASA POWER response:',data);if(data.properties&&data.properties.parameter&&data.properties.parameter.ALLSKY_SFC_SW_DWN){return{success:true,data:data.properties.parameter.ALLSKY_SFC_SW_DWN,info:data.properties.parameter};}else{console.error('Unexpected NASA response structure:',data);return{success:false,error:'Invalid NASA API response structure'};}}// 尝试解析错误响应\nlet errorMessage=\"NASA API error: \".concat(response.status,\" \").concat(response.statusText);try{const errorData=await response.json();console.log('NASA API error response:',errorData);if(errorData.error&&errorData.error.message){errorMessage+=\" - \".concat(errorData.error.message);}else if(errorData.header){errorMessage+=\" - \".concat(errorData.header);}else if(errorData.messages&&errorData.messages.length>0){errorMessage+=\" - \".concat(errorData.messages.join(', '));}}catch(e){console.log('Could not parse error response');}return{success:false,error:errorMessage};}catch(error){console.error('NASA API Error:',error);return{success:false,error:'Network error: '+error.message};}},// 获取Open Meteo气温数据\nasync getTemperatureData(latitude,longitude){let years=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;// 使用相同的日期逻辑\nconst currentDate=new Date();const currentYear=currentDate.getFullYear();const endYear=currentYear-1;// 总是使用前一年\nconst startYear=endYear-years+1;const endDate=\"\".concat(endYear,\"-12-31\");const startDate=\"\".concat(startYear,\"-01-01\");try{const url=\"https://archive-api.open-meteo.com/v1/archive?\"+\"latitude=\".concat(latitude,\"&\")+\"longitude=\".concat(longitude,\"&\")+\"start_date=\".concat(startDate,\"&\")+\"end_date=\".concat(endDate,\"&\")+\"daily=temperature_2m_mean&\"+\"timezone=Europe/London\";console.log('Open-Meteo API URL:',url);console.log(\"Date range: \".concat(startDate,\" to \").concat(endDate));const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json'}});if(response.ok){const data=await response.json();console.log('Open-Meteo response keys:',Object.keys(data));if(data.daily&&data.daily.time&&data.daily.temperature_2m_mean){return{success:true,data:data.daily,timezone:data.timezone||'Europe/London'};}else{return{success:false,error:'Invalid Open-Meteo API response structure'};}}// 尝试解析错误响应\nlet errorMessage=\"Open Meteo API error: \".concat(response.status,\" \").concat(response.statusText);try{const errorData=await response.json();console.log('Open-Meteo API error response:',errorData);if(errorData.reason){errorMessage+=\" - \".concat(errorData.reason);}}catch(e){// 如果无法解析错误响应，使用默认错误信息\n}return{success:false,error:errorMessage};}catch(error){console.error('Open Meteo API Error:',error);return{success:false,error:'Network error: '+error.message};}},// 尝试使用备用的简化NASA API调用\nasync getSolarRadiationDataSimple(latitude,longitude){try{// 使用更简单的参数格式\nconst url=\"https://power.larc.nasa.gov/api/temporal/climatology/point?\"+\"parameters=ALLSKY_SFC_SW_DWN&\"+\"community=RE&\"+\"longitude=\".concat(longitude,\"&\")+\"latitude=\".concat(latitude,\"&\")+\"format=JSON\";console.log('NASA POWER Simple API URL:',url);const response=await fetch(url);if(response.ok){const data=await response.json();console.log('NASA POWER Simple response:',data);if(data.properties&&data.properties.parameter&&data.properties.parameter.ALLSKY_SFC_SW_DWN){// 转换climatology数据为月度格式\nconst monthlyData=Object.entries(data.properties.parameter.ALLSKY_SFC_SW_DWN).map(_ref=>{let[month,value]=_ref;return{month:parseInt(month),value:parseFloat(value)};}).sort((a,b)=>a.month-b.month);return{success:true,data:monthlyData,isClimatology:true};}}return{success:false,error:\"Simple NASA API error: \".concat(response.status)};}catch(error){return{success:false,error:'Simple NASA API network error: '+error.message};}},// 处理NASA数据为月度数据\nprocessSolarData(nasaData){let isClimatology=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];console.log('Processing NASA solar data:',nasaData);if(isClimatology){// 处理climatology数据 (月度平均值)\nreturn months.map((month,index)=>{var _nasaData$find;return{month,value:((_nasaData$find=nasaData.find(d=>d.month===index+1))===null||_nasaData$find===void 0?void 0:_nasaData$find.value)||0};});}// 处理时间序列数据\nconst monthlyData=months.map((month,index)=>{const monthNum=String(index+1).padStart(2,'0');// 找到该月份的所有年份数据\nconst monthValues=Object.entries(nasaData).filter(_ref2=>{let[key]=_ref2;return key.endsWith(monthNum);}).map(_ref3=>{let[,value]=_ref3;return parseFloat(value);}).filter(value=>!isNaN(value)&&value>=0);console.log(\"\".concat(month,\" (\").concat(monthNum,\"):\"),monthValues);// 计算平均值\nconst avgValue=monthValues.length>0?monthValues.reduce((sum,val)=>sum+val,0)/monthValues.length:0;return{month,value:Math.round(avgValue*100)/100};});console.log('Processed solar data:',monthlyData);return monthlyData;},// 处理Open Meteo温度数据为月度平均值\nprocessTemperatureData(openMeteoData){if(!openMeteoData.time||!openMeteoData.temperature_2m_mean){console.error('Invalid temperature data structure:',openMeteoData);return[];}const months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];console.log(\"Processing \".concat(openMeteoData.time.length,\" temperature data points\"));// 按月份分组数据\nconst monthlyGroups=Array(12).fill(null).map(()=>[]);openMeteoData.time.forEach((date,index)=>{const temp=openMeteoData.temperature_2m_mean[index];if(temp!==null&&!isNaN(temp)){const month=new Date(date).getMonth();// 0-11\nmonthlyGroups[month].push(parseFloat(temp));}});// 计算每月平均值\nconst monthlyData=months.map((month,index)=>{const temps=monthlyGroups[index];const avgTemp=temps.length>0?temps.reduce((sum,temp)=>sum+temp,0)/temps.length:0;return{month,value:Math.round(avgTemp*100)/100};});console.log('Processed temperature data:',monthlyData);return monthlyData;},// 获取完整的气候数据\nasync getCompleteClimateData(latitude,longitude){try{console.log(\"Fetching climate data for coordinates: \".concat(latitude,\", \").concat(longitude));// 首先尝试标准API，如果失败则尝试简化API\nlet solarResult=await this.getSolarRadiationData(latitude,longitude);// 如果标准API失败，尝试简化的climatology API\nif(!solarResult.success){console.log('Standard NASA API failed, trying simple climatology API...');solarResult=await this.getSolarRadiationDataSimple(latitude,longitude);}// 并行获取温度数据\nconst tempResult=await this.getTemperatureData(latitude,longitude);console.log('Solar API result:',solarResult);console.log('Temperature API result:',tempResult);if(!solarResult.success){throw new Error(\"Solar data: \".concat(solarResult.error));}if(!tempResult.success){throw new Error(\"Temperature data: \".concat(tempResult.error));}// 处理数据\nconst solarData=this.processSolarData(solarResult.data,solarResult.isClimatology);const temperatureData=this.processTemperatureData(tempResult.data);// 验证处理后的数据\nif(solarData.length===0){throw new Error('No valid solar radiation data after processing');}if(temperatureData.length===0){throw new Error('No valid temperature data after processing');}console.log('Final processed solar data:',solarData);console.log('Final processed temperature data:',temperatureData);return{success:true,data:{solar:solarData,temperature:temperatureData}};}catch(error){console.error('Complete climate data error:',error);return{success:false,error:error.message};}}};","map":{"version":3,"names":["weatherService","getSolarRadiationData","latitude","longitude","years","arguments","length","undefined","currentDate","Date","currentYear","getFullYear","endYear","startYear","actualStartYear","Math","max","url","concat","console","log","response","fetch","method","headers","ok","data","json","Object","keys","properties","parameter","ALLSKY_SFC_SW_DWN","success","info","error","errorMessage","status","statusText","errorData","message","header","messages","join","e","getTemperatureData","endDate","startDate","daily","time","temperature_2m_mean","timezone","reason","getSolarRadiationDataSimple","monthlyData","entries","map","_ref","month","value","parseInt","parseFloat","sort","a","b","isClimatology","processSolarData","nasaData","months","index","_nasaData$find","find","d","monthNum","String","padStart","monthValues","filter","_ref2","key","endsWith","_ref3","isNaN","avgValue","reduce","sum","val","round","processTemperatureData","openMeteoData","monthlyGroups","Array","fill","forEach","date","temp","getMonth","push","temps","avgTemp","getCompleteClimateData","solarResult","tempResult","Error","solarData","temperatureData","solar","temperature"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/weatherService.js"],"sourcesContent":["// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据\n  async getSolarRadiationData(latitude, longitude, years = 5) {\n    // 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    // 确保不会请求太早的数据（NASA POWER数据从1981年开始）\n    const actualStartYear = Math.max(startYear, 1981);\n    \n    try {\n      // 使用NASA POWER API v2.0的正确格式\n      const url = `https://power.larc.nasa.gov/api/temporal/monthly/point?` +\n        `parameters=ALLSKY_SFC_SW_DWN&` +\n        `community=RE&` +\n        `longitude=${longitude}&` +\n        `latitude=${latitude}&` +\n        `start=${actualStartYear}&` +  // 移除0101后缀\n        `end=${endYear}&` +            // 移除1231后缀\n        `format=JSON`;\n      \n      console.log('NASA POWER API URL:', url);\n      console.log(`Date range: ${actualStartYear}-${endYear} (${endYear - actualStartYear + 1} years)`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'RenewableCalculator/1.0'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER response structure:', Object.keys(data));\n        console.log('NASA POWER response:', data);\n        \n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          return { \n            success: true, \n            data: data.properties.parameter.ALLSKY_SFC_SW_DWN,\n            info: data.properties.parameter\n          };\n        } else {\n          console.error('Unexpected NASA response structure:', data);\n          return { success: false, error: 'Invalid NASA API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `NASA API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('NASA API error response:', errorData);\n        if (errorData.error && errorData.error.message) {\n          errorMessage += ` - ${errorData.error.message}`;\n        } else if (errorData.header) {\n          errorMessage += ` - ${errorData.header}`;\n        } else if (errorData.messages && errorData.messages.length > 0) {\n          errorMessage += ` - ${errorData.messages.join(', ')}`;\n        }\n      } catch (e) {\n        console.log('Could not parse error response');\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('NASA API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 获取Open Meteo气温数据\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    \n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` +\n        `latitude=${latitude}&` +\n        `longitude=${longitude}&` +\n        `start_date=${startDate}&` +\n        `end_date=${endDate}&` +\n        `daily=temperature_2m_mean&` +\n        `timezone=Europe/London`;\n      \n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        \n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return { \n            success: true, \n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return { success: false, error: 'Invalid Open-Meteo API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 尝试使用备用的简化NASA API调用\n  async getSolarRadiationDataSimple(latitude, longitude) {\n    try {\n      // 使用更简单的参数格式\n      const url = `https://power.larc.nasa.gov/api/temporal/climatology/point?` +\n        `parameters=ALLSKY_SFC_SW_DWN&` +\n        `community=RE&` +\n        `longitude=${longitude}&` +\n        `latitude=${latitude}&` +\n        `format=JSON`;\n      \n      console.log('NASA POWER Simple API URL:', url);\n      \n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER Simple response:', data);\n        \n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          // 转换climatology数据为月度格式\n          const monthlyData = Object.entries(data.properties.parameter.ALLSKY_SFC_SW_DWN)\n            .map(([month, value]) => ({\n              month: parseInt(month),\n              value: parseFloat(value)\n            }))\n            .sort((a, b) => a.month - b.month);\n          \n          return { \n            success: true, \n            data: monthlyData,\n            isClimatology: true\n          };\n        }\n      }\n      \n      return { success: false, error: `Simple NASA API error: ${response.status}` };\n    } catch (error) {\n      return { success: false, error: 'Simple NASA API network error: ' + error.message };\n    }\n  },\n\n  // 处理NASA数据为月度数据\n  processSolarData(nasaData, isClimatology = false) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log('Processing NASA solar data:', nasaData);\n    \n    if (isClimatology) {\n      // 处理climatology数据 (月度平均值)\n      return months.map((month, index) => ({\n        month,\n        value: nasaData.find(d => d.month === index + 1)?.value || 0\n      }));\n    }\n    \n    // 处理时间序列数据\n    const monthlyData = months.map((month, index) => {\n      const monthNum = String(index + 1).padStart(2, '0');\n      \n      // 找到该月份的所有年份数据\n      const monthValues = Object.entries(nasaData)\n        .filter(([key]) => key.endsWith(monthNum))\n        .map(([, value]) => parseFloat(value))\n        .filter(value => !isNaN(value) && value >= 0);\n      \n      console.log(`${month} (${monthNum}):`, monthValues);\n      \n      // 计算平均值\n      const avgValue = monthValues.length > 0 \n        ? monthValues.reduce((sum, val) => sum + val, 0) / monthValues.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgValue * 100) / 100\n      };\n    });\n\n    console.log('Processed solar data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 处理Open Meteo温度数据为月度平均值\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n    \n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    \n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 \n        ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 获取完整的气候数据\n  async getCompleteClimateData(latitude, longitude) {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n      \n      // 首先尝试标准API，如果失败则尝试简化API\n      let solarResult = await this.getSolarRadiationData(latitude, longitude);\n      \n      // 如果标准API失败，尝试简化的climatology API\n      if (!solarResult.success) {\n        console.log('Standard NASA API failed, trying simple climatology API...');\n        solarResult = await this.getSolarRadiationDataSimple(latitude, longitude);\n      }\n      \n      // 并行获取温度数据\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n\n      console.log('Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据\n      const solarData = this.processSolarData(solarResult.data, solarResult.isClimatology);\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        }\n      };\n\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}