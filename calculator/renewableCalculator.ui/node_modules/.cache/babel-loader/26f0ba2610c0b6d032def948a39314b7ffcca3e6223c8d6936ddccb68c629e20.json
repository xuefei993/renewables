{"ast":null,"code":"// Roof label conversion utilities\n\nexport const getOrientationLabel = orientation => {\n  const labels = {\n    'n': 'North',\n    'ne': 'Northeast',\n    'ene': 'East-Northeast',\n    'e': 'East',\n    'ese': 'East-Southeast',\n    'se': 'Southeast',\n    's': 'South',\n    'sw': 'Southwest',\n    'wsw': 'West-Southwest',\n    'w': 'West',\n    'wnw': 'West-Northwest',\n    'nw': 'Northwest'\n  };\n  return labels[orientation] || orientation;\n};\nexport const getShadingLabel = shading => {\n  const labels = {\n    'no-shading': 'No Shading',\n    'light': 'Light',\n    'moderate': 'Moderate',\n    'heavy': 'Heavy',\n    'extreme': 'Extreme'\n  };\n  return labels[shading] || shading;\n};\nexport const getUtilisationLabel = utilisation => {\n  const labels = {\n    'minimal-obstacles': 'Minimal Obstacles',\n    'slightly-complex': 'Slightly Complex',\n    'moderately-complex': 'Moderately Complex',\n    'highly-complex': 'Highly Complex',\n    'extremely-complex': 'Extremely Complex'\n  };\n  return labels[utilisation] || utilisation;\n};\n\n// Generate roof angle options from 0 to 90 in increments of 10\nexport const getRoofAngleOptions = () => Array.from({\n  length: 10\n}, (_, i) => i * 10);\n\n// Get next roof number (highest existing ID + 1)\nexport const getNextRoofNumber = addedRoofs => {\n  if (addedRoofs.length === 0) return 1;\n  return Math.max(...addedRoofs.map(roof => roof.id)) + 1;\n};","map":{"version":3,"names":["getOrientationLabel","orientation","labels","getShadingLabel","shading","getUtilisationLabel","utilisation","getRoofAngleOptions","Array","from","length","_","i","getNextRoofNumber","addedRoofs","Math","max","map","roof","id"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/roofLabelUtils.js"],"sourcesContent":["// Roof label conversion utilities\n\nexport const getOrientationLabel = (orientation) => {\n  const labels = {\n    'n': 'North', 'ne': 'Northeast', 'ene': 'East-Northeast',\n    'e': 'East', 'ese': 'East-Southeast', 'se': 'Southeast',\n    's': 'South', 'sw': 'Southwest', 'wsw': 'West-Southwest',\n    'w': 'West', 'wnw': 'West-Northwest', 'nw': 'Northwest'\n  };\n  return labels[orientation] || orientation;\n};\n\nexport const getShadingLabel = (shading) => {\n  const labels = {\n    'no-shading': 'No Shading', 'light': 'Light', 'moderate': 'Moderate',\n    'heavy': 'Heavy', 'extreme': 'Extreme'\n  };\n  return labels[shading] || shading;\n};\n\nexport const getUtilisationLabel = (utilisation) => {\n  const labels = {\n    'minimal-obstacles': 'Minimal Obstacles', 'slightly-complex': 'Slightly Complex',\n    'moderately-complex': 'Moderately Complex', 'highly-complex': 'Highly Complex',\n    'extremely-complex': 'Extremely Complex'\n  };\n  return labels[utilisation] || utilisation;\n};\n\n// Generate roof angle options from 0 to 90 in increments of 10\nexport const getRoofAngleOptions = () => Array.from({ length: 10 }, (_, i) => i * 10);\n\n// Get next roof number (highest existing ID + 1)\nexport const getNextRoofNumber = (addedRoofs) => {\n  if (addedRoofs.length === 0) return 1;\n  return Math.max(...addedRoofs.map(roof => roof.id)) + 1;\n}; "],"mappings":"AAAA;;AAEA,OAAO,MAAMA,mBAAmB,GAAIC,WAAW,IAAK;EAClD,MAAMC,MAAM,GAAG;IACb,GAAG,EAAE,OAAO;IAAE,IAAI,EAAE,WAAW;IAAE,KAAK,EAAE,gBAAgB;IACxD,GAAG,EAAE,MAAM;IAAE,KAAK,EAAE,gBAAgB;IAAE,IAAI,EAAE,WAAW;IACvD,GAAG,EAAE,OAAO;IAAE,IAAI,EAAE,WAAW;IAAE,KAAK,EAAE,gBAAgB;IACxD,GAAG,EAAE,MAAM;IAAE,KAAK,EAAE,gBAAgB;IAAE,IAAI,EAAE;EAC9C,CAAC;EACD,OAAOA,MAAM,CAACD,WAAW,CAAC,IAAIA,WAAW;AAC3C,CAAC;AAED,OAAO,MAAME,eAAe,GAAIC,OAAO,IAAK;EAC1C,MAAMF,MAAM,GAAG;IACb,YAAY,EAAE,YAAY;IAAE,OAAO,EAAE,OAAO;IAAE,UAAU,EAAE,UAAU;IACpE,OAAO,EAAE,OAAO;IAAE,SAAS,EAAE;EAC/B,CAAC;EACD,OAAOA,MAAM,CAACE,OAAO,CAAC,IAAIA,OAAO;AACnC,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,WAAW,IAAK;EAClD,MAAMJ,MAAM,GAAG;IACb,mBAAmB,EAAE,mBAAmB;IAAE,kBAAkB,EAAE,kBAAkB;IAChF,oBAAoB,EAAE,oBAAoB;IAAE,gBAAgB,EAAE,gBAAgB;IAC9E,mBAAmB,EAAE;EACvB,CAAC;EACD,OAAOA,MAAM,CAACI,WAAW,CAAC,IAAIA,WAAW;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAMC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC;;AAErF;AACA,OAAO,MAAMC,iBAAiB,GAAIC,UAAU,IAAK;EAC/C,IAAIA,UAAU,CAACJ,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACrC,OAAOK,IAAI,CAACC,GAAG,CAAC,GAAGF,UAAU,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC,CAAC,GAAG,CAAC;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}