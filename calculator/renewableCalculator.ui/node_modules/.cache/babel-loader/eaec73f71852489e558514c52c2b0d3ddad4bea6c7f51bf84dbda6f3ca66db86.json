{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/LeafletMapDrawer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { MapContainer, TileLayer, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport PostcodeLocationInput from './PostcodeLocationInput';\nimport Compass from './Compass';\nimport { calculatePolygonArea } from '../../../api';\n\n// Fix for default markers in Leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst DrawingComponent = ({\n  onAreaChange,\n  onPolygonCreated,\n  currentLocation\n}) => {\n  _s();\n  const map = useMap();\n  const [drawnItems] = useState(new L.FeatureGroup());\n  const drawControlRef = useRef(null);\n  useEffect(() => {\n    map.addLayer(drawnItems);\n\n    // Initialize drawing control\n    const drawControl = new L.Control.Draw({\n      position: 'topright',\n      draw: {\n        polygon: {\n          allowIntersection: false,\n          showArea: true,\n          drawError: {\n            color: '#e1e100',\n            message: '<strong>Error:</strong> shape edges cannot cross!'\n          },\n          shapeOptions: {\n            color: '#FF6B35',\n            fillColor: '#FF6B35',\n            fillOpacity: 0.5,\n            weight: 2\n          }\n        },\n        rectangle: false,\n        circle: false,\n        marker: false,\n        circlemarker: false,\n        polyline: false\n      },\n      edit: {\n        featureGroup: drawnItems,\n        remove: true\n      }\n    });\n    map.addControl(drawControl);\n    drawControlRef.current = drawControl;\n\n    // Handle drawing events\n    map.on(L.Draw.Event.CREATED, async event => {\n      const layer = event.layer;\n      drawnItems.clearLayers(); // Remove previous polygon\n      drawnItems.addLayer(layer);\n      if (layer instanceof L.Polygon) {\n        const coordinates = layer.getLatLngs()[0].map(latlng => ({\n          latitude: latlng.lat,\n          longitude: latlng.lng\n        }));\n        try {\n          const response = await calculatePolygonArea({\n            coordinates\n          });\n          const area = response.data.areaSquareMeters;\n          onAreaChange(area);\n          onPolygonCreated(layer);\n        } catch (error) {\n          console.error('Error calculating area:', error);\n          // Fallback to client-side calculation if backend fails\n          const area = L.GeometryUtil.geodesicArea(layer.getLatLngs()[0]);\n          onAreaChange(Math.abs(area));\n          onPolygonCreated(layer);\n        }\n      }\n    });\n    map.on(L.Draw.Event.EDITED, async event => {\n      const layers = event.layers;\n      layers.eachLayer(async layer => {\n        if (layer instanceof L.Polygon) {\n          const coordinates = layer.getLatLngs()[0].map(latlng => ({\n            latitude: latlng.lat,\n            longitude: latlng.lng\n          }));\n          try {\n            const response = await calculatePolygonArea({\n              coordinates\n            });\n            const area = response.data.areaSquareMeters;\n            onAreaChange(area);\n          } catch (error) {\n            console.error('Error calculating area:', error);\n            const area = L.GeometryUtil.geodesicArea(layer.getLatLngs()[0]);\n            onAreaChange(Math.abs(area));\n          }\n        }\n      });\n    });\n    map.on(L.Draw.Event.DELETED, () => {\n      onAreaChange(0);\n      onPolygonCreated(null);\n    });\n    return () => {\n      if (drawControlRef.current) {\n        map.removeControl(drawControlRef.current);\n      }\n      map.removeLayer(drawnItems);\n    };\n  }, [map, drawnItems, onAreaChange, onPolygonCreated]);\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (currentLocation) {\n      map.setView([currentLocation.lat, currentLocation.lng], 20);\n    }\n  }, [currentLocation, map]);\n  return null;\n};\n_s(DrawingComponent, \"/b3QYgwO5iyfTP36IlOr7KFWGDU=\", false, function () {\n  return [useMap];\n});\n_c = DrawingComponent;\nconst LeafletMapDrawer = /*#__PURE__*/_s2(/*#__PURE__*/forwardRef(_c2 = _s2(({\n  onAreaChange,\n  userLocation\n}, ref) => {\n  _s2();\n  const [currentLocation, setCurrentLocation] = useState(userLocation || {\n    lat: 51.5074,\n    lng: -0.1278\n  } // London default\n  );\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n\n  // Expose clearPolygon method to parent component\n  useImperativeHandle(ref, () => ({\n    clearPolygon: () => {\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  }));\n  const handleAreaChange = newArea => {\n    setArea(newArea);\n    onAreaChange(newArea);\n  };\n  const handlePolygonCreated = newPolygon => {\n    setPolygon(newPolygon);\n  };\n  const handleLocationChange = newLocation => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n  const clearPolygon = () => {\n    setPolygon(null);\n    setArea(0);\n    onAreaChange(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaflet-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-location-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Search by postcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostcodeLocationInput, {\n        onLocationChange: handleLocationChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-with-compass\",\n      children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [currentLocation.lat, currentLocation.lng],\n        zoom: 20,\n        style: {\n          height: '500px',\n          width: '100%'\n        },\n        scrollWheelZoom: true,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DrawingComponent, {\n          onAreaChange: handleAreaChange,\n          onPolygonCreated: handlePolygonCreated,\n          currentLocation: currentLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Compass, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearPolygon,\n        className: \"btn btn-secondary\",\n        disabled: !polygon,\n        children: \"Clear Roof Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}, \"+vAuIU9+uUFaXnREl6TSQ8mhWx8=\")), \"+vAuIU9+uUFaXnREl6TSQ8mhWx8=\");\n_c3 = LeafletMapDrawer;\nLeafletMapDrawer.displayName = 'LeafletMapDrawer';\nexport default LeafletMapDrawer;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"DrawingComponent\");\n$RefreshReg$(_c2, \"LeafletMapDrawer$forwardRef\");\n$RefreshReg$(_c3, \"LeafletMapDrawer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","MapContainer","TileLayer","useMap","useMapEvents","L","PostcodeLocationInput","Compass","calculatePolygonArea","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","DrawingComponent","onAreaChange","onPolygonCreated","currentLocation","_s","map","drawnItems","FeatureGroup","drawControlRef","addLayer","drawControl","Control","Draw","position","draw","polygon","allowIntersection","showArea","drawError","color","message","shapeOptions","fillColor","fillOpacity","weight","rectangle","circle","marker","circlemarker","polyline","edit","featureGroup","remove","addControl","current","on","Event","CREATED","event","layer","clearLayers","Polygon","coordinates","getLatLngs","latlng","latitude","lat","longitude","lng","response","area","data","areaSquareMeters","error","console","GeometryUtil","geodesicArea","Math","abs","EDITED","layers","eachLayer","DELETED","removeControl","removeLayer","setView","_c","LeafletMapDrawer","_s2","_c2","userLocation","ref","setCurrentLocation","setPolygon","setArea","clearPolygon","handleAreaChange","newArea","handlePolygonCreated","newPolygon","handleLocationChange","newLocation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLocationChange","center","zoom","style","height","width","scrollWheelZoom","attribution","url","onClick","disabled","_c3","displayName","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/LeafletMapDrawer.js"],"sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { MapContainer, TileLayer, useMap, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport PostcodeLocationInput from './PostcodeLocationInput';\nimport Compass from './Compass';\nimport { calculatePolygonArea } from '../../../api';\n\n// Fix for default markers in Leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nconst DrawingComponent = ({ onAreaChange, onPolygonCreated, currentLocation }) => {\n  const map = useMap();\n  const [drawnItems] = useState(new L.FeatureGroup());\n  const drawControlRef = useRef(null);\n\n  useEffect(() => {\n    map.addLayer(drawnItems);\n\n    // Initialize drawing control\n    const drawControl = new L.Control.Draw({\n      position: 'topright',\n      draw: {\n        polygon: {\n          allowIntersection: false,\n          showArea: true,\n          drawError: {\n            color: '#e1e100',\n            message: '<strong>Error:</strong> shape edges cannot cross!'\n          },\n          shapeOptions: {\n            color: '#FF6B35',\n            fillColor: '#FF6B35',\n            fillOpacity: 0.5,\n            weight: 2\n          }\n        },\n        rectangle: false,\n        circle: false,\n        marker: false,\n        circlemarker: false,\n        polyline: false\n      },\n      edit: {\n        featureGroup: drawnItems,\n        remove: true\n      }\n    });\n\n    map.addControl(drawControl);\n    drawControlRef.current = drawControl;\n\n    // Handle drawing events\n    map.on(L.Draw.Event.CREATED, async (event) => {\n      const layer = event.layer;\n      drawnItems.clearLayers(); // Remove previous polygon\n      drawnItems.addLayer(layer);\n\n      if (layer instanceof L.Polygon) {\n        const coordinates = layer.getLatLngs()[0].map(latlng => ({\n          latitude: latlng.lat,\n          longitude: latlng.lng\n        }));\n\n        try {\n          const response = await calculatePolygonArea({ coordinates });\n          const area = response.data.areaSquareMeters;\n          onAreaChange(area);\n          onPolygonCreated(layer);\n        } catch (error) {\n          console.error('Error calculating area:', error);\n          // Fallback to client-side calculation if backend fails\n          const area = L.GeometryUtil.geodesicArea(layer.getLatLngs()[0]);\n          onAreaChange(Math.abs(area));\n          onPolygonCreated(layer);\n        }\n      }\n    });\n\n    map.on(L.Draw.Event.EDITED, async (event) => {\n      const layers = event.layers;\n      layers.eachLayer(async (layer) => {\n        if (layer instanceof L.Polygon) {\n          const coordinates = layer.getLatLngs()[0].map(latlng => ({\n            latitude: latlng.lat,\n            longitude: latlng.lng\n          }));\n\n          try {\n            const response = await calculatePolygonArea({ coordinates });\n            const area = response.data.areaSquareMeters;\n            onAreaChange(area);\n          } catch (error) {\n            console.error('Error calculating area:', error);\n            const area = L.GeometryUtil.geodesicArea(layer.getLatLngs()[0]);\n            onAreaChange(Math.abs(area));\n          }\n        }\n      });\n    });\n\n    map.on(L.Draw.Event.DELETED, () => {\n      onAreaChange(0);\n      onPolygonCreated(null);\n    });\n\n    return () => {\n      if (drawControlRef.current) {\n        map.removeControl(drawControlRef.current);\n      }\n      map.removeLayer(drawnItems);\n    };\n  }, [map, drawnItems, onAreaChange, onPolygonCreated]);\n\n  // Update map center when location changes\n  useEffect(() => {\n    if (currentLocation) {\n      map.setView([currentLocation.lat, currentLocation.lng], 20);\n    }\n  }, [currentLocation, map]);\n\n  return null;\n};\n\nconst LeafletMapDrawer = forwardRef(({ onAreaChange, userLocation }, ref) => {\n  const [currentLocation, setCurrentLocation] = useState(\n    userLocation || { lat: 51.5074, lng: -0.1278 } // London default\n  );\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n\n  // Expose clearPolygon method to parent component\n  useImperativeHandle(ref, () => ({\n    clearPolygon: () => {\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  }));\n\n  const handleAreaChange = (newArea) => {\n    setArea(newArea);\n    onAreaChange(newArea);\n  };\n\n  const handlePolygonCreated = (newPolygon) => {\n    setPolygon(newPolygon);\n  };\n\n  const handleLocationChange = (newLocation) => {\n    setCurrentLocation(newLocation);\n    // Clear existing polygon when location changes\n    if (polygon) {\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n\n  const clearPolygon = () => {\n    setPolygon(null);\n    setArea(0);\n    onAreaChange(0);\n  };\n\n  return (\n    <div className=\"leaflet-map-container\">\n      <div className=\"map-location-controls\">\n        <h5>Search by postcode</h5>\n        <PostcodeLocationInput onLocationChange={handleLocationChange} />\n      </div>\n      \n      <div className=\"map-with-compass\">\n        <MapContainer\n          center={[currentLocation.lat, currentLocation.lng]}\n          zoom={20}\n          style={{ height: '500px', width: '100%' }}\n          scrollWheelZoom={true}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <DrawingComponent \n            onAreaChange={handleAreaChange}\n            onPolygonCreated={handlePolygonCreated}\n            currentLocation={currentLocation}\n          />\n        </MapContainer>\n        <Compass />\n      </div>\n      \n      <div className=\"map-controls\">\n        <button onClick={clearPolygon} className=\"btn btn-secondary\" disabled={!polygon}>\n          Clear Roof Area\n        </button>\n      </div>\n    </div>\n  );\n});\n\nLeafletMapDrawer.displayName = 'LeafletMapDrawer';\n\nexport default LeafletMapDrawer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}