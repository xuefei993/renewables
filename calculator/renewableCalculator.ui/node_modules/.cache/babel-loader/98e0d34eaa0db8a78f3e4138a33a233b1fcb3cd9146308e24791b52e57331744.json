{"ast":null,"code":"// Solar potential calculation utilities\n// Shading factors from the UI descriptions\nexport const SHADING_FACTORS={'no-shading':1.0,'light':0.90,'moderate':0.70,'heavy':0.50,'extreme':0.20};// Utilisation factors based on roof complexity\nexport const UTILISATION_FACTORS={'minimal-obstacles':0.95,// Almost full roof utilization\n'slightly-complex':0.85,// Some obstacles, good utilization\n'moderately-complex':0.70,// Multiple obstacles, moderate utilization\n'highly-complex':0.55,// Many obstacles, limited utilization\n'extremely-complex':0.30// Very poor layout, minimal utilization\n};// Tilt and Orientation Correction Factor table (based on the provided heatmap)\n// Rows: Tilt angles (0°, 10°, 20°, 30°, 40°, 50°, 60°, 70°, 80°, 90°)\n// Columns: Orientations (N, NE, ENE, E, ESE, SE, S, SW, WSW, W, WNW, NW, N)\nexport const TILT_ORIENTATION_FACTORS=[// 0° tilt (flat roof)\n[82,82,82,82,82,82,82,82,82,82,82,82,82],// 10° tilt\n[80,84,85,87,88,89,91,89,88,87,85,84,80],// 20° tilt\n[73,82,85,88,91,94,97,94,91,88,85,82,73],// 30° tilt\n[60,75,80,85,90,95,100,95,90,85,80,75,60],// 40° tilt\n[60,75,80,85,90,95,100,95,90,85,80,75,60],// 50° tilt\n[62,75,79,84,88,92,97,92,88,84,79,75,62],// 60° tilt\n[62,73,76,80,83,87,91,87,83,80,76,73,62],// 70° tilt\n[59,68,70,73,76,79,82,79,76,73,70,68,59],// 80° tilt\n[54,60,62,64,66,69,71,69,66,64,62,60,54],// 90° tilt (vertical)\n[48,52,54,56,57,58,60,58,57,56,54,52,48]];// Orientation mapping (degrees to array index)\nexport const ORIENTATION_MAPPING={'n':0,// North (0°)\n'ne':1,// Northeast (30°)\n'ene':2,// East-Northeast (60°)\n'e':3,// East (90°)\n'ese':4,// East-Southeast (120°)\n'se':5,// Southeast (150°)\n's':6,// South (180°)\n'sw':7,// Southwest (210°)\n'wsw':8,// West-Southwest (240°)\n'w':9,// West (270°)\n'wnw':10,// West-Northwest (300°)\n'nw':11// Northwest (330°)\n};// Tilt angle mapping (degrees to array index)\nexport const TILT_MAPPING={0:0,10:1,20:2,30:3,40:4,50:5,60:6,70:7,80:8,90:9};/**\n * Get tilt and orientation correction factor\n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code (e.g., 's', 'sw', 'n')\n * @returns {number} Correction factor as decimal (e.g., 0.95 for 95%)\n */export const getTiltOrientationFactor=(tiltAngle,orientation)=>{const tiltIndex=TILT_MAPPING[tiltAngle];const orientationIndex=ORIENTATION_MAPPING[orientation];if(tiltIndex===undefined||orientationIndex===undefined){return 0.82;// Default fallback factor\n}const percentage=TILT_ORIENTATION_FACTORS[tiltIndex][orientationIndex];return percentage/100;// Convert percentage to decimal\n};/**\n * Calculate solar potential using the exact formula provided\n * @param {number} roofSize - Roof area in m²\n * @param {string} shadingLevel - Shading level code\n * @param {string} utilisationLevel - Utilisation level code  \n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code\n * @returns {object} Solar potential calculation results\n */export const calculateSolarPotential=(roofSize,shadingLevel,utilisationLevel,tiltAngle,orientation)=>{// Get individual factors\nconst shadingFactor=SHADING_FACTORS[shadingLevel]||1.0;const utilisationFactor=UTILISATION_FACTORS[utilisationLevel]||0.95;const tiltOrientationFactor=getTiltOrientationFactor(tiltAngle,orientation);// Calculate solar potential using the exact formula:\n// Solar Potential = roof size × shading factor × utilisation factor × tilt and orientation factor\nconst solarPotential=roofSize*shadingFactor*utilisationFactor*tiltOrientationFactor;return{solarPotential:solarPotential,factors:{shading:shadingFactor,utilisation:utilisationFactor,tiltOrientation:tiltOrientationFactor}};};","map":{"version":3,"names":["SHADING_FACTORS","UTILISATION_FACTORS","TILT_ORIENTATION_FACTORS","ORIENTATION_MAPPING","TILT_MAPPING","getTiltOrientationFactor","tiltAngle","orientation","tiltIndex","orientationIndex","undefined","percentage","calculateSolarPotential","roofSize","shadingLevel","utilisationLevel","shadingFactor","utilisationFactor","tiltOrientationFactor","solarPotential","factors","shading","utilisation","tiltOrientation"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/solarPotentialUtils.js"],"sourcesContent":["// Solar potential calculation utilities\n\n// Shading factors from the UI descriptions\nexport const SHADING_FACTORS = {\n  'no-shading': 1.0,\n  'light': 0.90,\n  'moderate': 0.70,\n  'heavy': 0.50,\n  'extreme': 0.20\n};\n\n// Utilisation factors based on roof complexity\nexport const UTILISATION_FACTORS = {\n  'minimal-obstacles': 0.95,     // Almost full roof utilization\n  'slightly-complex': 0.85,     // Some obstacles, good utilization\n  'moderately-complex': 0.70,   // Multiple obstacles, moderate utilization\n  'highly-complex': 0.55,       // Many obstacles, limited utilization\n  'extremely-complex': 0.30     // Very poor layout, minimal utilization\n};\n\n// Tilt and Orientation Correction Factor table (based on the provided heatmap)\n// Rows: Tilt angles (0°, 10°, 20°, 30°, 40°, 50°, 60°, 70°, 80°, 90°)\n// Columns: Orientations (N, NE, ENE, E, ESE, SE, S, SW, WSW, W, WNW, NW, N)\nexport const TILT_ORIENTATION_FACTORS = [\n  // 0° tilt (flat roof)\n  [82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82],\n  // 10° tilt\n  [80, 84, 85, 87, 88, 89, 91, 89, 88, 87, 85, 84, 80],\n  // 20° tilt\n  [73, 82, 85, 88, 91, 94, 97, 94, 91, 88, 85, 82, 73],\n  // 30° tilt\n  [60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n  // 40° tilt\n  [60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n  // 50° tilt\n  [62, 75, 79, 84, 88, 92, 97, 92, 88, 84, 79, 75, 62],\n  // 60° tilt\n  [62, 73, 76, 80, 83, 87, 91, 87, 83, 80, 76, 73, 62],\n  // 70° tilt\n  [59, 68, 70, 73, 76, 79, 82, 79, 76, 73, 70, 68, 59],\n  // 80° tilt\n  [54, 60, 62, 64, 66, 69, 71, 69, 66, 64, 62, 60, 54],\n  // 90° tilt (vertical)\n  [48, 52, 54, 56, 57, 58, 60, 58, 57, 56, 54, 52, 48]\n];\n\n// Orientation mapping (degrees to array index)\nexport const ORIENTATION_MAPPING = {\n  'n': 0,     // North (0°)\n  'ne': 1,    // Northeast (30°)\n  'ene': 2,   // East-Northeast (60°)\n  'e': 3,     // East (90°)\n  'ese': 4,   // East-Southeast (120°)\n  'se': 5,    // Southeast (150°)\n  's': 6,     // South (180°)\n  'sw': 7,    // Southwest (210°)\n  'wsw': 8,   // West-Southwest (240°)\n  'w': 9,     // West (270°)\n  'wnw': 10,  // West-Northwest (300°)\n  'nw': 11,   // Northwest (330°)\n};\n\n// Tilt angle mapping (degrees to array index)\nexport const TILT_MAPPING = {\n  0: 0, 10: 1, 20: 2, 30: 3, 40: 4, \n  50: 5, 60: 6, 70: 7, 80: 8, 90: 9\n};\n\n/**\n * Get tilt and orientation correction factor\n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code (e.g., 's', 'sw', 'n')\n * @returns {number} Correction factor as decimal (e.g., 0.95 for 95%)\n */\nexport const getTiltOrientationFactor = (tiltAngle, orientation) => {\n  const tiltIndex = TILT_MAPPING[tiltAngle];\n  const orientationIndex = ORIENTATION_MAPPING[orientation];\n  \n  if (tiltIndex === undefined || orientationIndex === undefined) {\n    return 0.82; // Default fallback factor\n  }\n  \n  const percentage = TILT_ORIENTATION_FACTORS[tiltIndex][orientationIndex];\n  return percentage / 100; // Convert percentage to decimal\n};\n\n/**\n * Calculate solar potential using the exact formula provided\n * @param {number} roofSize - Roof area in m²\n * @param {string} shadingLevel - Shading level code\n * @param {string} utilisationLevel - Utilisation level code  \n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code\n * @returns {object} Solar potential calculation results\n */\nexport const calculateSolarPotential = (roofSize, shadingLevel, utilisationLevel, tiltAngle, orientation) => {\n  // Get individual factors\n  const shadingFactor = SHADING_FACTORS[shadingLevel] || 1.0;\n  const utilisationFactor = UTILISATION_FACTORS[utilisationLevel] || 0.95;\n  const tiltOrientationFactor = getTiltOrientationFactor(tiltAngle, orientation);\n  \n  // Calculate solar potential using the exact formula:\n  // Solar Potential = roof size × shading factor × utilisation factor × tilt and orientation factor\n  const solarPotential = roofSize * shadingFactor * utilisationFactor * tiltOrientationFactor;\n  \n  return {\n    solarPotential: solarPotential,\n    factors: {\n      shading: shadingFactor,\n      utilisation: utilisationFactor,\n      tiltOrientation: tiltOrientationFactor\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}