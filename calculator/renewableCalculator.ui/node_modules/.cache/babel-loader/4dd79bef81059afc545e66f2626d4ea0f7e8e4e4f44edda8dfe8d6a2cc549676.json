{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/EnergyDemand.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ElectricityUsageSection from \"./energy-demand/ElectricityUsageSection\";\nimport HeatingSection from \"./energy-demand/HeatingSection\";\nimport HotWaterSection from \"./energy-demand/HotWaterSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnergyDemand = ({\n  data,\n  onDataChange,\n  onNext,\n  onBack\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    householdSize: data.householdSize || \"\",\n    knowsMonthlyUsage: data.knowsMonthlyUsage || \"\",\n    monthlyElectricityUsage: data.monthlyElectricityUsage || {\n      january: \"\",\n      february: \"\",\n      march: \"\",\n      april: \"\",\n      may: \"\",\n      june: \"\",\n      july: \"\",\n      august: \"\",\n      september: \"\",\n      october: \"\",\n      november: \"\",\n      december: \"\"\n    },\n    knowsAnnualUsage: data.knowsAnnualUsage || \"\",\n    annualElectricityUsage: data.annualElectricityUsage || \"\",\n    floorArea: data.floorArea || \"\",\n    heatingMethod: data.heatingMethod || \"\",\n    hotWaterMethod: data.hotWaterMethod || \"\",\n    knowsMonthlyGasUsage: data.knowsMonthlyGasUsage || \"\",\n    monthlyGasUsage: data.monthlyGasUsage || {\n      january: \"\",\n      february: \"\",\n      march: \"\",\n      april: \"\",\n      may: \"\",\n      june: \"\",\n      july: \"\",\n      august: \"\",\n      september: \"\",\n      october: \"\",\n      november: \"\",\n      december: \"\"\n    },\n    knowsAnnualGasUsage: data.knowsAnnualGasUsage || \"\",\n    annualGasUsage: data.annualGasUsage || \"\",\n    heatPumpCOP: data.heatPumpCOP || \"3.0\",\n    hotWaterHeatPumpCOP: data.hotWaterHeatPumpCOP || \"3.0\",\n    ...data\n  });\n\n  // Helper function to check if gas is needed for either heating or hot water\n  const needsGasUsage = () => {\n    return formData.heatingMethod === \"gas boiler\" || formData.hotWaterMethod === \"gas boiler\";\n  };\n  const updateFormData = updates => {\n    setFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n    onDataChange(updates);\n  };\n\n  // Basic form handlers\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    updateFormData({\n      [name]: value\n    });\n  };\n\n  // Electricity usage handlers\n  const handleKnowsMonthlyUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsMonthlyUsage: value\n    };\n    if (value === \"yes\") {\n      updates.knowsAnnualUsage = \"\";\n      updates.annualElectricityUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsAnnualUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsAnnualUsage: value\n    };\n    if (value === \"yes\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleMonthlyElectricityChange = (month, value) => {\n    const updatedMonthlyUsage = {\n      ...formData.monthlyElectricityUsage,\n      [month]: value\n    };\n    updateFormData({\n      monthlyElectricityUsage: updatedMonthlyUsage\n    });\n  };\n  const handleAnnualElectricityChange = e => {\n    updateFormData({\n      annualElectricityUsage: e.target.value\n    });\n  };\n\n  // Heating method handlers\n  const handleHeatingMethodChange = e => {\n    const value = e.target.value;\n    let updates = {\n      heatingMethod: value\n    };\n\n    // If neither heating nor hot water will need gas after this change, clear gas data\n    if (value !== \"gas boiler\" && formData.hotWaterMethod !== \"gas boiler\") {\n      updates = {\n        ...updates,\n        knowsMonthlyGasUsage: \"\",\n        monthlyGasUsage: {\n          january: \"\",\n          february: \"\",\n          march: \"\",\n          april: \"\",\n          may: \"\",\n          june: \"\",\n          july: \"\",\n          august: \"\",\n          september: \"\",\n          october: \"\",\n          november: \"\",\n          december: \"\"\n        },\n        knowsAnnualGasUsage: \"\",\n        annualGasUsage: \"\"\n      };\n    }\n    if (value !== \"heat pumps\") {\n      updates.heatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n\n  // Hot water method handlers\n  const handleHotWaterMethodChange = e => {\n    const value = e.target.value;\n    let updates = {\n      hotWaterMethod: value\n    };\n\n    // If neither heating nor hot water will need gas after this change, clear gas data\n    if (value !== \"gas boiler\" && formData.heatingMethod !== \"gas boiler\") {\n      updates = {\n        ...updates,\n        knowsMonthlyGasUsage: \"\",\n        monthlyGasUsage: {\n          january: \"\",\n          february: \"\",\n          march: \"\",\n          april: \"\",\n          may: \"\",\n          june: \"\",\n          july: \"\",\n          august: \"\",\n          september: \"\",\n          october: \"\",\n          november: \"\",\n          december: \"\"\n        },\n        knowsAnnualGasUsage: \"\",\n        annualGasUsage: \"\"\n      };\n    }\n    if (value !== \"heat pumps\") {\n      updates.hotWaterHeatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsMonthlyGasUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsMonthlyGasUsage: value\n    };\n    if (value === \"yes\") {\n      updates.knowsAnnualGasUsage = \"\";\n      updates.annualGasUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyGasUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleKnowsAnnualGasUsageChange = e => {\n    const value = e.target.value;\n    let updates = {\n      knowsAnnualGasUsage: value\n    };\n    if (value === \"yes\") {\n      updates.monthlyGasUsage = {\n        january: \"\",\n        february: \"\",\n        march: \"\",\n        april: \"\",\n        may: \"\",\n        june: \"\",\n        july: \"\",\n        august: \"\",\n        september: \"\",\n        october: \"\",\n        november: \"\",\n        december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n  const handleMonthlyGasChange = (month, value) => {\n    const updatedMonthlyGasUsage = {\n      ...formData.monthlyGasUsage,\n      [month]: value\n    };\n    updateFormData({\n      monthlyGasUsage: updatedMonthlyGasUsage\n    });\n  };\n  const handleAnnualGasUsageChange = e => {\n    updateFormData({\n      annualGasUsage: e.target.value\n    });\n  };\n  const handleHeatPumpCOPChange = e => {\n    updateFormData({\n      heatPumpCOP: e.target.value\n    });\n  };\n  const handleHotWaterHeatPumpCOPChange = e => {\n    updateFormData({\n      hotWaterHeatPumpCOP: e.target.value\n    });\n  };\n  const handleNext = () => {\n    onNext();\n  };\n  const isFormValid = () => {\n    if (!formData.householdSize || !formData.knowsMonthlyUsage || !formData.floorArea || !formData.heatingMethod || !formData.hotWaterMethod) {\n      return false;\n    }\n\n    // Validate electricity usage\n    if (formData.knowsMonthlyUsage === \"yes\") {\n      const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n      const electricityValid = months.every(month => formData.monthlyElectricityUsage[month] && formData.monthlyElectricityUsage[month].trim() !== \"\");\n      if (!electricityValid) return false;\n    } else if (formData.knowsMonthlyUsage === \"no\") {\n      if (!formData.knowsAnnualUsage) {\n        return false;\n      }\n      if (formData.knowsAnnualUsage === \"yes\" && !formData.annualElectricityUsage) {\n        return false;\n      }\n    }\n\n    // Validate gas usage if needed for either heating or hot water\n    if (needsGasUsage()) {\n      if (!formData.knowsMonthlyGasUsage) {\n        return false;\n      }\n      if (formData.knowsMonthlyGasUsage === \"yes\") {\n        const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n        return months.every(month => formData.monthlyGasUsage[month] && formData.monthlyGasUsage[month].trim() !== \"\");\n      } else if (formData.knowsMonthlyGasUsage === \"no\") {\n        if (!formData.knowsAnnualGasUsage) {\n          return false;\n        }\n        if (formData.knowsAnnualGasUsage === \"yes\" && !formData.annualGasUsage) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tell us about your household's energy usage patterns to calculate accurate renewable energy recommendations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"householdSize\",\n        children: \"How many people live in your household regularly?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"householdSize\",\n        name: \"householdSize\",\n        value: formData.householdSize,\n        onChange: handleChange,\n        placeholder: \"Enter number of people\",\n        min: \"1\",\n        max: \"20\",\n        className: \"form-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ElectricityUsageSection, {\n      formData: formData,\n      onKnowsMonthlyUsageChange: handleKnowsMonthlyUsageChange,\n      onKnowsAnnualUsageChange: handleKnowsAnnualUsageChange,\n      onMonthlyElectricityChange: handleMonthlyElectricityChange,\n      onAnnualElectricityChange: handleAnnualElectricityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"floorArea\",\n        children: \"What is your approximate floor area? (m\\xB2)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"floorArea\",\n        name: \"floorArea\",\n        value: formData.floorArea,\n        onChange: handleChange,\n        placeholder: \"Enter floor area in square metres\",\n        min: \"1\",\n        step: \"0.1\",\n        className: \"form-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HeatingSection, {\n      formData: formData,\n      onHeatingMethodChange: handleHeatingMethodChange,\n      onHeatPumpCOPChange: handleHeatPumpCOPChange,\n      needsGasUsage: needsGasUsage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HotWaterSection, {\n      formData: formData,\n      onHotWaterMethodChange: handleHotWaterMethodChange,\n      onHotWaterHeatPumpCOPChange: handleHotWaterHeatPumpCOPChange,\n      needsGasUsage: needsGasUsage(),\n      onKnowsMonthlyGasUsageChange: handleKnowsMonthlyGasUsageChange,\n      onKnowsAnnualGasUsageChange: handleKnowsAnnualGasUsageChange,\n      onMonthlyGasChange: handleMonthlyGasChange,\n      onAnnualGasUsageChange: handleAnnualGasUsageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary\",\n        onClick: onBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `btn btn-primary ${!isFormValid() ? 'disabled' : ''}`,\n        onClick: handleNext,\n        disabled: !isFormValid(),\n        children: \"Next: Solar Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(EnergyDemand, \"UQ8YeOfvl3QD6I/nCS/XvavEdcI=\");\n_c = EnergyDemand;\nexport default EnergyDemand;\nvar _c;\n$RefreshReg$(_c, \"EnergyDemand\");","map":{"version":3,"names":["React","useState","ElectricityUsageSection","HeatingSection","HotWaterSection","jsxDEV","_jsxDEV","EnergyDemand","data","onDataChange","onNext","onBack","_s","formData","setFormData","householdSize","knowsMonthlyUsage","monthlyElectricityUsage","january","february","march","april","may","june","july","august","september","october","november","december","knowsAnnualUsage","annualElectricityUsage","floorArea","heatingMethod","hotWaterMethod","knowsMonthlyGasUsage","monthlyGasUsage","knowsAnnualGasUsage","annualGasUsage","heatPumpCOP","hotWaterHeatPumpCOP","needsGasUsage","updateFormData","updates","prev","handleChange","e","name","value","target","handleKnowsMonthlyUsageChange","handleKnowsAnnualUsageChange","handleMonthlyElectricityChange","month","updatedMonthlyUsage","handleAnnualElectricityChange","handleHeatingMethodChange","handleHotWaterMethodChange","handleKnowsMonthlyGasUsageChange","handleKnowsAnnualGasUsageChange","handleMonthlyGasChange","updatedMonthlyGasUsage","handleAnnualGasUsageChange","handleHeatPumpCOPChange","handleHotWaterHeatPumpCOPChange","handleNext","isFormValid","months","electricityValid","every","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","min","max","required","onKnowsMonthlyUsageChange","onKnowsAnnualUsageChange","onMonthlyElectricityChange","onAnnualElectricityChange","step","onHeatingMethodChange","onHeatPumpCOPChange","onHotWaterMethodChange","onHotWaterHeatPumpCOPChange","onKnowsMonthlyGasUsageChange","onKnowsAnnualGasUsageChange","onMonthlyGasChange","onAnnualGasUsageChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/EnergyDemand.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ElectricityUsageSection from \"./energy-demand/ElectricityUsageSection\";\nimport HeatingSection from \"./energy-demand/HeatingSection\";\nimport HotWaterSection from \"./energy-demand/HotWaterSection\";\n\nconst EnergyDemand = ({ data, onDataChange, onNext, onBack }) => {\n  const [formData, setFormData] = useState({\n    householdSize: data.householdSize || \"\",\n    knowsMonthlyUsage: data.knowsMonthlyUsage || \"\",\n    monthlyElectricityUsage: data.monthlyElectricityUsage || {\n      january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n      july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n    },\n    knowsAnnualUsage: data.knowsAnnualUsage || \"\",\n    annualElectricityUsage: data.annualElectricityUsage || \"\",\n    floorArea: data.floorArea || \"\",\n    heatingMethod: data.heatingMethod || \"\",\n    hotWaterMethod: data.hotWaterMethod || \"\",\n    knowsMonthlyGasUsage: data.knowsMonthlyGasUsage || \"\",\n    monthlyGasUsage: data.monthlyGasUsage || {\n      january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n      july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n    },\n    knowsAnnualGasUsage: data.knowsAnnualGasUsage || \"\",\n    annualGasUsage: data.annualGasUsage || \"\",\n    heatPumpCOP: data.heatPumpCOP || \"3.0\",\n    hotWaterHeatPumpCOP: data.hotWaterHeatPumpCOP || \"3.0\",\n    ...data\n  });\n\n  // Helper function to check if gas is needed for either heating or hot water\n  const needsGasUsage = () => {\n    return formData.heatingMethod === \"gas boiler\" || formData.hotWaterMethod === \"gas boiler\";\n  };\n\n  const updateFormData = (updates) => {\n    setFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n    onDataChange(updates);\n  };\n\n  // Basic form handlers\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    updateFormData({ [name]: value });\n  };\n\n  // Electricity usage handlers\n  const handleKnowsMonthlyUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsMonthlyUsage: value };\n    \n    if (value === \"yes\") {\n      updates.knowsAnnualUsage = \"\";\n      updates.annualElectricityUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsAnnualUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsAnnualUsage: value };\n    \n    if (value === \"yes\") {\n      updates.monthlyElectricityUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleMonthlyElectricityChange = (month, value) => {\n    const updatedMonthlyUsage = {\n      ...formData.monthlyElectricityUsage,\n      [month]: value\n    };\n    updateFormData({ monthlyElectricityUsage: updatedMonthlyUsage });\n  };\n\n  const handleAnnualElectricityChange = (e) => {\n    updateFormData({ annualElectricityUsage: e.target.value });\n  };\n\n  // Heating method handlers\n  const handleHeatingMethodChange = (e) => {\n    const value = e.target.value;\n    let updates = { heatingMethod: value };\n    \n    // If neither heating nor hot water will need gas after this change, clear gas data\n    if (value !== \"gas boiler\" && formData.hotWaterMethod !== \"gas boiler\") {\n      updates = {\n        ...updates,\n        knowsMonthlyGasUsage: \"\",\n        monthlyGasUsage: {\n          january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n          july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n        },\n        knowsAnnualGasUsage: \"\",\n        annualGasUsage: \"\"\n      };\n    }\n    \n    if (value !== \"heat pumps\") {\n      updates.heatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n\n  // Hot water method handlers\n  const handleHotWaterMethodChange = (e) => {\n    const value = e.target.value;\n    let updates = { hotWaterMethod: value };\n    \n    // If neither heating nor hot water will need gas after this change, clear gas data\n    if (value !== \"gas boiler\" && formData.heatingMethod !== \"gas boiler\") {\n      updates = {\n        ...updates,\n        knowsMonthlyGasUsage: \"\",\n        monthlyGasUsage: {\n          january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n          july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n        },\n        knowsAnnualGasUsage: \"\",\n        annualGasUsage: \"\"\n      };\n    }\n    \n    if (value !== \"heat pumps\") {\n      updates.hotWaterHeatPumpCOP = \"3.0\";\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsMonthlyGasUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsMonthlyGasUsage: value };\n    \n    if (value === \"yes\") {\n      updates.knowsAnnualGasUsage = \"\";\n      updates.annualGasUsage = \"\";\n    } else if (value === \"no\") {\n      updates.monthlyGasUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleKnowsAnnualGasUsageChange = (e) => {\n    const value = e.target.value;\n    let updates = { knowsAnnualGasUsage: value };\n    \n    if (value === \"yes\") {\n      updates.monthlyGasUsage = {\n        january: \"\", february: \"\", march: \"\", april: \"\", may: \"\", june: \"\",\n        july: \"\", august: \"\", september: \"\", october: \"\", november: \"\", december: \"\"\n      };\n    }\n    updateFormData(updates);\n  };\n\n  const handleMonthlyGasChange = (month, value) => {\n    const updatedMonthlyGasUsage = {\n      ...formData.monthlyGasUsage,\n      [month]: value\n    };\n    updateFormData({ monthlyGasUsage: updatedMonthlyGasUsage });\n  };\n\n  const handleAnnualGasUsageChange = (e) => {\n    updateFormData({ annualGasUsage: e.target.value });\n  };\n\n  const handleHeatPumpCOPChange = (e) => {\n    updateFormData({ heatPumpCOP: e.target.value });\n  };\n\n  const handleHotWaterHeatPumpCOPChange = (e) => {\n    updateFormData({ hotWaterHeatPumpCOP: e.target.value });\n  };\n\n  const handleNext = () => {\n    onNext();\n  };\n\n  const isFormValid = () => {\n    if (!formData.householdSize || !formData.knowsMonthlyUsage || !formData.floorArea || !formData.heatingMethod || !formData.hotWaterMethod) {\n      return false;\n    }\n    \n    // Validate electricity usage\n    if (formData.knowsMonthlyUsage === \"yes\") {\n      const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \n                     \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n      const electricityValid = months.every(month => formData.monthlyElectricityUsage[month] && \n                                   formData.monthlyElectricityUsage[month].trim() !== \"\");\n      if (!electricityValid) return false;\n    } else if (formData.knowsMonthlyUsage === \"no\") {\n      if (!formData.knowsAnnualUsage) {\n        return false;\n      }\n      if (formData.knowsAnnualUsage === \"yes\" && !formData.annualElectricityUsage) {\n        return false;\n      }\n    }\n    \n    // Validate gas usage if needed for either heating or hot water\n    if (needsGasUsage()) {\n      if (!formData.knowsMonthlyGasUsage) {\n        return false;\n      }\n      if (formData.knowsMonthlyGasUsage === \"yes\") {\n        const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \n                       \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n        return months.every(month => formData.monthlyGasUsage[month] && \n                                     formData.monthlyGasUsage[month].trim() !== \"\");\n      } else if (formData.knowsMonthlyGasUsage === \"no\") {\n        if (!formData.knowsAnnualGasUsage) {\n          return false;\n        }\n        if (formData.knowsAnnualGasUsage === \"yes\" && !formData.annualGasUsage) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  };\n\n  return (\n    <div className=\"step-container\">\n      <div className=\"step-header\">\n        <h2>Energy Demand</h2>\n        <p>Tell us about your household's energy usage patterns to calculate accurate renewable energy recommendations.</p>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"householdSize\">How many people live in your household regularly?</label>\n        <input\n          type=\"number\"\n          id=\"householdSize\"\n          name=\"householdSize\"\n          value={formData.householdSize}\n          onChange={handleChange}\n          placeholder=\"Enter number of people\"\n          min=\"1\"\n          max=\"20\"\n          className=\"form-input\"\n          required\n        />\n      </div>\n\n      <ElectricityUsageSection\n        formData={formData}\n        onKnowsMonthlyUsageChange={handleKnowsMonthlyUsageChange}\n        onKnowsAnnualUsageChange={handleKnowsAnnualUsageChange}\n        onMonthlyElectricityChange={handleMonthlyElectricityChange}\n        onAnnualElectricityChange={handleAnnualElectricityChange}\n      />\n\n      <div className=\"form-group\">\n        <label htmlFor=\"floorArea\">What is your approximate floor area? (m²)</label>\n        <input\n          type=\"number\"\n          id=\"floorArea\"\n          name=\"floorArea\"\n          value={formData.floorArea}\n          onChange={handleChange}\n          placeholder=\"Enter floor area in square metres\"\n          min=\"1\"\n          step=\"0.1\"\n          className=\"form-input\"\n          required\n        />\n      </div>\n\n      <HeatingSection\n        formData={formData}\n        onHeatingMethodChange={handleHeatingMethodChange}\n        onHeatPumpCOPChange={handleHeatPumpCOPChange}\n        needsGasUsage={needsGasUsage()}\n      />\n\n      <HotWaterSection\n        formData={formData}\n        onHotWaterMethodChange={handleHotWaterMethodChange}\n        onHotWaterHeatPumpCOPChange={handleHotWaterHeatPumpCOPChange}\n        needsGasUsage={needsGasUsage()}\n        onKnowsMonthlyGasUsageChange={handleKnowsMonthlyGasUsageChange}\n        onKnowsAnnualGasUsageChange={handleKnowsAnnualGasUsageChange}\n        onMonthlyGasChange={handleMonthlyGasChange}\n        onAnnualGasUsageChange={handleAnnualGasUsageChange}\n      />\n\n      <div className=\"button-group\">\n        <button \n          type=\"button\" \n          className=\"btn btn-secondary\"\n          onClick={onBack}\n        >\n          Back\n        </button>\n        <button \n          type=\"button\" \n          className={`btn btn-primary ${!isFormValid() ? 'disabled' : ''}`}\n          onClick={handleNext}\n          disabled={!isFormValid()}\n        >\n          Next: Solar Configuration\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EnergyDemand; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}