{"ast":null,"code":"// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据\n  async getSolarRadiationData(latitude, longitude, years = 5) {\n    // 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n\n    // 确保不会请求太早的数据（NASA POWER数据从1981年开始）\n    const actualStartYear = Math.max(startYear, 1981);\n    try {\n      // 使用NASA POWER API v2.0的正确格式\n      const url = `https://power.larc.nasa.gov/api/temporal/monthly/point?` + `parameters=ALLSKY_SFC_SW_DWN&` + `community=RE&` + `longitude=${longitude}&` + `latitude=${latitude}&` + `start=${actualStartYear}&` +\n      // 移除0101后缀\n      `end=${endYear}&` +\n      // 移除1231后缀\n      `format=JSON`;\n      console.log('NASA POWER API URL:', url);\n      console.log(`Date range: ${actualStartYear}-${endYear} (${endYear - actualStartYear + 1} years)`);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'RenewableCalculator/1.0'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER response structure:', Object.keys(data));\n        console.log('NASA POWER response:', data);\n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          return {\n            success: true,\n            data: data.properties.parameter.ALLSKY_SFC_SW_DWN,\n            info: data.properties.parameter\n          };\n        } else {\n          console.error('Unexpected NASA response structure:', data);\n          return {\n            success: false,\n            error: 'Invalid NASA API response structure'\n          };\n        }\n      }\n\n      // 尝试解析错误响应\n      let errorMessage = `NASA API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('NASA API error response:', errorData);\n        if (errorData.error && errorData.error.message) {\n          errorMessage += ` - ${errorData.error.message}`;\n        } else if (errorData.header) {\n          errorMessage += ` - ${errorData.header}`;\n        } else if (errorData.messages && errorData.messages.length > 0) {\n          errorMessage += ` - ${errorData.messages.join(', ')}`;\n        }\n      } catch (e) {\n        console.log('Could not parse error response');\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } catch (error) {\n      console.error('NASA API Error:', error);\n      return {\n        success: false,\n        error: 'Network error: ' + error.message\n      };\n    }\n  },\n  // 获取Open Meteo气温数据\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` + `latitude=${latitude}&` + `longitude=${longitude}&` + `start_date=${startDate}&` + `end_date=${endDate}&` + `daily=temperature_2m_mean&` + `timezone=Europe/London`;\n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return {\n            success: true,\n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return {\n            success: false,\n            error: 'Invalid Open-Meteo API response structure'\n          };\n        }\n      }\n\n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return {\n        success: false,\n        error: 'Network error: ' + error.message\n      };\n    }\n  },\n  // 尝试使用备用的简化NASA API调用\n  async getSolarRadiationDataSimple(latitude, longitude) {\n    try {\n      // 使用更简单的参数格式\n      const url = `https://power.larc.nasa.gov/api/temporal/climatology/point?` + `parameters=ALLSKY_SFC_SW_DWN&` + `community=RE&` + `longitude=${longitude}&` + `latitude=${latitude}&` + `format=JSON`;\n      console.log('NASA POWER Simple API URL:', url);\n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER Simple response:', data);\n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          // 转换climatology数据为月度格式\n          const monthlyData = Object.entries(data.properties.parameter.ALLSKY_SFC_SW_DWN).map(([month, value]) => ({\n            month: parseInt(month),\n            value: parseFloat(value)\n          })).sort((a, b) => a.month - b.month);\n          return {\n            success: true,\n            data: monthlyData,\n            isClimatology: true\n          };\n        }\n      }\n      return {\n        success: false,\n        error: `Simple NASA API error: ${response.status}`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Simple NASA API network error: ' + error.message\n      };\n    }\n  },\n  // 处理NASA数据为月度数据\n  processSolarData(nasaData, isClimatology = false) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log('Processing NASA solar data:', nasaData);\n    if (isClimatology) {\n      // 处理climatology数据 (月度平均值)\n      return months.map((month, index) => {\n        var _nasaData$find;\n        return {\n          month,\n          value: ((_nasaData$find = nasaData.find(d => d.month === index + 1)) === null || _nasaData$find === void 0 ? void 0 : _nasaData$find.value) || 0\n        };\n      });\n    }\n\n    // 处理时间序列数据\n    const monthlyData = months.map((month, index) => {\n      const monthNum = String(index + 1).padStart(2, '0');\n\n      // 找到该月份的所有年份数据\n      const monthValues = Object.entries(nasaData).filter(([key]) => key.endsWith(monthNum)).map(([, value]) => parseFloat(value)).filter(value => !isNaN(value) && value >= 0);\n      console.log(`${month} (${monthNum}):`, monthValues);\n\n      // 计算平均值\n      const avgValue = monthValues.length > 0 ? monthValues.reduce((sum, val) => sum + val, 0) / monthValues.length : 0;\n      return {\n        month,\n        value: Math.round(avgValue * 100) / 100\n      };\n    });\n    console.log('Processed solar data:', monthlyData);\n    return monthlyData;\n  },\n  // 处理Open Meteo温度数据为月度平均值\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n\n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length : 0;\n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n  // 获取完整的气候数据\n  async getCompleteClimateData(latitude, longitude) {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n\n      // 首先尝试标准API，如果失败则尝试简化API\n      let solarResult = await this.getSolarRadiationData(latitude, longitude);\n\n      // 如果标准API失败，尝试简化的climatology API\n      if (!solarResult.success) {\n        console.log('Standard NASA API failed, trying simple climatology API...');\n        solarResult = await this.getSolarRadiationDataSimple(latitude, longitude);\n      }\n\n      // 并行获取温度数据\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n      console.log('Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据\n      const solarData = this.processSolarData(solarResult.data, solarResult.isClimatology);\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        }\n      };\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["weatherService","getSolarRadiationData","latitude","longitude","years","currentDate","Date","currentYear","getFullYear","endYear","startYear","actualStartYear","Math","max","url","console","log","response","fetch","method","headers","ok","data","json","Object","keys","properties","parameter","ALLSKY_SFC_SW_DWN","success","info","error","errorMessage","status","statusText","errorData","message","header","messages","length","join","e","getTemperatureData","endDate","startDate","daily","time","temperature_2m_mean","timezone","reason","getSolarRadiationDataSimple","monthlyData","entries","map","month","value","parseInt","parseFloat","sort","a","b","isClimatology","processSolarData","nasaData","months","index","_nasaData$find","find","d","monthNum","String","padStart","monthValues","filter","key","endsWith","isNaN","avgValue","reduce","sum","val","round","processTemperatureData","openMeteoData","monthlyGroups","Array","fill","forEach","date","temp","getMonth","push","temps","avgTemp","getCompleteClimateData","solarResult","tempResult","Error","solarData","temperatureData","solar","temperature"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/weatherService.js"],"sourcesContent":["// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据\n  async getSolarRadiationData(latitude, longitude, years = 5) {\n    // 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    // 确保不会请求太早的数据（NASA POWER数据从1981年开始）\n    const actualStartYear = Math.max(startYear, 1981);\n    \n    try {\n      // 使用NASA POWER API v2.0的正确格式\n      const url = `https://power.larc.nasa.gov/api/temporal/monthly/point?` +\n        `parameters=ALLSKY_SFC_SW_DWN&` +\n        `community=RE&` +\n        `longitude=${longitude}&` +\n        `latitude=${latitude}&` +\n        `start=${actualStartYear}&` +  // 移除0101后缀\n        `end=${endYear}&` +            // 移除1231后缀\n        `format=JSON`;\n      \n      console.log('NASA POWER API URL:', url);\n      console.log(`Date range: ${actualStartYear}-${endYear} (${endYear - actualStartYear + 1} years)`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'RenewableCalculator/1.0'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER response structure:', Object.keys(data));\n        console.log('NASA POWER response:', data);\n        \n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          return { \n            success: true, \n            data: data.properties.parameter.ALLSKY_SFC_SW_DWN,\n            info: data.properties.parameter\n          };\n        } else {\n          console.error('Unexpected NASA response structure:', data);\n          return { success: false, error: 'Invalid NASA API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `NASA API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('NASA API error response:', errorData);\n        if (errorData.error && errorData.error.message) {\n          errorMessage += ` - ${errorData.error.message}`;\n        } else if (errorData.header) {\n          errorMessage += ` - ${errorData.header}`;\n        } else if (errorData.messages && errorData.messages.length > 0) {\n          errorMessage += ` - ${errorData.messages.join(', ')}`;\n        }\n      } catch (e) {\n        console.log('Could not parse error response');\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('NASA API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 获取Open Meteo气温数据\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    \n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` +\n        `latitude=${latitude}&` +\n        `longitude=${longitude}&` +\n        `start_date=${startDate}&` +\n        `end_date=${endDate}&` +\n        `daily=temperature_2m_mean&` +\n        `timezone=Europe/London`;\n      \n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        \n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return { \n            success: true, \n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return { success: false, error: 'Invalid Open-Meteo API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 尝试使用备用的简化NASA API调用\n  async getSolarRadiationDataSimple(latitude, longitude) {\n    try {\n      // 使用更简单的参数格式\n      const url = `https://power.larc.nasa.gov/api/temporal/climatology/point?` +\n        `parameters=ALLSKY_SFC_SW_DWN&` +\n        `community=RE&` +\n        `longitude=${longitude}&` +\n        `latitude=${latitude}&` +\n        `format=JSON`;\n      \n      console.log('NASA POWER Simple API URL:', url);\n      \n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER Simple response:', data);\n        \n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          // 转换climatology数据为月度格式\n          const monthlyData = Object.entries(data.properties.parameter.ALLSKY_SFC_SW_DWN)\n            .map(([month, value]) => ({\n              month: parseInt(month),\n              value: parseFloat(value)\n            }))\n            .sort((a, b) => a.month - b.month);\n          \n          return { \n            success: true, \n            data: monthlyData,\n            isClimatology: true\n          };\n        }\n      }\n      \n      return { success: false, error: `Simple NASA API error: ${response.status}` };\n    } catch (error) {\n      return { success: false, error: 'Simple NASA API network error: ' + error.message };\n    }\n  },\n\n  // 处理NASA数据为月度数据\n  processSolarData(nasaData, isClimatology = false) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log('Processing NASA solar data:', nasaData);\n    \n    if (isClimatology) {\n      // 处理climatology数据 (月度平均值)\n      return months.map((month, index) => ({\n        month,\n        value: nasaData.find(d => d.month === index + 1)?.value || 0\n      }));\n    }\n    \n    // 处理时间序列数据\n    const monthlyData = months.map((month, index) => {\n      const monthNum = String(index + 1).padStart(2, '0');\n      \n      // 找到该月份的所有年份数据\n      const monthValues = Object.entries(nasaData)\n        .filter(([key]) => key.endsWith(monthNum))\n        .map(([, value]) => parseFloat(value))\n        .filter(value => !isNaN(value) && value >= 0);\n      \n      console.log(`${month} (${monthNum}):`, monthValues);\n      \n      // 计算平均值\n      const avgValue = monthValues.length > 0 \n        ? monthValues.reduce((sum, val) => sum + val, 0) / monthValues.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgValue * 100) / 100\n      };\n    });\n\n    console.log('Processed solar data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 处理Open Meteo温度数据为月度平均值\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n    \n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    \n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 \n        ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 获取完整的气候数据\n  async getCompleteClimateData(latitude, longitude) {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n      \n      // 首先尝试标准API，如果失败则尝试简化API\n      let solarResult = await this.getSolarRadiationData(latitude, longitude);\n      \n      // 如果标准API失败，尝试简化的climatology API\n      if (!solarResult.success) {\n        console.log('Standard NASA API failed, trying simple climatology API...');\n        solarResult = await this.getSolarRadiationDataSimple(latitude, longitude);\n      }\n      \n      // 并行获取温度数据\n      const tempResult = await this.getTemperatureData(latitude, longitude);\n\n      console.log('Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据\n      const solarData = this.processSolarData(solarResult.data, solarResult.isClimatology);\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        }\n      };\n\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}