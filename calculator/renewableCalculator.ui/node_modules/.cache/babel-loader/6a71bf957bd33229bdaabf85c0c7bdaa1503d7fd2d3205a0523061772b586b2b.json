{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/EnergyDemandChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { calculateElectricityDemand, calculateGasDemand } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst EnergyDemandChart = ({\n  userData\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [summaryData, setSummaryData] = useState(null);\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  useEffect(() => {\n    const fetchEnergyDemandData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Prepare electricity demand request\n        const electricityRequest = {\n          needsEstimation: true,\n          occupants: userData.occupants || 3,\n          hotWaterType: userData.hotWaterType || 'gas-boiler',\n          heatingType: userData.heatingType || 'gas',\n          houseArea: userData.houseArea || 100,\n          buildYear: userData.buildYear || '1981-2002',\n          wallType: userData.wallType || 'modern',\n          // Updated default to match new options\n          windowType: userData.windowType || 'double',\n          houseType: userData.houseType || 'semi-detached',\n          epcRating: userData.epcRating || 'D'\n        };\n\n        // Prepare gas demand request\n        const gasRequest = {\n          needsEstimation: true,\n          occupants: userData.occupants || 3,\n          hotWaterType: userData.hotWaterType || 'gas-boiler',\n          heatingType: userData.heatingType || 'gas',\n          houseArea: userData.houseArea || 100,\n          buildYear: userData.buildYear || '1981-2002',\n          wallType: userData.wallType || 'modern',\n          // Updated default to match new options\n          windowType: userData.windowType || 'double',\n          houseType: userData.houseType || 'semi-detached',\n          epcRating: userData.epcRating || 'D'\n        };\n\n        // Fetch both electricity and gas demand data\n        const [electricityResponse, gasResponse] = await Promise.all([calculateElectricityDemand(electricityRequest), calculateGasDemand(gasRequest)]);\n        const electricityData = electricityResponse.data;\n        const gasData = gasResponse.data;\n\n        // Extract monthly data\n        const electricityMonthly = [];\n        const gasMonthly = [];\n        for (let month = 1; month <= 12; month++) {\n          electricityMonthly.push(electricityData.monthlyElectricityDemand[month] || 0);\n          gasMonthly.push(gasData.monthlyGasDemand[month] || 0);\n        }\n\n        // Prepare chart data\n        const chartDataConfig = {\n          labels: months,\n          datasets: [{\n            label: 'Electricity Demand (kWh)',\n            data: electricityMonthly,\n            borderColor: 'rgb(75, 192, 192)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            tension: 0.1,\n            pointRadius: 5,\n            pointHoverRadius: 7\n          }, {\n            label: 'Gas Demand (kWh)',\n            data: gasMonthly,\n            borderColor: 'rgb(255, 99, 132)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            tension: 0.1,\n            pointRadius: 5,\n            pointHoverRadius: 7\n          }]\n        };\n        setChartData(chartDataConfig);\n\n        // Set summary data\n        setSummaryData({\n          electricity: {\n            annual: electricityData.annualElectricityDemand,\n            peak: electricityData.peakMonthDemand,\n            peakMonth: months[electricityData.peakMonth - 1],\n            low: electricityData.lowMonthDemand,\n            lowMonth: months[electricityData.lowMonth - 1],\n            method: electricityData.calculationMethod\n          },\n          gas: {\n            annual: gasData.annualGasDemand,\n            peak: gasData.peakMonthDemand,\n            peakMonth: months[gasData.peakMonth - 1],\n            low: gasData.lowMonthDemand,\n            lowMonth: months[gasData.lowMonth - 1],\n            method: gasData.calculationMethod\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching energy demand data:', error);\n        setError('Failed to load energy demand data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (userData) {\n      fetchEnergyDemandData();\n    }\n  }, [userData]);\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Monthly Energy Demand'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Energy Demand (kWh)'\n        },\n        beginAtZero: true\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-demand-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading energy demand data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-demand-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Energy Demand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-state\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"energy-demand-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Energy Demand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), summaryData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"energy-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energy-summary-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"energy-type-summary electricity-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Electricity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Annual Demand\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.annual.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Peak Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.peakMonth, \": \", summaryData.electricity.peak.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Low Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.electricity.lowMonth, \": \", summaryData.electricity.low.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"energy-type-summary gas-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Gas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Annual Demand\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.annual.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Peak Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.peakMonth, \": \", summaryData.gas.peak.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Low Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-value\",\n                children: [summaryData.gas.lowMonth, \": \", summaryData.gas.low.toFixed(0), \" kWh\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), summaryData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculation-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"calculation-method\",\n        children: \"Data calculated using estimation method based on your house characteristics and occupancy.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(EnergyDemandChart, \"CYqLpX+Z0+btA8Aer/vtaoJr7H0=\");\n_c = EnergyDemandChart;\nexport default EnergyDemandChart;\nvar _c;\n$RefreshReg$(_c, \"EnergyDemandChart\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","calculateElectricityDemand","calculateGasDemand","jsxDEV","_jsxDEV","register","EnergyDemandChart","userData","_s","chartData","setChartData","loading","setLoading","error","setError","summaryData","setSummaryData","months","fetchEnergyDemandData","electricityRequest","needsEstimation","occupants","hotWaterType","heatingType","houseArea","buildYear","wallType","windowType","houseType","epcRating","gasRequest","electricityResponse","gasResponse","Promise","all","electricityData","data","gasData","electricityMonthly","gasMonthly","month","push","monthlyElectricityDemand","monthlyGasDemand","chartDataConfig","labels","datasets","label","borderColor","backgroundColor","tension","pointRadius","pointHoverRadius","electricity","annual","annualElectricityDemand","peak","peakMonthDemand","peakMonth","low","lowMonthDemand","lowMonth","method","calculationMethod","gas","annualGasDemand","console","chartOptions","responsive","plugins","legend","position","title","display","text","tooltip","mode","intersect","callbacks","context","dataset","parsed","y","toFixed","scales","x","beginAtZero","interaction","axis","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/EnergyDemandChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { calculateElectricityDemand, calculateGasDemand } from '../api';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst EnergyDemandChart = ({ userData }) => {\n  const [chartData, setChartData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [summaryData, setSummaryData] = useState(null);\n\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  useEffect(() => {\n    const fetchEnergyDemandData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Prepare electricity demand request\n        const electricityRequest = {\n          needsEstimation: true,\n          occupants: userData.occupants || 3,\n          hotWaterType: userData.hotWaterType || 'gas-boiler',\n          heatingType: userData.heatingType || 'gas',\n          houseArea: userData.houseArea || 100,\n          buildYear: userData.buildYear || '1981-2002',\n          wallType: userData.wallType || 'modern',  // Updated default to match new options\n          windowType: userData.windowType || 'double',\n          houseType: userData.houseType || 'semi-detached',\n          epcRating: userData.epcRating || 'D'\n        };\n\n        // Prepare gas demand request\n        const gasRequest = {\n          needsEstimation: true,\n          occupants: userData.occupants || 3,\n          hotWaterType: userData.hotWaterType || 'gas-boiler',\n          heatingType: userData.heatingType || 'gas',\n          houseArea: userData.houseArea || 100,\n          buildYear: userData.buildYear || '1981-2002',\n          wallType: userData.wallType || 'modern',  // Updated default to match new options\n          windowType: userData.windowType || 'double',\n          houseType: userData.houseType || 'semi-detached',\n          epcRating: userData.epcRating || 'D'\n        };\n\n        // Fetch both electricity and gas demand data\n        const [electricityResponse, gasResponse] = await Promise.all([\n          calculateElectricityDemand(electricityRequest),\n          calculateGasDemand(gasRequest)\n        ]);\n\n        const electricityData = electricityResponse.data;\n        const gasData = gasResponse.data;\n\n        // Extract monthly data\n        const electricityMonthly = [];\n        const gasMonthly = [];\n\n        for (let month = 1; month <= 12; month++) {\n          electricityMonthly.push(electricityData.monthlyElectricityDemand[month] || 0);\n          gasMonthly.push(gasData.monthlyGasDemand[month] || 0);\n        }\n\n        // Prepare chart data\n        const chartDataConfig = {\n          labels: months,\n          datasets: [\n            {\n              label: 'Electricity Demand (kWh)',\n              data: electricityMonthly,\n              borderColor: 'rgb(75, 192, 192)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n            },\n            {\n              label: 'Gas Demand (kWh)',\n              data: gasMonthly,\n              borderColor: 'rgb(255, 99, 132)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              tension: 0.1,\n              pointRadius: 5,\n              pointHoverRadius: 7,\n            }\n          ]\n        };\n\n        setChartData(chartDataConfig);\n\n        // Set summary data\n        setSummaryData({\n          electricity: {\n            annual: electricityData.annualElectricityDemand,\n            peak: electricityData.peakMonthDemand,\n            peakMonth: months[electricityData.peakMonth - 1],\n            low: electricityData.lowMonthDemand,\n            lowMonth: months[electricityData.lowMonth - 1],\n            method: electricityData.calculationMethod\n          },\n          gas: {\n            annual: gasData.annualGasDemand,\n            peak: gasData.peakMonthDemand,\n            peakMonth: months[gasData.peakMonth - 1],\n            low: gasData.lowMonthDemand,\n            lowMonth: months[gasData.lowMonth - 1],\n            method: gasData.calculationMethod\n          }\n        });\n\n      } catch (error) {\n        console.error('Error fetching energy demand data:', error);\n        setError('Failed to load energy demand data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userData) {\n      fetchEnergyDemandData();\n    }\n  }, [userData]);\n\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Monthly Energy Demand'\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y.toFixed(1)} kWh`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Energy Demand (kWh)'\n        },\n        beginAtZero: true\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"loading-state\">\n          <p>Loading energy demand data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"energy-demand-section\">\n        <h3>Energy Demand</h3>\n        <div className=\"error-state\">\n          <p className=\"error-message\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"energy-demand-section\">\n      <h3>Energy Demand</h3>\n      \n      {/* Summary Statistics */}\n      {summaryData && (\n        <div className=\"energy-summary\">\n          <div className=\"energy-summary-grid\">\n            <div className=\"energy-type-summary electricity-summary\">\n              <h4>Electricity</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.electricity.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.peakMonth}: {summaryData.electricity.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.electricity.lowMonth}: {summaryData.electricity.low.toFixed(0)} kWh</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"energy-type-summary gas-summary\">\n              <h4>Gas</h4>\n              <div className=\"summary-stats\">\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Annual Demand</span>\n                  <span className=\"stat-value\">{summaryData.gas.annual.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Peak Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.peakMonth}: {summaryData.gas.peak.toFixed(0)} kWh</span>\n                </div>\n                <div className=\"stat-item\">\n                  <span className=\"stat-label\">Low Month</span>\n                  <span className=\"stat-value\">{summaryData.gas.lowMonth}: {summaryData.gas.low.toFixed(0)} kWh</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Chart */}\n      <div className=\"chart-container\">\n        {chartData && (\n          <Line data={chartData} options={chartOptions} />\n        )}\n      </div>\n\n      {/* Method Information */}\n      {summaryData && (\n        <div className=\"calculation-info\">\n          <p className=\"calculation-method\">\n            Data calculated using estimation method based on your house characteristics and occupancy.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnergyDemandChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}