{"ast":null,"code":"import _objectSpread from\"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{calculateSolarPotential}from'../../../api';import{getNextRoofNumber}from'./roofLabelUtils';import RoofConfigForm from'./RoofConfigForm';import SolarPotentialCalculation from'./SolarPotentialCalculation';import AddedRoofsList from'./AddedRoofsList';import RoofHelpModals from'./RoofHelpModals';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const RoofConfigurationForm=_ref=>{let{roofConfig,onConfigChange,projectedArea,actualRoofArea,visible=true,addedRoofs=[],onRoofsUpdate,onClearMeasurement,onAddAnotherRoof}=_ref;const[showAngleTooltip,setShowAngleTooltip]=useState(false);const[showShadingTooltip,setShowShadingTooltip]=useState(false);const[showUtilisationTooltip,setShowUtilisationTooltip]=useState(false);const[solarPotentialResult,setSolarPotentialResult]=useState(null);const[showPotentialResults,setShowPotentialResults]=useState(false);const[isCalculating,setIsCalculating]=useState(false);if(!visible)return null;// Determine which area to display\nconst displayArea=actualRoofArea||projectedArea;const currentRoofNumber=getNextRoofNumber(addedRoofs);// Check if all required fields are filled for solar potential calculation\nconst isReadyForCalculation=()=>{return displayArea>0&&roofConfig.roofOrientation&&roofConfig.roofAngle!==''&&roofConfig.roofShading&&roofConfig.roofUtilisation;};const handleSolarPotentialCalculation=async()=>{if(!isReadyForCalculation())return;setIsCalculating(true);try{const request={roofSize:displayArea,shadingLevel:roofConfig.roofShading,utilisationLevel:roofConfig.roofUtilisation,tiltAngle:parseInt(roofConfig.roofAngle),orientation:roofConfig.roofOrientation};const response=await calculateSolarPotential(request);// Transform backend response to match frontend format\nconst result={solarPotential:parseFloat(response.data.solarPotential),solarPanelCount:response.data.solarPanelCount,factors:{shading:parseFloat(response.data.shadingFactor),utilisation:parseFloat(response.data.utilisationFactor),tiltOrientation:parseFloat(response.data.tiltOrientationFactor)}};setSolarPotentialResult(result);setShowPotentialResults(true);}catch(error){console.error('Error calculating solar potential:',error);// Fallback to a default result or show error message\nalert('Failed to calculate solar potential. Please try again.');}finally{setIsCalculating(false);}};const handleAddRoof=()=>{if(!solarPotentialResult)return;const newRoof={id:currentRoofNumber,area:displayArea,orientation:roofConfig.roofOrientation,angle:roofConfig.roofAngle,shading:roofConfig.roofShading,utilisation:roofConfig.roofUtilisation,solarPotential:solarPotentialResult.solarPotential,solarPanelCount:solarPotentialResult.solarPanelCount,config:_objectSpread({},roofConfig),selected:true// Default to selected for installation\n};const updatedRoofs=[...addedRoofs,newRoof];onRoofsUpdate(updatedRoofs);// Reset states but keep current measurement visible\nsetShowPotentialResults(false);setSolarPotentialResult(null);// Clear current configuration but keep the measurement\nonConfigChange('roofOrientation','');onConfigChange('roofAngle','');onConfigChange('roofShading','');onConfigChange('roofUtilisation','');};const handleRemoveRoof=roofId=>{const updatedRoofs=addedRoofs.filter(roof=>roof.id!==roofId);onRoofsUpdate(updatedRoofs);};// Tooltip handlers\nconst toggleAngleTooltip=()=>setShowAngleTooltip(!showAngleTooltip);const toggleShadingTooltip=()=>setShowShadingTooltip(!showShadingTooltip);const toggleUtilisationTooltip=()=>setShowUtilisationTooltip(!showUtilisationTooltip);return/*#__PURE__*/_jsxs(\"div\",{className:\"roof-configuration\",children:[projectedArea>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Roof \",currentRoofNumber,\" Details\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"roof-size-display\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"roof-size-label\",children:\"Roof Size:\"}),/*#__PURE__*/_jsxs(\"strong\",{className:\"roof-size-value\",children:[displayArea.toFixed(2),\" m\\xB2\"]})]}),/*#__PURE__*/_jsx(RoofConfigForm,{roofConfig:roofConfig,onConfigChange:onConfigChange,onShowAngleTooltip:toggleAngleTooltip,onShowShadingTooltip:toggleShadingTooltip,onShowUtilisationTooltip:toggleUtilisationTooltip}),/*#__PURE__*/_jsx(SolarPotentialCalculation,{isReadyForCalculation:isReadyForCalculation(),onCalculate:handleSolarPotentialCalculation,showResults:showPotentialResults,result:solarPotentialResult,currentRoofNumber:currentRoofNumber,onAddRoof:handleAddRoof,isCalculating:isCalculating})]}),/*#__PURE__*/_jsx(AddedRoofsList,{addedRoofs:addedRoofs,onRemoveRoof:handleRemoveRoof,showTotal:false}),/*#__PURE__*/_jsx(RoofHelpModals,{showAngleTooltip:showAngleTooltip,showShadingTooltip:showShadingTooltip,showUtilisationTooltip:showUtilisationTooltip,onToggleAngleTooltip:toggleAngleTooltip,onToggleShadingTooltip:toggleShadingTooltip,onToggleUtilisationTooltip:toggleUtilisationTooltip})]});};export default RoofConfigurationForm;","map":{"version":3,"names":["React","useState","calculateSolarPotential","getNextRoofNumber","RoofConfigForm","SolarPotentialCalculation","AddedRoofsList","RoofHelpModals","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","RoofConfigurationForm","_ref","roofConfig","onConfigChange","projectedArea","actualRoofArea","visible","addedRoofs","onRoofsUpdate","onClearMeasurement","onAddAnotherRoof","showAngleTooltip","setShowAngleTooltip","showShadingTooltip","setShowShadingTooltip","showUtilisationTooltip","setShowUtilisationTooltip","solarPotentialResult","setSolarPotentialResult","showPotentialResults","setShowPotentialResults","isCalculating","setIsCalculating","displayArea","currentRoofNumber","isReadyForCalculation","roofOrientation","roofAngle","roofShading","roofUtilisation","handleSolarPotentialCalculation","request","roofSize","shadingLevel","utilisationLevel","tiltAngle","parseInt","orientation","response","result","solarPotential","parseFloat","data","solarPanelCount","factors","shading","shadingFactor","utilisation","utilisationFactor","tiltOrientation","tiltOrientationFactor","error","console","alert","handleAddRoof","newRoof","id","area","angle","config","_objectSpread","selected","updatedRoofs","handleRemoveRoof","roofId","filter","roof","toggleAngleTooltip","toggleShadingTooltip","toggleUtilisationTooltip","className","children","toFixed","onShowAngleTooltip","onShowShadingTooltip","onShowUtilisationTooltip","onCalculate","showResults","onAddRoof","onRemoveRoof","showTotal","onToggleAngleTooltip","onToggleShadingTooltip","onToggleUtilisationTooltip"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/RoofConfigurationForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { calculateSolarPotential } from '../../../api';\nimport { getNextRoofNumber } from './roofLabelUtils';\nimport RoofConfigForm from './RoofConfigForm';\nimport SolarPotentialCalculation from './SolarPotentialCalculation';\nimport AddedRoofsList from './AddedRoofsList';\nimport RoofHelpModals from './RoofHelpModals';\n\nconst RoofConfigurationForm = ({ \n  roofConfig, \n  onConfigChange, \n  projectedArea, \n  actualRoofArea, \n  visible = true, \n  addedRoofs = [], \n  onRoofsUpdate, \n  onClearMeasurement,\n  onAddAnotherRoof\n}) => {\n  const [showAngleTooltip, setShowAngleTooltip] = useState(false);\n  const [showShadingTooltip, setShowShadingTooltip] = useState(false);\n  const [showUtilisationTooltip, setShowUtilisationTooltip] = useState(false);\n  const [solarPotentialResult, setSolarPotentialResult] = useState(null);\n  const [showPotentialResults, setShowPotentialResults] = useState(false);\n  const [isCalculating, setIsCalculating] = useState(false);\n  \n  if (!visible) return null;\n\n  // Determine which area to display\n  const displayArea = actualRoofArea || projectedArea;\n  const currentRoofNumber = getNextRoofNumber(addedRoofs);\n\n  // Check if all required fields are filled for solar potential calculation\n  const isReadyForCalculation = () => {\n    return displayArea > 0 &&\n           roofConfig.roofOrientation &&\n           roofConfig.roofAngle !== '' &&\n           roofConfig.roofShading &&\n           roofConfig.roofUtilisation;\n  };\n\n  const handleSolarPotentialCalculation = async () => {\n    if (!isReadyForCalculation()) return;\n\n    setIsCalculating(true);\n    try {\n      const request = {\n        roofSize: displayArea,\n        shadingLevel: roofConfig.roofShading,\n        utilisationLevel: roofConfig.roofUtilisation,\n        tiltAngle: parseInt(roofConfig.roofAngle),\n        orientation: roofConfig.roofOrientation\n      };\n\n      const response = await calculateSolarPotential(request);\n      \n      // Transform backend response to match frontend format\n      const result = {\n        solarPotential: parseFloat(response.data.solarPotential),\n        solarPanelCount: response.data.solarPanelCount,\n        factors: {\n          shading: parseFloat(response.data.shadingFactor),\n          utilisation: parseFloat(response.data.utilisationFactor),\n          tiltOrientation: parseFloat(response.data.tiltOrientationFactor)\n        }\n      };\n\n      setSolarPotentialResult(result);\n      setShowPotentialResults(true);\n    } catch (error) {\n      console.error('Error calculating solar potential:', error);\n      // Fallback to a default result or show error message\n      alert('Failed to calculate solar potential. Please try again.');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const handleAddRoof = () => {\n    if (!solarPotentialResult) return;\n\n    const newRoof = {\n      id: currentRoofNumber,\n      area: displayArea,\n      orientation: roofConfig.roofOrientation,\n      angle: roofConfig.roofAngle,\n      shading: roofConfig.roofShading,\n      utilisation: roofConfig.roofUtilisation,\n      solarPotential: solarPotentialResult.solarPotential,\n      solarPanelCount: solarPotentialResult.solarPanelCount,\n      config: { ...roofConfig },\n      selected: true // Default to selected for installation\n    };\n\n    const updatedRoofs = [...addedRoofs, newRoof];\n    onRoofsUpdate(updatedRoofs);\n    \n    // Reset states but keep current measurement visible\n    setShowPotentialResults(false);\n    setSolarPotentialResult(null);\n    \n    // Clear current configuration but keep the measurement\n    onConfigChange('roofOrientation', '');\n    onConfigChange('roofAngle', '');\n    onConfigChange('roofShading', '');\n    onConfigChange('roofUtilisation', '');\n  };\n\n  const handleRemoveRoof = (roofId) => {\n    const updatedRoofs = addedRoofs.filter(roof => roof.id !== roofId);\n    onRoofsUpdate(updatedRoofs);\n  };\n\n  // Tooltip handlers\n  const toggleAngleTooltip = () => setShowAngleTooltip(!showAngleTooltip);\n  const toggleShadingTooltip = () => setShowShadingTooltip(!showShadingTooltip);\n  const toggleUtilisationTooltip = () => setShowUtilisationTooltip(!showUtilisationTooltip);\n\n  return (\n    <div className=\"roof-configuration\">\n      {/* Current Roof Configuration - Only show when measuring a new roof */}\n      {projectedArea > 0 && (\n        <>\n          <h4>Roof {currentRoofNumber} Details</h4>\n          \n          {/* Roof Size Display */}\n          <div className=\"roof-size-display\">\n            <span className=\"roof-size-label\">Roof Size:</span>\n            <strong className=\"roof-size-value\">{displayArea.toFixed(2)} m²</strong>\n          </div>\n          \n          <RoofConfigForm\n            roofConfig={roofConfig}\n            onConfigChange={onConfigChange}\n            onShowAngleTooltip={toggleAngleTooltip}\n            onShowShadingTooltip={toggleShadingTooltip}\n            onShowUtilisationTooltip={toggleUtilisationTooltip}\n          />\n\n          <SolarPotentialCalculation\n            isReadyForCalculation={isReadyForCalculation()}\n            onCalculate={handleSolarPotentialCalculation}\n            showResults={showPotentialResults}\n            result={solarPotentialResult}\n            currentRoofNumber={currentRoofNumber}\n            onAddRoof={handleAddRoof}\n            isCalculating={isCalculating}\n          />\n        </>\n      )}\n\n      {/* Added Roofs Display */}\n      <AddedRoofsList \n        addedRoofs={addedRoofs} \n        onRemoveRoof={handleRemoveRoof}\n        showTotal={false}\n      />\n\n      {/* Help Modals */}\n      <RoofHelpModals\n        showAngleTooltip={showAngleTooltip}\n        showShadingTooltip={showShadingTooltip}\n        showUtilisationTooltip={showUtilisationTooltip}\n        onToggleAngleTooltip={toggleAngleTooltip}\n        onToggleShadingTooltip={toggleShadingTooltip}\n        onToggleUtilisationTooltip={toggleUtilisationTooltip}\n      />\n    </div>\n  );\n};\n\nexport default RoofConfigurationForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}