{"ast":null,"code":"// Utility functions for roof area calculations\n\n/**\n * Calculate actual roof area based on projected area and roof angle\n * Formula: Roof Area = Horizontal projected area / cos(roof angle)\n */\nexport const calculateActualRoofArea = (projectedArea, angle) => {\n  // Ensure projectedArea is a valid number\n  const validProjectedArea = typeof projectedArea === 'number' && !isNaN(projectedArea) ? projectedArea : 0;\n\n  // Return projected area if angle is not provided or invalid\n  if (angle === '' || angle === null || angle === undefined) return validProjectedArea;\n  const angleInRadians = parseFloat(angle) * Math.PI / 180;\n  const cosAngle = Math.cos(angleInRadians);\n\n  // Avoid division by zero for 90-degree angles\n  if (Math.abs(cosAngle) < 0.001) return validProjectedArea * 100; // Very steep roof\n\n  return validProjectedArea / cosAngle;\n};\n\n/**\n * Calculate estimated solar panel capacity based on roof area\n */\nexport const calculateSolarCapacity = roofArea => {\n  return roofArea * 0.15; // 150W/m²\n};\n\n/**\n * Calculate approximate panel count based on roof area\n */\nexport const calculatePanelCount = roofArea => {\n  return Math.floor(roofArea / 2); // 2m² per panel\n};\n\n/**\n * Calculate area adjustment factor\n */\nexport const calculateAdjustmentFactor = (actualArea, projectedArea) => {\n  if (!projectedArea || projectedArea === 0) return 1;\n  return actualArea / projectedArea;\n};","map":{"version":3,"names":["calculateActualRoofArea","projectedArea","angle","validProjectedArea","isNaN","undefined","angleInRadians","parseFloat","Math","PI","cosAngle","cos","abs","calculateSolarCapacity","roofArea","calculatePanelCount","floor","calculateAdjustmentFactor","actualArea"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/components/steps/roof-condition/roofAreaUtils.js"],"sourcesContent":["// Utility functions for roof area calculations\n\n/**\n * Calculate actual roof area based on projected area and roof angle\n * Formula: Roof Area = Horizontal projected area / cos(roof angle)\n */\nexport const calculateActualRoofArea = (projectedArea, angle) => {\n  // Ensure projectedArea is a valid number\n  const validProjectedArea = (typeof projectedArea === 'number' && !isNaN(projectedArea)) ? projectedArea : 0;\n  \n  // Return projected area if angle is not provided or invalid\n  if (angle === '' || angle === null || angle === undefined) return validProjectedArea;\n  \n  const angleInRadians = (parseFloat(angle) * Math.PI) / 180;\n  const cosAngle = Math.cos(angleInRadians);\n  \n  // Avoid division by zero for 90-degree angles\n  if (Math.abs(cosAngle) < 0.001) return validProjectedArea * 100; // Very steep roof\n  \n  return validProjectedArea / cosAngle;\n};\n\n/**\n * Calculate estimated solar panel capacity based on roof area\n */\nexport const calculateSolarCapacity = (roofArea) => {\n  return roofArea * 0.15; // 150W/m²\n};\n\n/**\n * Calculate approximate panel count based on roof area\n */\nexport const calculatePanelCount = (roofArea) => {\n  return Math.floor(roofArea / 2); // 2m² per panel\n};\n\n/**\n * Calculate area adjustment factor\n */\nexport const calculateAdjustmentFactor = (actualArea, projectedArea) => {\n  if (!projectedArea || projectedArea === 0) return 1;\n  return actualArea / projectedArea;\n}; "],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAGA,CAACC,aAAa,EAAEC,KAAK,KAAK;EAC/D;EACA,MAAMC,kBAAkB,GAAI,OAAOF,aAAa,KAAK,QAAQ,IAAI,CAACG,KAAK,CAACH,aAAa,CAAC,GAAIA,aAAa,GAAG,CAAC;;EAE3G;EACA,IAAIC,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKG,SAAS,EAAE,OAAOF,kBAAkB;EAEpF,MAAMG,cAAc,GAAIC,UAAU,CAACL,KAAK,CAAC,GAAGM,IAAI,CAACC,EAAE,GAAI,GAAG;EAC1D,MAAMC,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAACL,cAAc,CAAC;;EAEzC;EACA,IAAIE,IAAI,CAACI,GAAG,CAACF,QAAQ,CAAC,GAAG,KAAK,EAAE,OAAOP,kBAAkB,GAAG,GAAG,CAAC,CAAC;;EAEjE,OAAOA,kBAAkB,GAAGO,QAAQ;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,sBAAsB,GAAIC,QAAQ,IAAK;EAClD,OAAOA,QAAQ,GAAG,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAID,QAAQ,IAAK;EAC/C,OAAON,IAAI,CAACQ,KAAK,CAACF,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,yBAAyB,GAAGA,CAACC,UAAU,EAAEjB,aAAa,KAAK;EACtE,IAAI,CAACA,aAAa,IAAIA,aAAa,KAAK,CAAC,EAAE,OAAO,CAAC;EACnD,OAAOiB,UAAU,GAAGjB,aAAa;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}