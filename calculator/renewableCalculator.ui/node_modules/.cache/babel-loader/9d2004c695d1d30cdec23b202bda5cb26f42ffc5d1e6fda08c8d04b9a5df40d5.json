{"ast":null,"code":"// Tariff Constants and Helper Functions\nexport const majorSuppliers=['British Gas','E.ON','EDF Energy','Npower','ScottishPower','SSE','Bulb','Octopus Energy','Avro Energy','Together Energy','Green Supplier Limited','Pure Planet','Shell Energy','So Energy','Utility Warehouse','Other'];export const getCurrentElectricityInfo=electricityRate=>{if(!electricityRate)return\"Please enter your current electricity rate\";const rate=parseFloat(electricityRate);if(rate<15)return\"This rate seems low - please check it's in pence per kWh\";if(rate>50)return\"This rate seems high - renewable energy could provide significant savings\";if(rate>=15&&rate<=25)return\"Standard rate - renewable energy will provide good savings\";if(rate>25&&rate<=35)return\"Above average rate - excellent potential for renewable energy savings\";return\"High rate - renewable energy systems will be very beneficial\";};// Check if tariff type requires additional rate inputs\nexport const requiresTimeOfUseRates=electricityTariffType=>{return electricityTariffType==='time-of-use';};export const requiresEconomy7Rates=electricityTariffType=>{return electricityTariffType==='economy7';};export const requiresEconomy10Rates=electricityTariffType=>{return electricityTariffType==='economy10';};export const calculateTotalUsagePercentage=formData=>{const peak=parseFloat(formData.peakUsagePercentage)||0;const offPeak=parseFloat(formData.offPeakUsagePercentage)||0;const standard=parseFloat(formData.standardUsagePercentage)||0;return peak+offPeak+standard;};","map":{"version":3,"names":["majorSuppliers","getCurrentElectricityInfo","electricityRate","rate","parseFloat","requiresTimeOfUseRates","electricityTariffType","requiresEconomy7Rates","requiresEconomy10Rates","calculateTotalUsagePercentage","formData","peak","peakUsagePercentage","offPeak","offPeakUsagePercentage","standard","standardUsagePercentage"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/tariffs/tariffConstants.js"],"sourcesContent":["// Tariff Constants and Helper Functions\n\nexport const majorSuppliers = [\n  'British Gas', 'E.ON', 'EDF Energy', 'Npower', 'ScottishPower', 'SSE',\n  'Bulb', 'Octopus Energy', 'Avro Energy', 'Together Energy', 'Green Supplier Limited',\n  'Pure Planet', 'Shell Energy', 'So Energy', 'Utility Warehouse', 'Other'\n];\n\nexport const getCurrentElectricityInfo = (electricityRate) => {\n  if (!electricityRate) return \"Please enter your current electricity rate\";\n  \n  const rate = parseFloat(electricityRate);\n  if (rate < 15) return \"This rate seems low - please check it's in pence per kWh\";\n  if (rate > 50) return \"This rate seems high - renewable energy could provide significant savings\";\n  if (rate >= 15 && rate <= 25) return \"Standard rate - renewable energy will provide good savings\";\n  if (rate > 25 && rate <= 35) return \"Above average rate - excellent potential for renewable energy savings\";\n  return \"High rate - renewable energy systems will be very beneficial\";\n};\n\n// Check if tariff type requires additional rate inputs\nexport const requiresTimeOfUseRates = (electricityTariffType) => {\n  return electricityTariffType === 'time-of-use';\n};\n\nexport const requiresEconomy7Rates = (electricityTariffType) => {\n  return electricityTariffType === 'economy7';\n};\n\nexport const requiresEconomy10Rates = (electricityTariffType) => {\n  return electricityTariffType === 'economy10';\n};\n\nexport const calculateTotalUsagePercentage = (formData) => {\n  const peak = parseFloat(formData.peakUsagePercentage) || 0;\n  const offPeak = parseFloat(formData.offPeakUsagePercentage) || 0;\n  const standard = parseFloat(formData.standardUsagePercentage) || 0;\n  return peak + offPeak + standard;\n}; "],"mappings":"AAAA;AAEA,MAAO,MAAM,CAAAA,cAAc,CAAG,CAC5B,aAAa,CAAE,MAAM,CAAE,YAAY,CAAE,QAAQ,CAAE,eAAe,CAAE,KAAK,CACrE,MAAM,CAAE,gBAAgB,CAAE,aAAa,CAAE,iBAAiB,CAAE,wBAAwB,CACpF,aAAa,CAAE,cAAc,CAAE,WAAW,CAAE,mBAAmB,CAAE,OAAO,CACzE,CAED,MAAO,MAAM,CAAAC,yBAAyB,CAAIC,eAAe,EAAK,CAC5D,GAAI,CAACA,eAAe,CAAE,MAAO,4CAA4C,CAEzE,KAAM,CAAAC,IAAI,CAAGC,UAAU,CAACF,eAAe,CAAC,CACxC,GAAIC,IAAI,CAAG,EAAE,CAAE,MAAO,0DAA0D,CAChF,GAAIA,IAAI,CAAG,EAAE,CAAE,MAAO,2EAA2E,CACjG,GAAIA,IAAI,EAAI,EAAE,EAAIA,IAAI,EAAI,EAAE,CAAE,MAAO,4DAA4D,CACjG,GAAIA,IAAI,CAAG,EAAE,EAAIA,IAAI,EAAI,EAAE,CAAE,MAAO,uEAAuE,CAC3G,MAAO,8DAA8D,CACvE,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,sBAAsB,CAAIC,qBAAqB,EAAK,CAC/D,MAAO,CAAAA,qBAAqB,GAAK,aAAa,CAChD,CAAC,CAED,MAAO,MAAM,CAAAC,qBAAqB,CAAID,qBAAqB,EAAK,CAC9D,MAAO,CAAAA,qBAAqB,GAAK,UAAU,CAC7C,CAAC,CAED,MAAO,MAAM,CAAAE,sBAAsB,CAAIF,qBAAqB,EAAK,CAC/D,MAAO,CAAAA,qBAAqB,GAAK,WAAW,CAC9C,CAAC,CAED,MAAO,MAAM,CAAAG,6BAA6B,CAAIC,QAAQ,EAAK,CACzD,KAAM,CAAAC,IAAI,CAAGP,UAAU,CAACM,QAAQ,CAACE,mBAAmB,CAAC,EAAI,CAAC,CAC1D,KAAM,CAAAC,OAAO,CAAGT,UAAU,CAACM,QAAQ,CAACI,sBAAsB,CAAC,EAAI,CAAC,CAChE,KAAM,CAAAC,QAAQ,CAAGX,UAAU,CAACM,QAAQ,CAACM,uBAAuB,CAAC,EAAI,CAAC,CAClE,MAAO,CAAAL,IAAI,CAAGE,OAAO,CAAGE,QAAQ,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}