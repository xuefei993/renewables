{"ast":null,"code":"// Solar potential calculation utilities\n\n// Shading factors from the UI descriptions\nexport const SHADING_FACTORS = {\n  'no-shading': 1.0,\n  'light': 0.90,\n  'moderate': 0.70,\n  'heavy': 0.50,\n  'extreme': 0.20\n};\n\n// Utilisation factors based on roof complexity\nexport const UTILISATION_FACTORS = {\n  'minimal-obstacles': 0.95,\n  // Almost full roof utilization\n  'slightly-complex': 0.85,\n  // Some obstacles, good utilization\n  'moderately-complex': 0.70,\n  // Multiple obstacles, moderate utilization\n  'highly-complex': 0.55,\n  // Many obstacles, limited utilization\n  'extremely-complex': 0.30 // Very poor layout, minimal utilization\n};\n\n// Tilt and Orientation Correction Factor table (based on the provided heatmap)\n// Rows: Tilt angles (0°, 10°, 20°, 30°, 40°, 50°, 60°, 70°, 80°, 90°)\n// Columns: Orientations (N, NE, ENE, E, ESE, SE, S, SW, WSW, W, WNW, NW, N)\nexport const TILT_ORIENTATION_FACTORS = [\n// 0° tilt (flat roof)\n[82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82],\n// 10° tilt\n[80, 84, 85, 87, 88, 89, 91, 89, 88, 87, 85, 84, 80],\n// 20° tilt\n[73, 82, 85, 88, 91, 94, 97, 94, 91, 88, 85, 82, 73],\n// 30° tilt\n[60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n// 40° tilt\n[60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n// 50° tilt\n[62, 75, 79, 84, 88, 92, 97, 92, 88, 84, 79, 75, 62],\n// 60° tilt\n[62, 73, 76, 80, 83, 87, 91, 87, 83, 80, 76, 73, 62],\n// 70° tilt\n[59, 68, 70, 73, 76, 79, 82, 79, 76, 73, 70, 68, 59],\n// 80° tilt\n[54, 60, 62, 64, 66, 69, 71, 69, 66, 64, 62, 60, 54],\n// 90° tilt (vertical)\n[48, 52, 54, 56, 57, 58, 60, 58, 57, 56, 54, 52, 48]];\n\n// Orientation mapping (degrees to array index)\nexport const ORIENTATION_MAPPING = {\n  'n': 0,\n  // North (0°)\n  'ne': 1,\n  // Northeast (30°)\n  'ene': 2,\n  // East-Northeast (60°)\n  'e': 3,\n  // East (90°)\n  'ese': 4,\n  // East-Southeast (120°)\n  'se': 5,\n  // Southeast (150°)\n  's': 6,\n  // South (180°)\n  'sw': 7,\n  // Southwest (210°)\n  'wsw': 8,\n  // West-Southwest (240°)\n  'w': 9,\n  // West (270°)\n  'wnw': 10,\n  // West-Northwest (300°)\n  'nw': 11 // Northwest (330°)\n};\n\n// Tilt angle mapping (degrees to array index)\nexport const TILT_MAPPING = {\n  0: 0,\n  10: 1,\n  20: 2,\n  30: 3,\n  40: 4,\n  50: 5,\n  60: 6,\n  70: 7,\n  80: 8,\n  90: 9\n};\n\n/**\n * Get tilt and orientation correction factor\n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code (e.g., 's', 'sw', 'n')\n * @returns {number} Correction factor as decimal (e.g., 0.95 for 95%)\n */\nexport const getTiltOrientationFactor = (tiltAngle, orientation) => {\n  const tiltIndex = TILT_MAPPING[tiltAngle];\n  const orientationIndex = ORIENTATION_MAPPING[orientation];\n  if (tiltIndex === undefined || orientationIndex === undefined) {\n    return 0.82; // Default fallback factor\n  }\n  const percentage = TILT_ORIENTATION_FACTORS[tiltIndex][orientationIndex];\n  return percentage / 100; // Convert percentage to decimal\n};\n\n/**\n * Calculate solar potential in kW\n * @param {number} roofSize - Roof area in m²\n * @param {string} shadingLevel - Shading level code\n * @param {string} utilisationLevel - Utilisation level code  \n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code\n * @returns {object} Solar potential calculation results\n */\nexport const calculateSolarPotential = (roofSize, shadingLevel, utilisationLevel, tiltAngle, orientation) => {\n  // Get individual factors\n  const shadingFactor = SHADING_FACTORS[shadingLevel] || 1.0;\n  const utilisationFactor = UTILISATION_FACTORS[utilisationLevel] || 0.95;\n  const tiltOrientationFactor = getTiltOrientationFactor(tiltAngle, orientation);\n\n  // Calculate effective roof area\n  const effectiveRoofArea = roofSize * shadingFactor * utilisationFactor * tiltOrientationFactor;\n\n  // Solar panel capacity per m² (typically 200-250W/m², using 220W/m²)\n  const solarCapacityPerSqm = 0.22; // kW per m²\n\n  // Calculate total solar potential\n  const solarPotential = effectiveRoofArea * solarCapacityPerSqm;\n\n  // Estimated annual generation (assuming 4.5 peak sun hours per day)\n  const peakSunHours = 4.5;\n  const daysPerYear = 365;\n  const annualGeneration = solarPotential * peakSunHours * daysPerYear;\n  return {\n    effectiveRoofArea: effectiveRoofArea,\n    solarPotential: solarPotential,\n    annualGeneration: annualGeneration,\n    factors: {\n      shading: shadingFactor,\n      utilisation: utilisationFactor,\n      tiltOrientation: tiltOrientationFactor\n    }\n  };\n};","map":{"version":3,"names":["SHADING_FACTORS","UTILISATION_FACTORS","TILT_ORIENTATION_FACTORS","ORIENTATION_MAPPING","TILT_MAPPING","getTiltOrientationFactor","tiltAngle","orientation","tiltIndex","orientationIndex","undefined","percentage","calculateSolarPotential","roofSize","shadingLevel","utilisationLevel","shadingFactor","utilisationFactor","tiltOrientationFactor","effectiveRoofArea","solarCapacityPerSqm","solarPotential","peakSunHours","daysPerYear","annualGeneration","factors","shading","utilisation","tiltOrientation"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/roof-condition/solarPotentialUtils.js"],"sourcesContent":["// Solar potential calculation utilities\n\n// Shading factors from the UI descriptions\nexport const SHADING_FACTORS = {\n  'no-shading': 1.0,\n  'light': 0.90,\n  'moderate': 0.70,\n  'heavy': 0.50,\n  'extreme': 0.20\n};\n\n// Utilisation factors based on roof complexity\nexport const UTILISATION_FACTORS = {\n  'minimal-obstacles': 0.95,     // Almost full roof utilization\n  'slightly-complex': 0.85,     // Some obstacles, good utilization\n  'moderately-complex': 0.70,   // Multiple obstacles, moderate utilization\n  'highly-complex': 0.55,       // Many obstacles, limited utilization\n  'extremely-complex': 0.30     // Very poor layout, minimal utilization\n};\n\n// Tilt and Orientation Correction Factor table (based on the provided heatmap)\n// Rows: Tilt angles (0°, 10°, 20°, 30°, 40°, 50°, 60°, 70°, 80°, 90°)\n// Columns: Orientations (N, NE, ENE, E, ESE, SE, S, SW, WSW, W, WNW, NW, N)\nexport const TILT_ORIENTATION_FACTORS = [\n  // 0° tilt (flat roof)\n  [82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82],\n  // 10° tilt\n  [80, 84, 85, 87, 88, 89, 91, 89, 88, 87, 85, 84, 80],\n  // 20° tilt\n  [73, 82, 85, 88, 91, 94, 97, 94, 91, 88, 85, 82, 73],\n  // 30° tilt\n  [60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n  // 40° tilt\n  [60, 75, 80, 85, 90, 95, 100, 95, 90, 85, 80, 75, 60],\n  // 50° tilt\n  [62, 75, 79, 84, 88, 92, 97, 92, 88, 84, 79, 75, 62],\n  // 60° tilt\n  [62, 73, 76, 80, 83, 87, 91, 87, 83, 80, 76, 73, 62],\n  // 70° tilt\n  [59, 68, 70, 73, 76, 79, 82, 79, 76, 73, 70, 68, 59],\n  // 80° tilt\n  [54, 60, 62, 64, 66, 69, 71, 69, 66, 64, 62, 60, 54],\n  // 90° tilt (vertical)\n  [48, 52, 54, 56, 57, 58, 60, 58, 57, 56, 54, 52, 48]\n];\n\n// Orientation mapping (degrees to array index)\nexport const ORIENTATION_MAPPING = {\n  'n': 0,     // North (0°)\n  'ne': 1,    // Northeast (30°)\n  'ene': 2,   // East-Northeast (60°)\n  'e': 3,     // East (90°)\n  'ese': 4,   // East-Southeast (120°)\n  'se': 5,    // Southeast (150°)\n  's': 6,     // South (180°)\n  'sw': 7,    // Southwest (210°)\n  'wsw': 8,   // West-Southwest (240°)\n  'w': 9,     // West (270°)\n  'wnw': 10,  // West-Northwest (300°)\n  'nw': 11,   // Northwest (330°)\n};\n\n// Tilt angle mapping (degrees to array index)\nexport const TILT_MAPPING = {\n  0: 0, 10: 1, 20: 2, 30: 3, 40: 4, \n  50: 5, 60: 6, 70: 7, 80: 8, 90: 9\n};\n\n/**\n * Get tilt and orientation correction factor\n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code (e.g., 's', 'sw', 'n')\n * @returns {number} Correction factor as decimal (e.g., 0.95 for 95%)\n */\nexport const getTiltOrientationFactor = (tiltAngle, orientation) => {\n  const tiltIndex = TILT_MAPPING[tiltAngle];\n  const orientationIndex = ORIENTATION_MAPPING[orientation];\n  \n  if (tiltIndex === undefined || orientationIndex === undefined) {\n    return 0.82; // Default fallback factor\n  }\n  \n  const percentage = TILT_ORIENTATION_FACTORS[tiltIndex][orientationIndex];\n  return percentage / 100; // Convert percentage to decimal\n};\n\n/**\n * Calculate solar potential in kW\n * @param {number} roofSize - Roof area in m²\n * @param {string} shadingLevel - Shading level code\n * @param {string} utilisationLevel - Utilisation level code  \n * @param {number} tiltAngle - Roof tilt angle in degrees\n * @param {string} orientation - Roof orientation code\n * @returns {object} Solar potential calculation results\n */\nexport const calculateSolarPotential = (roofSize, shadingLevel, utilisationLevel, tiltAngle, orientation) => {\n  // Get individual factors\n  const shadingFactor = SHADING_FACTORS[shadingLevel] || 1.0;\n  const utilisationFactor = UTILISATION_FACTORS[utilisationLevel] || 0.95;\n  const tiltOrientationFactor = getTiltOrientationFactor(tiltAngle, orientation);\n  \n  // Calculate effective roof area\n  const effectiveRoofArea = roofSize * shadingFactor * utilisationFactor * tiltOrientationFactor;\n  \n  // Solar panel capacity per m² (typically 200-250W/m², using 220W/m²)\n  const solarCapacityPerSqm = 0.22; // kW per m²\n  \n  // Calculate total solar potential\n  const solarPotential = effectiveRoofArea * solarCapacityPerSqm;\n  \n  // Estimated annual generation (assuming 4.5 peak sun hours per day)\n  const peakSunHours = 4.5;\n  const daysPerYear = 365;\n  const annualGeneration = solarPotential * peakSunHours * daysPerYear;\n  \n  return {\n    effectiveRoofArea: effectiveRoofArea,\n    solarPotential: solarPotential,\n    annualGeneration: annualGeneration,\n    factors: {\n      shading: shadingFactor,\n      utilisation: utilisationFactor,\n      tiltOrientation: tiltOrientationFactor\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}