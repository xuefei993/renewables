{"ast":null,"code":"// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据\n  async getSolarRadiationData(latitude, longitude, years = 5) {\n    // 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n\n    // 确保不会请求太早的数据（NASA POWER数据从1981年开始）\n    const actualStartYear = Math.max(startYear, 1981);\n    try {\n      const url = `https://power.larc.nasa.gov/api/temporal/monthly/point?` + `parameters=ALLSKY_SFC_SW_DWN&` + `community=RE&` + `longitude=${longitude}&` + `latitude=${latitude}&` + `start=${actualStartYear}0101&` + `end=${endYear}1231&` + `format=JSON`;\n      console.log('NASA POWER API URL:', url);\n      console.log(`Date range: ${actualStartYear}-${endYear} (${endYear - actualStartYear + 1} years)`);\n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER response:', data);\n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          return {\n            success: true,\n            data: data.properties.parameter.ALLSKY_SFC_SW_DWN,\n            info: data.properties.parameter\n          };\n        } else {\n          return {\n            success: false,\n            error: 'Invalid NASA API response structure'\n          };\n        }\n      }\n\n      // 尝试解析错误响应\n      let errorMessage = `NASA API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('NASA API error response:', errorData);\n        if (errorData.error && errorData.error.message) {\n          errorMessage += ` - ${errorData.error.message}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } catch (error) {\n      console.error('NASA API Error:', error);\n      return {\n        success: false,\n        error: 'Network error: ' + error.message\n      };\n    }\n  },\n  // 获取Open Meteo气温数据\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` + `latitude=${latitude}&` + `longitude=${longitude}&` + `start_date=${startDate}&` + `end_date=${endDate}&` + `daily=temperature_2m_mean&` + `timezone=Europe/London`;\n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return {\n            success: true,\n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return {\n            success: false,\n            error: 'Invalid Open-Meteo API response structure'\n          };\n        }\n      }\n\n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return {\n        success: false,\n        error: 'Network error: ' + error.message\n      };\n    }\n  },\n  // 处理NASA数据为月度数据\n  processSolarData(nasaData) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log('Processing NASA solar data:', Object.keys(nasaData));\n\n    // NASA数据格式示例: {\"202001\": 1.23, \"202002\": 2.45, ...}\n    const monthlyData = months.map((month, index) => {\n      const monthNum = String(index + 1).padStart(2, '0');\n\n      // 找到该月份的所有年份数据\n      const monthValues = Object.entries(nasaData).filter(([key]) => key.endsWith(monthNum)).map(([, value]) => parseFloat(value)).filter(value => !isNaN(value) && value >= 0);\n      console.log(`${month} (${monthNum}):`, monthValues);\n\n      // 计算平均值\n      const avgValue = monthValues.length > 0 ? monthValues.reduce((sum, val) => sum + val, 0) / monthValues.length : 0;\n      return {\n        month,\n        value: Math.round(avgValue * 100) / 100\n      };\n    });\n    console.log('Processed solar data:', monthlyData);\n    return monthlyData;\n  },\n  // 处理Open Meteo温度数据为月度平均值\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n\n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length : 0;\n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n  // 获取完整的气候数据\n  async getCompleteClimateData(latitude, longitude) {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n\n      // 并行获取太阳辐射和温度数据\n      const [solarResult, tempResult] = await Promise.all([this.getSolarRadiationData(latitude, longitude), this.getTemperatureData(latitude, longitude)]);\n      console.log('Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据\n      const solarData = this.processSolarData(solarResult.data);\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        }\n      };\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["weatherService","getSolarRadiationData","latitude","longitude","years","currentDate","Date","currentYear","getFullYear","endYear","startYear","actualStartYear","Math","max","url","console","log","response","fetch","ok","data","json","properties","parameter","ALLSKY_SFC_SW_DWN","success","info","error","errorMessage","status","statusText","errorData","message","e","getTemperatureData","endDate","startDate","Object","keys","daily","time","temperature_2m_mean","timezone","reason","processSolarData","nasaData","months","monthlyData","map","month","index","monthNum","String","padStart","monthValues","entries","filter","key","endsWith","value","parseFloat","isNaN","avgValue","length","reduce","sum","val","round","processTemperatureData","openMeteoData","monthlyGroups","Array","fill","forEach","date","temp","getMonth","push","temps","avgTemp","getCompleteClimateData","solarResult","tempResult","Promise","all","Error","solarData","temperatureData","solar","temperature"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/weatherService.js"],"sourcesContent":["// 气象数据服务 - NASA Power & Open Meteo APIs\nexport const weatherService = {\n  // 获取NASA Power太阳辐照数据\n  async getSolarRadiationData(latitude, longitude, years = 5) {\n    // 始终使用前一年作为结束年份，避免请求不完整的当前年份数据\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    // 确保不会请求太早的数据（NASA POWER数据从1981年开始）\n    const actualStartYear = Math.max(startYear, 1981);\n    \n    try {\n      const url = `https://power.larc.nasa.gov/api/temporal/monthly/point?` +\n        `parameters=ALLSKY_SFC_SW_DWN&` +\n        `community=RE&` +\n        `longitude=${longitude}&` +\n        `latitude=${latitude}&` +\n        `start=${actualStartYear}0101&` +\n        `end=${endYear}1231&` +\n        `format=JSON`;\n      \n      console.log('NASA POWER API URL:', url);\n      console.log(`Date range: ${actualStartYear}-${endYear} (${endYear - actualStartYear + 1} years)`);\n      \n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('NASA POWER response:', data);\n        \n        if (data.properties && data.properties.parameter && data.properties.parameter.ALLSKY_SFC_SW_DWN) {\n          return { \n            success: true, \n            data: data.properties.parameter.ALLSKY_SFC_SW_DWN,\n            info: data.properties.parameter\n          };\n        } else {\n          return { success: false, error: 'Invalid NASA API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `NASA API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('NASA API error response:', errorData);\n        if (errorData.error && errorData.error.message) {\n          errorMessage += ` - ${errorData.error.message}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('NASA API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 获取Open Meteo气温数据\n  async getTemperatureData(latitude, longitude, years = 5) {\n    // 使用相同的日期逻辑\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const endYear = currentYear - 1; // 总是使用前一年\n    const startYear = endYear - years + 1;\n    \n    const endDate = `${endYear}-12-31`;\n    const startDate = `${startYear}-01-01`;\n    \n    try {\n      const url = `https://archive-api.open-meteo.com/v1/archive?` +\n        `latitude=${latitude}&` +\n        `longitude=${longitude}&` +\n        `start_date=${startDate}&` +\n        `end_date=${endDate}&` +\n        `daily=temperature_2m_mean&` +\n        `timezone=Europe/London`;\n      \n      console.log('Open-Meteo API URL:', url);\n      console.log(`Date range: ${startDate} to ${endDate}`);\n      \n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Open-Meteo response keys:', Object.keys(data));\n        \n        if (data.daily && data.daily.time && data.daily.temperature_2m_mean) {\n          return { \n            success: true, \n            data: data.daily,\n            timezone: data.timezone || 'Europe/London'\n          };\n        } else {\n          return { success: false, error: 'Invalid Open-Meteo API response structure' };\n        }\n      }\n      \n      // 尝试解析错误响应\n      let errorMessage = `Open Meteo API error: ${response.status} ${response.statusText}`;\n      try {\n        const errorData = await response.json();\n        console.log('Open-Meteo API error response:', errorData);\n        if (errorData.reason) {\n          errorMessage += ` - ${errorData.reason}`;\n        }\n      } catch (e) {\n        // 如果无法解析错误响应，使用默认错误信息\n      }\n      \n      return { success: false, error: errorMessage };\n    } catch (error) {\n      console.error('Open Meteo API Error:', error);\n      return { success: false, error: 'Network error: ' + error.message };\n    }\n  },\n\n  // 处理NASA数据为月度数据\n  processSolarData(nasaData) {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log('Processing NASA solar data:', Object.keys(nasaData));\n    \n    // NASA数据格式示例: {\"202001\": 1.23, \"202002\": 2.45, ...}\n    const monthlyData = months.map((month, index) => {\n      const monthNum = String(index + 1).padStart(2, '0');\n      \n      // 找到该月份的所有年份数据\n      const monthValues = Object.entries(nasaData)\n        .filter(([key]) => key.endsWith(monthNum))\n        .map(([, value]) => parseFloat(value))\n        .filter(value => !isNaN(value) && value >= 0);\n      \n      console.log(`${month} (${monthNum}):`, monthValues);\n      \n      // 计算平均值\n      const avgValue = monthValues.length > 0 \n        ? monthValues.reduce((sum, val) => sum + val, 0) / monthValues.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgValue * 100) / 100\n      };\n    });\n\n    console.log('Processed solar data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 处理Open Meteo温度数据为月度平均值\n  processTemperatureData(openMeteoData) {\n    if (!openMeteoData.time || !openMeteoData.temperature_2m_mean) {\n      console.error('Invalid temperature data structure:', openMeteoData);\n      return [];\n    }\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    \n    console.log(`Processing ${openMeteoData.time.length} temperature data points`);\n    \n    // 按月份分组数据\n    const monthlyGroups = Array(12).fill(null).map(() => []);\n    \n    openMeteoData.time.forEach((date, index) => {\n      const temp = openMeteoData.temperature_2m_mean[index];\n      if (temp !== null && !isNaN(temp)) {\n        const month = new Date(date).getMonth(); // 0-11\n        monthlyGroups[month].push(parseFloat(temp));\n      }\n    });\n\n    // 计算每月平均值\n    const monthlyData = months.map((month, index) => {\n      const temps = monthlyGroups[index];\n      const avgTemp = temps.length > 0 \n        ? temps.reduce((sum, temp) => sum + temp, 0) / temps.length\n        : 0;\n      \n      return {\n        month,\n        value: Math.round(avgTemp * 100) / 100\n      };\n    });\n\n    console.log('Processed temperature data:', monthlyData);\n    return monthlyData;\n  },\n\n  // 获取完整的气候数据\n  async getCompleteClimateData(latitude, longitude) {\n    try {\n      console.log(`Fetching climate data for coordinates: ${latitude}, ${longitude}`);\n      \n      // 并行获取太阳辐射和温度数据\n      const [solarResult, tempResult] = await Promise.all([\n        this.getSolarRadiationData(latitude, longitude),\n        this.getTemperatureData(latitude, longitude)\n      ]);\n\n      console.log('Solar API result:', solarResult);\n      console.log('Temperature API result:', tempResult);\n\n      if (!solarResult.success) {\n        throw new Error(`Solar data: ${solarResult.error}`);\n      }\n\n      if (!tempResult.success) {\n        throw new Error(`Temperature data: ${tempResult.error}`);\n      }\n\n      // 处理数据\n      const solarData = this.processSolarData(solarResult.data);\n      const temperatureData = this.processTemperatureData(tempResult.data);\n\n      // 验证处理后的数据\n      if (solarData.length === 0) {\n        throw new Error('No valid solar radiation data after processing');\n      }\n\n      if (temperatureData.length === 0) {\n        throw new Error('No valid temperature data after processing');\n      }\n\n      console.log('Final processed solar data:', solarData);\n      console.log('Final processed temperature data:', temperatureData);\n\n      return {\n        success: true,\n        data: {\n          solar: solarData,\n          temperature: temperatureData\n        }\n      };\n\n    } catch (error) {\n      console.error('Complete climate data error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}