{"ast":null,"code":"// 地理定位服务\nexport const locationService={// 获取用户当前位置\nasync getCurrentLocation(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject({success:false,error:'Geolocation not supported'});return;}const options={enableHighAccuracy:true,timeout:10000,maximumAge:300000// 5分钟缓存\n};navigator.geolocation.getCurrentPosition(position=>{resolve({success:true,data:{latitude:position.coords.latitude,longitude:position.coords.longitude,accuracy:position.coords.accuracy}});},error=>{let errorMessage='Location access denied';switch(error.code){case error.PERMISSION_DENIED:errorMessage='Location access denied by user';break;case error.POSITION_UNAVAILABLE:errorMessage='Location information unavailable';break;case error.TIMEOUT:errorMessage='Location request timeout';break;}reject({success:false,error:errorMessage});},options);});},// 将坐标转换为邮编（反向地理编码）\nasync coordinatesToPostcode(latitude,longitude){try{const response=await fetch(\"https://api.postcodes.io/postcodes?lon=\".concat(longitude,\"&lat=\").concat(latitude,\"&limit=1\"));if(response.ok){const data=await response.json();if(data.result&&data.result.length>0){return{success:true,data:{postcode:data.result[0].postcode,distance:data.result[0].distance}};}}return{success:false,error:'No postcode found for coordinates'};}catch(error){return{success:false,error:'Network error'};}}};","map":{"version":3,"names":["locationService","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","success","error","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","position","data","latitude","coords","longitude","accuracy","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","coordinatesToPostcode","response","fetch","concat","ok","json","result","length","postcode","distance"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/services/locationService.js"],"sourcesContent":["// 地理定位服务\nexport const locationService = {\n  // 获取用户当前位置\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject({ success: false, error: 'Geolocation not supported' });\n        return;\n      }\n\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5分钟缓存\n      };\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            success: true,\n            data: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: position.coords.accuracy\n            }\n          });\n        },\n        (error) => {\n          let errorMessage = 'Location access denied';\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = 'Location access denied by user';\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = 'Location information unavailable';\n              break;\n            case error.TIMEOUT:\n              errorMessage = 'Location request timeout';\n              break;\n          }\n          reject({ success: false, error: errorMessage });\n        },\n        options\n      );\n    });\n  },\n\n  // 将坐标转换为邮编（反向地理编码）\n  async coordinatesToPostcode(latitude, longitude) {\n    try {\n      const response = await fetch(\n        `https://api.postcodes.io/postcodes?lon=${longitude}&lat=${latitude}&limit=1`\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.result && data.result.length > 0) {\n          return {\n            success: true,\n            data: {\n              postcode: data.result[0].postcode,\n              distance: data.result[0].distance\n            }\n          };\n        }\n      }\n      return { success: false, error: 'No postcode found for coordinates' };\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  }\n}; "],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,eAAe,CAAG,CAC7B;AACA,KAAM,CAAAC,kBAAkBA,CAAA,CAAG,CACzB,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CAACC,SAAS,CAACC,WAAW,CAAE,CAC1BF,MAAM,CAAC,CAAEG,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,2BAA4B,CAAC,CAAC,CAC9D,OACF,CAEA,KAAM,CAAAC,OAAO,CAAG,CACdC,kBAAkB,CAAE,IAAI,CACxBC,OAAO,CAAE,KAAK,CACdC,UAAU,CAAE,MAAO;AACrB,CAAC,CAEDP,SAAS,CAACC,WAAW,CAACO,kBAAkB,CACrCC,QAAQ,EAAK,CACZX,OAAO,CAAC,CACNI,OAAO,CAAE,IAAI,CACbQ,IAAI,CAAE,CACJC,QAAQ,CAAEF,QAAQ,CAACG,MAAM,CAACD,QAAQ,CAClCE,SAAS,CAAEJ,QAAQ,CAACG,MAAM,CAACC,SAAS,CACpCC,QAAQ,CAAEL,QAAQ,CAACG,MAAM,CAACE,QAC5B,CACF,CAAC,CAAC,CACJ,CAAC,CACAX,KAAK,EAAK,CACT,GAAI,CAAAY,YAAY,CAAG,wBAAwB,CAC3C,OAAQZ,KAAK,CAACa,IAAI,EAChB,IAAK,CAAAb,KAAK,CAACc,iBAAiB,CAC1BF,YAAY,CAAG,gCAAgC,CAC/C,MACF,IAAK,CAAAZ,KAAK,CAACe,oBAAoB,CAC7BH,YAAY,CAAG,kCAAkC,CACjD,MACF,IAAK,CAAAZ,KAAK,CAACgB,OAAO,CAChBJ,YAAY,CAAG,0BAA0B,CACzC,MACJ,CACAhB,MAAM,CAAC,CAAEG,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAEY,YAAa,CAAC,CAAC,CACjD,CAAC,CACDX,OACF,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAgB,qBAAqBA,CAACT,QAAQ,CAAEE,SAAS,CAAE,CAC/C,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,2CAAAC,MAAA,CACgBV,SAAS,UAAAU,MAAA,CAAQZ,QAAQ,YACrE,CAAC,CAED,GAAIU,QAAQ,CAACG,EAAE,CAAE,CACf,KAAM,CAAAd,IAAI,CAAG,KAAM,CAAAW,QAAQ,CAACI,IAAI,CAAC,CAAC,CAClC,GAAIf,IAAI,CAACgB,MAAM,EAAIhB,IAAI,CAACgB,MAAM,CAACC,MAAM,CAAG,CAAC,CAAE,CACzC,MAAO,CACLzB,OAAO,CAAE,IAAI,CACbQ,IAAI,CAAE,CACJkB,QAAQ,CAAElB,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,CAACE,QAAQ,CACjCC,QAAQ,CAAEnB,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,CAACG,QAC3B,CACF,CAAC,CACH,CACF,CACA,MAAO,CAAE3B,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,mCAAoC,CAAC,CACvE,CAAE,MAAOA,KAAK,CAAE,CACd,MAAO,CAAED,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,eAAgB,CAAC,CACnD,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}