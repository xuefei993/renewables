{"ast":null,"code":"var _jsxFileName = \"/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/RoofCondition.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapsPolygonDrawer = ({\n  onAreaChange,\n  userLocation,\n  apiKey\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: userLocation || {\n          lat: 51.5074,\n          lng: -0.1278\n        },\n        // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON]\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true\n        }\n      });\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', newPolygon => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, userLocation]);\n  const calculateArea = polygon => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-maps-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: '400px',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearPolygon,\n        className: \"btn btn-secondary\",\n        disabled: !polygon,\n        children: \"Clear Roof Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), area > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"area-display\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Roof Area: \", area.toFixed(2), \" m\\xB2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Instructions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), \"1. Use the polygon tool to trace your roof outline\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), \"2. Click to add points around your roof perimeter\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), \"3. Double-click to complete the polygon\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), \"4. Drag the points to adjust the shape\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapsPolygonDrawer, \"mg4yh2b2n9S+8y+xPiv65RtppR4=\");\n_c = GoogleMapsPolygonDrawer;\nconst render = status => {\n  switch (status) {\n    case Status.LOADING:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Google Maps...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 14\n      }, this);\n    case Status.FAILURE:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error loading Google Maps\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }, this);\n    case Status.SUCCESS:\n      return null;\n  }\n};\nconst RoofCondition = ({\n  data,\n  onDataChange,\n  userLocation\n}) => {\n  _s2();\n  const [formData, setFormData] = useState({\n    roofType: data.roofType || \"\",\n    roofOrientation: data.roofOrientation || \"\",\n    roofAngle: data.roofAngle || \"\",\n    roofArea: data.roofArea || \"\",\n    hasShading: data.hasShading || \"\",\n    useMapsForArea: data.useMapsForArea || false,\n    ...data\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setFormData(prev => ({\n      ...prev,\n      [name]: newValue\n    }));\n    onDataChange({\n      [name]: newValue\n    });\n  };\n  const handleAreaChange = areaFromMaps => {\n    const newFormData = {\n      ...formData,\n      roofArea: areaFromMaps.toFixed(2)\n    };\n    setFormData(newFormData);\n    onDataChange({\n      roofArea: areaFromMaps.toFixed(2)\n    });\n  };\n  const apiKey = \"AIzaSyCpAABUQR_MiKb4yDovC3-1jM0LdIs59Hc\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roof-condition-step\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"2.1 Roof Condition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Provide details about your roof configuration and solar potential.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Roof Type *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-group\",\n        children: [{\n          value: \"pitched\",\n          label: \"Pitched Roof\"\n        }, {\n          value: \"flat\",\n          label: \"Flat Roof\"\n        }, {\n          value: \"mixed\",\n          label: \"Mixed\"\n        }].map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `radio-option ${formData.roofType === option.value ? 'selected' : ''}`,\n          onClick: () => handleChange({\n            target: {\n              name: 'roofType',\n              value: option.value\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"roofType\",\n            value: option.value,\n            checked: formData.roofType === option.value,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Primary Roof Orientation *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-group\",\n        children: [{\n          value: \"south\",\n          label: \"South\"\n        }, {\n          value: \"east\",\n          label: \"East\"\n        }, {\n          value: \"west\",\n          label: \"West\"\n        }, {\n          value: \"north\",\n          label: \"North\"\n        }].map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `radio-option ${formData.roofOrientation === option.value ? 'selected' : ''}`,\n          onClick: () => handleChange({\n            target: {\n              name: 'roofOrientation',\n              value: option.value\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"roofOrientation\",\n            value: option.value,\n            checked: formData.roofOrientation === option.value,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"roofAngle\",\n        children: \"Roof Angle (degrees)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"roofAngle\",\n        name: \"roofAngle\",\n        value: formData.roofAngle,\n        onChange: handleChange,\n        placeholder: \"e.g., 30\",\n        min: \"0\",\n        max: \"90\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Leave blank if unknown - we'll estimate based on typical values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"useMapsForArea\",\n            checked: formData.useMapsForArea,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"checkmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), \"Use Google Maps to precisely measure roof area\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), formData.useMapsForArea ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Roof Area Measurement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        apiKey: apiKey,\n        render: render,\n        libraries: ['drawing', 'geometry'],\n        children: /*#__PURE__*/_jsxDEV(GoogleMapsPolygonDrawer, {\n          onAreaChange: handleAreaChange,\n          userLocation: userLocation,\n          apiKey: apiKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"roofArea\",\n        children: \"Available Roof Area (square meters)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"roofArea\",\n        name: \"roofArea\",\n        value: formData.roofArea,\n        onChange: handleChange,\n        placeholder: \"e.g., 50\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Approximate area suitable for solar panels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Roof Shading *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-group\",\n        children: [{\n          value: \"none\",\n          label: \"No Shading\"\n        }, {\n          value: \"partial\",\n          label: \"Partial Shading\"\n        }, {\n          value: \"significant\",\n          label: \"Significant Shading\"\n        }].map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `radio-option ${formData.hasShading === option.value ? 'selected' : ''}`,\n          onClick: () => handleChange({\n            target: {\n              name: 'hasShading',\n              value: option.value\n            }\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"hasShading\",\n            value: option.value,\n            checked: formData.hasShading === option.value,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Consider shading from trees, buildings, or other structures that might affect solar panels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(RoofCondition, \"G+y8k2R7hB6KM+8xrOFcH0hyfCQ=\");\n_c2 = RoofCondition;\nexport default RoofCondition;\nvar _c, _c2;\n$RefreshReg$(_c, \"GoogleMapsPolygonDrawer\");\n$RefreshReg$(_c2, \"RoofCondition\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Wrapper","Status","jsxDEV","_jsxDEV","GoogleMapsPolygonDrawer","onAreaChange","userLocation","apiKey","_s","mapRef","map","setMap","polygon","setPolygon","area","setArea","current","newMap","window","google","maps","Map","center","lat","lng","zoom","mapTypeId","tilt","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","polygonOptions","fillColor","fillOpacity","strokeColor","strokeWeight","editable","draggable","addListener","newPolygon","calculateArea","getPath","setDrawingMode","path","areaInSquareMeters","geometry","spherical","computeArea","clearPolygon","className","children","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toFixed","_c","render","status","LOADING","FAILURE","SUCCESS","RoofCondition","data","onDataChange","_s2","formData","setFormData","roofType","roofOrientation","roofAngle","roofArea","hasShading","useMapsForArea","handleChange","e","name","value","type","checked","target","newValue","prev","handleAreaChange","areaFromMaps","newFormData","label","option","onChange","htmlFor","id","placeholder","min","max","libraries","_c2","$RefreshReg$"],"sources":["/Users/xuefei/Desktop/calculator00/calculator/renewableCalculator.ui/src/components/steps/RoofCondition.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\n\nconst GoogleMapsPolygonDrawer = ({ onAreaChange, userLocation, apiKey }) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [polygon, setPolygon] = useState(null);\n  const [area, setArea] = useState(0);\n\n  useEffect(() => {\n    if (mapRef.current && !map) {\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        center: userLocation || { lat: 51.5074, lng: -0.1278 }, // London default\n        zoom: 20,\n        mapTypeId: 'satellite',\n        tilt: 0,\n      });\n\n      // Enable drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingMode: window.google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON],\n        },\n        polygonOptions: {\n          fillColor: '#FF6B35',\n          fillOpacity: 0.5,\n          strokeColor: '#FF6B35',\n          strokeWeight: 2,\n          editable: true,\n          draggable: true,\n        },\n      });\n\n      drawingManager.setMap(newMap);\n\n      // Handle polygon completion\n      drawingManager.addListener('polygoncomplete', (newPolygon) => {\n        // Remove previous polygon if exists\n        if (polygon) {\n          polygon.setMap(null);\n        }\n\n        setPolygon(newPolygon);\n        calculateArea(newPolygon);\n\n        // Add listener for polygon changes\n        newPolygon.getPath().addListener('set_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('insert_at', () => calculateArea(newPolygon));\n        newPolygon.getPath().addListener('remove_at', () => calculateArea(newPolygon));\n\n        // Disable drawing after polygon is created\n        drawingManager.setDrawingMode(null);\n      });\n\n      setMap(newMap);\n    }\n  }, [mapRef.current, map, userLocation]);\n\n  const calculateArea = (polygon) => {\n    const path = polygon.getPath();\n    const areaInSquareMeters = window.google.maps.geometry.spherical.computeArea(path);\n    setArea(areaInSquareMeters);\n    onAreaChange(areaInSquareMeters);\n  };\n\n  const clearPolygon = () => {\n    if (polygon) {\n      polygon.setMap(null);\n      setPolygon(null);\n      setArea(0);\n      onAreaChange(0);\n    }\n  };\n\n  return (\n    <div className=\"google-maps-container\">\n      <div ref={mapRef} style={{ height: '400px', width: '100%' }} />\n      <div className=\"map-controls\">\n        <button onClick={clearPolygon} className=\"btn btn-secondary\" disabled={!polygon}>\n          Clear Roof Area\n        </button>\n        {area > 0 && (\n          <div className=\"area-display\">\n            <strong>Roof Area: {area.toFixed(2)} m²</strong>\n          </div>\n        )}\n      </div>\n      <div className=\"map-instructions\">\n        <p>\n          <strong>Instructions:</strong>\n          <br />\n          1. Use the polygon tool to trace your roof outline\n          <br />\n          2. Click to add points around your roof perimeter\n          <br />\n          3. Double-click to complete the polygon\n          <br />\n          4. Drag the points to adjust the shape\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst render = (status) => {\n  switch (status) {\n    case Status.LOADING:\n      return <div>Loading Google Maps...</div>;\n    case Status.FAILURE:\n      return <div>Error loading Google Maps</div>;\n    case Status.SUCCESS:\n      return null;\n  }\n};\n\nconst RoofCondition = ({ data, onDataChange, userLocation }) => {\n  const [formData, setFormData] = useState({\n    roofType: data.roofType || \"\",\n    roofOrientation: data.roofOrientation || \"\",\n    roofAngle: data.roofAngle || \"\",\n    roofArea: data.roofArea || \"\",\n    hasShading: data.hasShading || \"\",\n    useMapsForArea: data.useMapsForArea || false,\n    ...data\n  });\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: newValue\n    }));\n    onDataChange({ [name]: newValue });\n  };\n\n  const handleAreaChange = (areaFromMaps) => {\n    const newFormData = {\n      ...formData,\n      roofArea: areaFromMaps.toFixed(2)\n    };\n    setFormData(newFormData);\n    onDataChange({ roofArea: areaFromMaps.toFixed(2) });\n  };\n\n  const apiKey = \"AIzaSyCpAABUQR_MiKb4yDovC3-1jM0LdIs59Hc\";\n\n  return (\n    <div className=\"roof-condition-step\">\n      <div className=\"step-header\">\n        <h3>2.1 Roof Condition</h3>\n        <p>Provide details about your roof configuration and solar potential.</p>\n      </div>\n\n      <div className=\"form-group\">\n        <label>Roof Type *</label>\n        <div className=\"radio-group\">\n          {[\n            { value: \"pitched\", label: \"Pitched Roof\" },\n            { value: \"flat\", label: \"Flat Roof\" },\n            { value: \"mixed\", label: \"Mixed\" }\n          ].map(option => (\n            <div\n              key={option.value}\n              className={`radio-option ${formData.roofType === option.value ? 'selected' : ''}`}\n              onClick={() => handleChange({ target: { name: 'roofType', value: option.value } })}\n            >\n              <input\n                type=\"radio\"\n                name=\"roofType\"\n                value={option.value}\n                checked={formData.roofType === option.value}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>Primary Roof Orientation *</label>\n        <div className=\"radio-group\">\n          {[\n            { value: \"south\", label: \"South\" },\n            { value: \"east\", label: \"East\" },\n            { value: \"west\", label: \"West\" },\n            { value: \"north\", label: \"North\" }\n          ].map(option => (\n            <div\n              key={option.value}\n              className={`radio-option ${formData.roofOrientation === option.value ? 'selected' : ''}`}\n              onClick={() => handleChange({ target: { name: 'roofOrientation', value: option.value } })}\n            >\n              <input\n                type=\"radio\"\n                name=\"roofOrientation\"\n                value={option.value}\n                checked={formData.roofOrientation === option.value}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"roofAngle\">Roof Angle (degrees)</label>\n        <input\n          type=\"number\"\n          id=\"roofAngle\"\n          name=\"roofAngle\"\n          value={formData.roofAngle}\n          onChange={handleChange}\n          placeholder=\"e.g., 30\"\n          min=\"0\"\n          max=\"90\"\n        />\n        <small>Leave blank if unknown - we'll estimate based on typical values</small>\n      </div>\n\n      <div className=\"form-group\">\n        <div className=\"checkbox-group\">\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              name=\"useMapsForArea\"\n              checked={formData.useMapsForArea}\n              onChange={handleChange}\n            />\n            <span className=\"checkmark\"></span>\n            Use Google Maps to precisely measure roof area\n          </label>\n        </div>\n      </div>\n\n      {formData.useMapsForArea ? (\n        <div className=\"form-group\">\n          <label>Roof Area Measurement</label>\n          <Wrapper apiKey={apiKey} render={render} libraries={['drawing', 'geometry']}>\n            <GoogleMapsPolygonDrawer \n              onAreaChange={handleAreaChange}\n              userLocation={userLocation}\n              apiKey={apiKey}\n            />\n          </Wrapper>\n        </div>\n      ) : (\n        <div className=\"form-group\">\n          <label htmlFor=\"roofArea\">Available Roof Area (square meters)</label>\n          <input\n            type=\"number\"\n            id=\"roofArea\"\n            name=\"roofArea\"\n            value={formData.roofArea}\n            onChange={handleChange}\n            placeholder=\"e.g., 50\"\n            min=\"0\"\n          />\n          <small>Approximate area suitable for solar panels</small>\n        </div>\n      )}\n\n      <div className=\"form-group\">\n        <label>Roof Shading *</label>\n        <div className=\"radio-group\">\n          {[\n            { value: \"none\", label: \"No Shading\" },\n            { value: \"partial\", label: \"Partial Shading\" },\n            { value: \"significant\", label: \"Significant Shading\" }\n          ].map(option => (\n            <div\n              key={option.value}\n              className={`radio-option ${formData.hasShading === option.value ? 'selected' : ''}`}\n              onClick={() => handleChange({ target: { name: 'hasShading', value: option.value } })}\n            >\n              <input\n                type=\"radio\"\n                name=\"hasShading\"\n                value={option.value}\n                checked={formData.hasShading === option.value}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </div>\n          ))}\n        </div>\n        <small>Consider shading from trees, buildings, or other structures that might affect solar panels</small>\n      </div>\n    </div>\n  );\n};\n\nexport default RoofCondition; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}