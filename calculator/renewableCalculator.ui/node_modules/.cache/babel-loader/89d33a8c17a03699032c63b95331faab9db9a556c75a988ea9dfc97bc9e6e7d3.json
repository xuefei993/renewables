{"ast":null,"code":"import axios from \"axios\";\nimport { mockDataService } from \"./services/mockDataService\";\nconst API_BASE = \"http://localhost:8080/api\";\n\n// Helper function to create API call with fallback\nconst apiWithFallback = async (apiCall, fallbackData) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.warn(`API call failed, using cached data: ${error.message}`);\n    return {\n      data: fallbackData\n    };\n  }\n};\nexport const getComponents = type => axios.get(`${API_BASE}/${type}`);\nexport const calculate = data => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = data => apiWithFallback(() => axios.post(`${API_BASE}/solar-potential`, data), mockDataService.getSolarPotentialResult(data));\n\n// New Location APIs\nexport const getAllRegions = () => apiWithFallback(() => axios.get(`${API_BASE}/locations/regions`), mockDataService.getLocationData());\nexport const getRegionsByCountry = country => apiWithFallback(() => axios.get(`${API_BASE}/locations/regions/country/${country}`), mockDataService.getLocationData().filter(item => item.country === country));\nexport const searchCitiesByName = name => apiWithFallback(() => axios.get(`${API_BASE}/locations/cities/search?name=${name}`), mockDataService.getLocationData().filter(item => item.name.toLowerCase().includes(name.toLowerCase())));\nexport const searchCitiesByPostcode = prefix => apiWithFallback(() => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`), mockDataService.getLocationData().filter(item => item.postcode.toLowerCase().startsWith(prefix.toLowerCase())));\nexport const getCitiesByCountry = country => apiWithFallback(() => axios.get(`${API_BASE}/locations/cities/country/${country}`), mockDataService.getLocationData().filter(item => item.country === country));\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => axios.post(`${API_BASE}/nasa-power/solar-data`, {\n  latitude,\n  longitude,\n  location\n});\nexport const fetchSolarDataGet = (latitude, longitude, location) => axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = data => axios.post(`${API_BASE}/location-yield/calculate`, data);\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = data => apiWithFallback(() => axios.post(`${API_BASE}/solar-capacity/calculate`, data), mockDataService.getTotalInstalledCapacity(data));\nexport const getAllSolarPanelTypes = () => apiWithFallback(() => axios.get(`${API_BASE}/solar-capacity/panel-types`), mockDataService.getSolarPanelTypes());\nexport const getSolarPanelTypeById = id => apiWithFallback(() => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`), mockDataService.getSolarPanelTypes().find(panel => panel.id === id));\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = data => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = data => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\nexport const validateMonthlyElectricityUsage = monthlyUsage => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);\n\n// New Gas Demand APIs\nexport const calculateGasDemand = data => axios.post(`${API_BASE}/gas-demand/calculate`, data);\nexport const getGasDemandProportions = () => axios.get(`${API_BASE}/gas-demand/proportions`);\nexport const validateMonthlyGasUsage = monthlyUsage => axios.post(`${API_BASE}/gas-demand/validate-monthly`, monthlyUsage);","map":{"version":3,"names":["axios","mockDataService","API_BASE","apiWithFallback","apiCall","fallbackData","error","console","warn","message","data","getComponents","type","get","calculate","post","calculateSolarPotential","getSolarPotentialResult","getAllRegions","getLocationData","getRegionsByCountry","country","filter","item","searchCitiesByName","name","toLowerCase","includes","searchCitiesByPostcode","prefix","postcode","startsWith","getCitiesByCountry","fetchSolarData","latitude","longitude","location","fetchSolarDataGet","calculateLocationSpecificYield","calculateLocationSpecificYieldForMonth","month","calculateTotalInstalledCapacity","getTotalInstalledCapacity","getAllSolarPanelTypes","getSolarPanelTypes","getSolarPanelTypeById","id","find","panel","calculateMonthlyElectricityGeneration","calculateElectricityDemand","getElectricityDemandProportions","validateMonthlyElectricityUsage","monthlyUsage","calculateGasDemand","getGasDemandProportions","validateMonthlyGasUsage"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/api.js"],"sourcesContent":["import axios from \"axios\";\nimport { mockDataService } from \"./services/mockDataService\";\n\nconst API_BASE = \"http://localhost:8080/api\";\n\n// Helper function to create API call with fallback\nconst apiWithFallback = async (apiCall, fallbackData) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.warn(`API call failed, using cached data: ${error.message}`);\n    return { data: fallbackData };\n  }\n};\n\nexport const getComponents = (type) => axios.get(`${API_BASE}/${type}`);\nexport const calculate = (data) => axios.post(`${API_BASE}/calculate`, data);\nexport const calculateSolarPotential = (data) => \n  apiWithFallback(\n    () => axios.post(`${API_BASE}/solar-potential`, data),\n    mockDataService.getSolarPotentialResult(data)\n  );\n\n// New Location APIs\nexport const getAllRegions = () => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/locations/regions`),\n    mockDataService.getLocationData()\n  );\n\nexport const getRegionsByCountry = (country) => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/locations/regions/country/${country}`),\n    mockDataService.getLocationData().filter(item => item.country === country)\n  );\n\nexport const searchCitiesByName = (name) => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/locations/cities/search?name=${name}`),\n    mockDataService.getLocationData().filter(item => \n      item.name.toLowerCase().includes(name.toLowerCase())\n    )\n  );\n\nexport const searchCitiesByPostcode = (prefix) => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/locations/cities/postcode?prefix=${prefix}`),\n    mockDataService.getLocationData().filter(item => \n      item.postcode.toLowerCase().startsWith(prefix.toLowerCase())\n    )\n  );\n\nexport const getCitiesByCountry = (country) => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/locations/cities/country/${country}`),\n    mockDataService.getLocationData().filter(item => item.country === country)\n  );\n\n// New NASA POWER API (replaced frontend implementation)\nexport const fetchSolarData = (latitude, longitude, location) => \n    axios.post(`${API_BASE}/nasa-power/solar-data`, { latitude, longitude, location });\n\nexport const fetchSolarDataGet = (latitude, longitude, location) => \n    axios.get(`${API_BASE}/nasa-power/solar-data?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Location Specific Yield API\nexport const calculateLocationSpecificYield = (data) => axios.post(`${API_BASE}/location-yield/calculate`, data);\n\nexport const calculateLocationSpecificYieldForMonth = (month, latitude, longitude, location) => \n    axios.get(`${API_BASE}/location-yield/month/${month}?latitude=${latitude}&longitude=${longitude}&location=${location || ''}`);\n\n// New Total Installed Capacity API\nexport const calculateTotalInstalledCapacity = (data) => \n  apiWithFallback(\n    () => axios.post(`${API_BASE}/solar-capacity/calculate`, data),\n    mockDataService.getTotalInstalledCapacity(data)\n  );\n\nexport const getAllSolarPanelTypes = () => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/solar-capacity/panel-types`),\n    mockDataService.getSolarPanelTypes()\n  );\n\nexport const getSolarPanelTypeById = (id) => \n  apiWithFallback(\n    () => axios.get(`${API_BASE}/solar-capacity/panel-types/${id}`),\n    mockDataService.getSolarPanelTypes().find(panel => panel.id === id)\n  );\n\n// New Monthly Electricity Generation API\nexport const calculateMonthlyElectricityGeneration = (data) => axios.post(`${API_BASE}/solar-generation/monthly`, data);\n\n// New Electricity Demand APIs\nexport const calculateElectricityDemand = (data) => axios.post(`${API_BASE}/electricity-demand/calculate`, data);\n\nexport const getElectricityDemandProportions = () => axios.get(`${API_BASE}/electricity-demand/proportions`);\n\nexport const validateMonthlyElectricityUsage = (monthlyUsage) => axios.post(`${API_BASE}/electricity-demand/validate-monthly`, monthlyUsage);\n\n// New Gas Demand APIs\nexport const calculateGasDemand = (data) => axios.post(`${API_BASE}/gas-demand/calculate`, data);\n\nexport const getGasDemandProportions = () => axios.get(`${API_BASE}/gas-demand/proportions`);\n\nexport const validateMonthlyGasUsage = (monthlyUsage) => axios.post(`${API_BASE}/gas-demand/validate-monthly`, monthlyUsage);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}