{"ast":null,"code":"// 地理定位服务\nexport const locationService = {\n  // 获取用户当前位置\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject({\n          success: false,\n          error: 'Geolocation not supported'\n        });\n        return;\n      }\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5分钟缓存\n      };\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          success: true,\n          data: {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n            accuracy: position.coords.accuracy\n          }\n        });\n      }, error => {\n        let errorMessage = 'Location access denied';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'Location access denied by user';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information unavailable';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'Location request timeout';\n            break;\n        }\n        reject({\n          success: false,\n          error: errorMessage\n        });\n      }, options);\n    });\n  },\n  // 将坐标转换为邮编（反向地理编码）\n  async coordinatesToPostcode(latitude, longitude) {\n    try {\n      const response = await fetch(`https://api.postcodes.io/postcodes?lon=${longitude}&lat=${latitude}&limit=1`);\n      if (response.ok) {\n        const data = await response.json();\n        if (data.result && data.result.length > 0) {\n          return {\n            success: true,\n            data: {\n              postcode: data.result[0].postcode,\n              distance: data.result[0].distance\n            }\n          };\n        }\n      }\n      return {\n        success: false,\n        error: 'No postcode found for coordinates'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  }\n};","map":{"version":3,"names":["locationService","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","success","error","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","position","data","latitude","coords","longitude","accuracy","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","coordinatesToPostcode","response","fetch","ok","json","result","length","postcode","distance"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/services/locationService.js"],"sourcesContent":["// 地理定位服务\nexport const locationService = {\n  // 获取用户当前位置\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject({ success: false, error: 'Geolocation not supported' });\n        return;\n      }\n\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5分钟缓存\n      };\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            success: true,\n            data: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: position.coords.accuracy\n            }\n          });\n        },\n        (error) => {\n          let errorMessage = 'Location access denied';\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = 'Location access denied by user';\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = 'Location information unavailable';\n              break;\n            case error.TIMEOUT:\n              errorMessage = 'Location request timeout';\n              break;\n          }\n          reject({ success: false, error: errorMessage });\n        },\n        options\n      );\n    });\n  },\n\n  // 将坐标转换为邮编（反向地理编码）\n  async coordinatesToPostcode(latitude, longitude) {\n    try {\n      const response = await fetch(\n        `https://api.postcodes.io/postcodes?lon=${longitude}&lat=${latitude}&limit=1`\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.result && data.result.length > 0) {\n          return {\n            success: true,\n            data: {\n              postcode: data.result[0].postcode,\n              distance: data.result[0].distance\n            }\n          };\n        }\n      }\n      return { success: false, error: 'No postcode found for coordinates' };\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  }\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,eAAe,GAAG;EAC7B;EACA,MAAMC,kBAAkBA,CAAA,EAAG;IACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;QAC1BF,MAAM,CAAC;UAAEG,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAA4B,CAAC,CAAC;QAC9D;MACF;MAEA,MAAMC,OAAO,GAAG;QACdC,kBAAkB,EAAE,IAAI;QACxBC,OAAO,EAAE,KAAK;QACdC,UAAU,EAAE,MAAM,CAAC;MACrB,CAAC;MAEDP,SAAS,CAACC,WAAW,CAACO,kBAAkB,CACrCC,QAAQ,IAAK;QACZX,OAAO,CAAC;UACNI,OAAO,EAAE,IAAI;UACbQ,IAAI,EAAE;YACJC,QAAQ,EAAEF,QAAQ,CAACG,MAAM,CAACD,QAAQ;YAClCE,SAAS,EAAEJ,QAAQ,CAACG,MAAM,CAACC,SAAS;YACpCC,QAAQ,EAAEL,QAAQ,CAACG,MAAM,CAACE;UAC5B;QACF,CAAC,CAAC;MACJ,CAAC,EACAX,KAAK,IAAK;QACT,IAAIY,YAAY,GAAG,wBAAwB;QAC3C,QAAQZ,KAAK,CAACa,IAAI;UAChB,KAAKb,KAAK,CAACc,iBAAiB;YAC1BF,YAAY,GAAG,gCAAgC;YAC/C;UACF,KAAKZ,KAAK,CAACe,oBAAoB;YAC7BH,YAAY,GAAG,kCAAkC;YACjD;UACF,KAAKZ,KAAK,CAACgB,OAAO;YAChBJ,YAAY,GAAG,0BAA0B;YACzC;QACJ;QACAhB,MAAM,CAAC;UAAEG,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAEY;QAAa,CAAC,CAAC;MACjD,CAAC,EACDX,OACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED;EACA,MAAMgB,qBAAqBA,CAACT,QAAQ,EAAEE,SAAS,EAAE;IAC/C,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0CAA0CT,SAAS,QAAQF,QAAQ,UACrE,CAAC;MAED,IAAIU,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMb,IAAI,GAAG,MAAMW,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAId,IAAI,CAACe,MAAM,IAAIf,IAAI,CAACe,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UACzC,OAAO;YACLxB,OAAO,EAAE,IAAI;YACbQ,IAAI,EAAE;cACJiB,QAAQ,EAAEjB,IAAI,CAACe,MAAM,CAAC,CAAC,CAAC,CAACE,QAAQ;cACjCC,QAAQ,EAAElB,IAAI,CAACe,MAAM,CAAC,CAAC,CAAC,CAACG;YAC3B;UACF,CAAC;QACH;MACF;MACA,OAAO;QAAE1B,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAoC,CAAC;IACvE,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAgB,CAAC;IACnD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}