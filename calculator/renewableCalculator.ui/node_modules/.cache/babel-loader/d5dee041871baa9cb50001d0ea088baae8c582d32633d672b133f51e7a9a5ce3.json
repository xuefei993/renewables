{"ast":null,"code":"// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService = {\n  // 模拟太阳能潜力计算结果\n  getSolarPotentialResult(request) {\n    return {\n      solarPotential: 85.6,\n      shadingFactor: 0.9,\n      utilisationFactor: 0.85,\n      tiltOrientationFactor: 0.95,\n      solarPanelCount: Math.floor((request.roofSize || 50) / 2)\n    };\n  },\n  // 模拟位置信息\n  getLocationData() {\n    return [{\n      id: 1,\n      name: \"London\",\n      postcode: \"SW1A 1AA\",\n      country: \"England\",\n      region: \"Greater London\",\n      latitude: 51.5074,\n      longitude: -0.1278\n    }, {\n      id: 2,\n      name: \"Manchester\",\n      postcode: \"M1 1AA\",\n      country: \"England\",\n      region: \"Greater Manchester\",\n      latitude: 53.4808,\n      longitude: -2.2426\n    }, {\n      id: 3,\n      name: \"Birmingham\",\n      postcode: \"B1 1AA\",\n      country: \"England\",\n      region: \"West Midlands\",\n      latitude: 52.4862,\n      longitude: -1.8904\n    }];\n  },\n  // 模拟太阳能板类型数据\n  getSolarPanelTypes() {\n    return [{\n      id: 1,\n      name: \"Monocrystalline Premium\",\n      efficiency: 22.0,\n      wattage: 450,\n      costPerWatt: 0.85,\n      warrantyYears: 25\n    }, {\n      id: 2,\n      name: \"Monocrystalline Standard\",\n      efficiency: 20.5,\n      wattage: 410,\n      costPerWatt: 0.75,\n      warrantyYears: 25\n    }, {\n      id: 3,\n      name: \"Polycrystalline\",\n      efficiency: 18.5,\n      wattage: 370,\n      costPerWatt: 0.65,\n      warrantyYears: 20\n    }];\n  },\n  // 模拟总安装容量计算\n  getTotalInstalledCapacity(data) {\n    const panelCount = data.solarPanelCount || 20;\n    const panelWattage = data.panelWattage || 410;\n    return {\n      totalCapacity: panelCount * panelWattage / 1000,\n      // kW\n      panelCount: panelCount,\n      panelWattage: panelWattage,\n      systemEfficiency: 0.85\n    };\n  },\n  // 模拟月度发电量\n  getMonthlyElectricityGeneration(data) {\n    const capacity = data.totalCapacity || 8.2;\n    return {\n      monthlyGeneration: [{\n        month: 1,\n        generation: capacity * 45\n      }, {\n        month: 2,\n        generation: capacity * 65\n      }, {\n        month: 3,\n        generation: capacity * 95\n      }, {\n        month: 4,\n        generation: capacity * 125\n      }, {\n        month: 5,\n        generation: capacity * 145\n      }, {\n        month: 6,\n        generation: capacity * 155\n      }, {\n        month: 7,\n        generation: capacity * 150\n      }, {\n        month: 8,\n        generation: capacity * 135\n      }, {\n        month: 9,\n        generation: capacity * 110\n      }, {\n        month: 10,\n        generation: capacity * 80\n      }, {\n        month: 11,\n        generation: capacity * 50\n      }, {\n        month: 12,\n        generation: capacity * 35\n      }],\n      annualGeneration: capacity * 1200,\n      systemCapacity: capacity\n    };\n  },\n  // 模拟电力需求计算\n  getElectricityDemand(data) {\n    const baseUsage = data.annualUsage || 3500;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.09),\n      2: Math.round(baseUsage * 0.08),\n      3: Math.round(baseUsage * 0.08),\n      4: Math.round(baseUsage * 0.07),\n      5: Math.round(baseUsage * 0.07),\n      6: Math.round(baseUsage * 0.07),\n      7: Math.round(baseUsage * 0.08),\n      8: Math.round(baseUsage * 0.08),\n      9: Math.round(baseUsage * 0.08),\n      10: Math.round(baseUsage * 0.09),\n      11: Math.round(baseUsage * 0.10),\n      12: Math.round(baseUsage * 0.11)\n    };\n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    return {\n      annualElectricityDemand: baseUsage,\n      monthlyElectricityDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n  // 模拟燃气需求计算  \n  getGasDemand(data) {\n    const baseUsage = data.annualUsage || 12000;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.15),\n      2: Math.round(baseUsage * 0.13),\n      3: Math.round(baseUsage * 0.11),\n      4: Math.round(baseUsage * 0.08),\n      5: Math.round(baseUsage * 0.05),\n      6: Math.round(baseUsage * 0.03),\n      7: Math.round(baseUsage * 0.03),\n      8: Math.round(baseUsage * 0.03),\n      9: Math.round(baseUsage * 0.05),\n      10: Math.round(baseUsage * 0.08),\n      11: Math.round(baseUsage * 0.12),\n      12: Math.round(baseUsage * 0.14)\n    };\n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    return {\n      annualGasDemand: baseUsage,\n      monthlyGasDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n  // 模拟太阳能安装成本\n  getSolarInstallationCost(data) {\n    const systemSize = data.systemSize || 8.2;\n    const baseCostPerKW = 1850;\n    const totalCost = systemSize * baseCostPerKW;\n    return {\n      systemSize: systemSize,\n      equipmentCost: totalCost * 0.6,\n      installationCost: totalCost * 0.25,\n      permitsCost: totalCost * 0.05,\n      otherCosts: totalCost * 0.1,\n      totalCost: totalCost,\n      costPerKW: baseCostPerKW,\n      paybackPeriod: 8.5,\n      roi: 12.8\n    };\n  },\n  // 模拟月度节约计算\n  getMonthlySavings(data) {\n    const monthlyGeneration = data.monthlyGeneration || 685;\n    const electricityRate = data.electricityRate || 0.28;\n    const exportRate = data.exportRate || 0.15;\n    return {\n      monthlySavings: [{\n        month: 1,\n        savings: monthlyGeneration * 0.4 * electricityRate + monthlyGeneration * 0.6 * exportRate\n      }, {\n        month: 2,\n        savings: monthlyGeneration * 0.5 * electricityRate + monthlyGeneration * 0.5 * exportRate\n      }, {\n        month: 3,\n        savings: monthlyGeneration * 0.6 * electricityRate + monthlyGeneration * 0.4 * exportRate\n      }, {\n        month: 4,\n        savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate\n      }, {\n        month: 5,\n        savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate\n      }, {\n        month: 6,\n        savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate\n      }, {\n        month: 7,\n        savings: monthlyGeneration * 0.75 * electricityRate + monthlyGeneration * 0.25 * exportRate\n      }, {\n        month: 8,\n        savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate\n      }, {\n        month: 9,\n        savings: monthlyGeneration * 0.65 * electricityRate + monthlyGeneration * 0.35 * exportRate\n      }, {\n        month: 10,\n        savings: monthlyGeneration * 0.55 * electricityRate + monthlyGeneration * 0.45 * exportRate\n      }, {\n        month: 11,\n        savings: monthlyGeneration * 0.45 * electricityRate + monthlyGeneration * 0.55 * exportRate\n      }, {\n        month: 12,\n        savings: monthlyGeneration * 0.35 * electricityRate + monthlyGeneration * 0.65 * exportRate\n      }],\n      annualSavings: monthlyGeneration * 12 * (0.6 * electricityRate + 0.4 * exportRate),\n      selfConsumptionRate: 0.6,\n      exportRate: 0.4\n    };\n  },\n  // 模拟碳排放节约\n  getCarbonSavings(data) {\n    const annualGeneration = data.annualGeneration || 8220;\n    const carbonIntensity = 0.233; // kg CO2/kWh UK grid average\n\n    return {\n      annualCarbonSaved: annualGeneration * carbonIntensity,\n      lifetimeCarbonSaved: annualGeneration * carbonIntensity * 25,\n      equivalentTrees: Math.round(annualGeneration * carbonIntensity / 21.8),\n      equivalentCars: Math.round(annualGeneration * carbonIntensity / 4600),\n      carbonIntensity: carbonIntensity\n    };\n  },\n  // 模拟设备对比\n  getEquipmentComparison(data) {\n    return {\n      configurations: [{\n        id: 1,\n        name: \"Premium Solar + Battery\",\n        solarCapacity: 8.5,\n        batteryCapacity: 13.5,\n        totalCost: 18500,\n        annualSavings: 1850,\n        paybackPeriod: 8.2,\n        selfSufficiency: 0.85\n      }, {\n        id: 2,\n        name: \"Standard Solar Only\",\n        solarCapacity: 8.5,\n        batteryCapacity: 0,\n        totalCost: 12500,\n        annualSavings: 1250,\n        paybackPeriod: 9.8,\n        selfSufficiency: 0.55\n      }, {\n        id: 3,\n        name: \"Solar + Small Battery\",\n        solarCapacity: 6.2,\n        batteryCapacity: 7.0,\n        totalCost: 14200,\n        annualSavings: 1420,\n        paybackPeriod: 9.1,\n        selfSufficiency: 0.72\n      }]\n    };\n  },\n  // 模拟政府补贴\n  getGovernmentSubsidies(data) {\n    return {\n      availableSubsidies: [{\n        id: 1,\n        name: \"Smart Export Guarantee (SEG)\",\n        type: \"export_tariff\",\n        amount: 0.15,\n        unit: \"£/kWh\",\n        description: \"Payment for excess electricity exported to grid\",\n        eligibility: \"All solar installations\",\n        duration: \"Ongoing\"\n      }, {\n        id: 2,\n        name: \"VAT Reduction\",\n        type: \"tax_reduction\",\n        amount: 0.0,\n        unit: \"%\",\n        description: \"0% VAT on solar panel installation\",\n        eligibility: \"Residential properties\",\n        duration: \"Until March 2027\"\n      }, {\n        id: 3,\n        name: \"Local Council Grant\",\n        type: \"grant\",\n        amount: 1000,\n        unit: \"£\",\n        description: \"One-time grant for renewable energy installation\",\n        eligibility: \"Based on household income\",\n        duration: \"Subject to availability\"\n      }],\n      totalPotentialSavings: 1000,\n      applicableSubsidies: 2\n    };\n  },\n  // 获取完整计算结果\n  getCompleteCalculationResult(data) {\n    return {\n      solarInstallation: this.getSolarInstallationCost(data),\n      monthlyGeneration: this.getMonthlyElectricityGeneration(data),\n      monthlySavings: this.getMonthlySavings(data),\n      carbonSavings: this.getCarbonSavings(data),\n      paybackAnalysis: {\n        paybackPeriod: 8.5,\n        roi: 12.8,\n        netPresentValue: 8450,\n        internalRateOfReturn: 0.135\n      },\n      systemConfiguration: {\n        recommendedSystem: \"8.2kW Solar + 13.5kWh Battery\",\n        annualGeneration: 8220,\n        selfConsumption: 65,\n        exportToGrid: 35\n      }\n    };\n  },\n  // 获取热泵数据\n  getHeatPumps() {\n    return [{\n      id: 1,\n      name: \"Air Source Heat Pump - Premium\",\n      type: \"air_source\",\n      capacity: 12.0,\n      efficiency: 4.2,\n      cost: 12500,\n      installationCost: 3500\n    }, {\n      id: 2,\n      name: \"Air Source Heat Pump - Standard\",\n      type: \"air_source\",\n      capacity: 10.0,\n      efficiency: 3.8,\n      cost: 9500,\n      installationCost: 3000\n    }];\n  },\n  // 获取电池存储系统\n  getBatteries() {\n    return [{\n      id: 1,\n      name: \"Tesla Powerwall 2\",\n      capacity: 13.5,\n      power: 5.0,\n      efficiency: 0.92,\n      cost: 8500,\n      warranty: 10\n    }, {\n      id: 2,\n      name: \"LG Chem RESU\",\n      capacity: 9.8,\n      power: 5.0,\n      efficiency: 0.90,\n      cost: 6200,\n      warranty: 10\n    }];\n  }\n};","map":{"version":3,"names":["mockDataService","getSolarPotentialResult","request","solarPotential","shadingFactor","utilisationFactor","tiltOrientationFactor","solarPanelCount","Math","floor","roofSize","getLocationData","id","name","postcode","country","region","latitude","longitude","getSolarPanelTypes","efficiency","wattage","costPerWatt","warrantyYears","getTotalInstalledCapacity","data","panelCount","panelWattage","totalCapacity","systemEfficiency","getMonthlyElectricityGeneration","capacity","monthlyGeneration","month","generation","annualGeneration","systemCapacity","getElectricityDemand","baseUsage","annualUsage","monthlyData","round","monthlyValues","Object","values","maxValue","max","minValue","min","peakMonth","keys","find","key","lowMonth","annualElectricityDemand","monthlyElectricityDemand","peakMonthDemand","parseInt","lowMonthDemand","calculationMethod","getGasDemand","annualGasDemand","monthlyGasDemand","getSolarInstallationCost","systemSize","baseCostPerKW","totalCost","equipmentCost","installationCost","permitsCost","otherCosts","costPerKW","paybackPeriod","roi","getMonthlySavings","electricityRate","exportRate","monthlySavings","savings","annualSavings","selfConsumptionRate","getCarbonSavings","carbonIntensity","annualCarbonSaved","lifetimeCarbonSaved","equivalentTrees","equivalentCars","getEquipmentComparison","configurations","solarCapacity","batteryCapacity","selfSufficiency","getGovernmentSubsidies","availableSubsidies","type","amount","unit","description","eligibility","duration","totalPotentialSavings","applicableSubsidies","getCompleteCalculationResult","solarInstallation","carbonSavings","paybackAnalysis","netPresentValue","internalRateOfReturn","systemConfiguration","recommendedSystem","selfConsumption","exportToGrid","getHeatPumps","cost","getBatteries","power","warranty"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/services/mockDataService.js"],"sourcesContent":["// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService = {\n  \n  // 模拟太阳能潜力计算结果\n  getSolarPotentialResult(request) {\n    return {\n      solarPotential: 85.6,\n      shadingFactor: 0.9,\n      utilisationFactor: 0.85,\n      tiltOrientationFactor: 0.95,\n      solarPanelCount: Math.floor((request.roofSize || 50) / 2)\n    };\n  },\n\n  // 模拟位置信息\n  getLocationData() {\n    return [\n      {\n        id: 1,\n        name: \"London\",\n        postcode: \"SW1A 1AA\",\n        country: \"England\",\n        region: \"Greater London\",\n        latitude: 51.5074,\n        longitude: -0.1278\n      },\n      {\n        id: 2,\n        name: \"Manchester\",\n        postcode: \"M1 1AA\",\n        country: \"England\", \n        region: \"Greater Manchester\",\n        latitude: 53.4808,\n        longitude: -2.2426\n      },\n      {\n        id: 3,\n        name: \"Birmingham\",\n        postcode: \"B1 1AA\",\n        country: \"England\",\n        region: \"West Midlands\", \n        latitude: 52.4862,\n        longitude: -1.8904\n      }\n    ];\n  },\n\n  // 模拟太阳能板类型数据\n  getSolarPanelTypes() {\n    return [\n      {\n        id: 1,\n        name: \"Monocrystalline Premium\",\n        efficiency: 22.0,\n        wattage: 450,\n        costPerWatt: 0.85,\n        warrantyYears: 25\n      },\n      {\n        id: 2, \n        name: \"Monocrystalline Standard\",\n        efficiency: 20.5,\n        wattage: 410,\n        costPerWatt: 0.75,\n        warrantyYears: 25\n      },\n      {\n        id: 3,\n        name: \"Polycrystalline\", \n        efficiency: 18.5,\n        wattage: 370,\n        costPerWatt: 0.65,\n        warrantyYears: 20\n      }\n    ];\n  },\n\n  // 模拟总安装容量计算\n  getTotalInstalledCapacity(data) {\n    const panelCount = data.solarPanelCount || 20;\n    const panelWattage = data.panelWattage || 410;\n    return {\n      totalCapacity: (panelCount * panelWattage) / 1000, // kW\n      panelCount: panelCount,\n      panelWattage: panelWattage,\n      systemEfficiency: 0.85\n    };\n  },\n\n  // 模拟月度发电量\n  getMonthlyElectricityGeneration(data) {\n    const capacity = data.totalCapacity || 8.2;\n    return {\n      monthlyGeneration: [\n        { month: 1, generation: capacity * 45 },\n        { month: 2, generation: capacity * 65 },\n        { month: 3, generation: capacity * 95 },\n        { month: 4, generation: capacity * 125 },\n        { month: 5, generation: capacity * 145 },\n        { month: 6, generation: capacity * 155 },\n        { month: 7, generation: capacity * 150 },\n        { month: 8, generation: capacity * 135 },\n        { month: 9, generation: capacity * 110 },\n        { month: 10, generation: capacity * 80 },\n        { month: 11, generation: capacity * 50 },\n        { month: 12, generation: capacity * 35 }\n      ],\n      annualGeneration: capacity * 1200,\n      systemCapacity: capacity\n    };\n  },\n\n  // 模拟电力需求计算\n  getElectricityDemand(data) {\n    const baseUsage = data.annualUsage || 3500;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.09),\n      2: Math.round(baseUsage * 0.08),\n      3: Math.round(baseUsage * 0.08),\n      4: Math.round(baseUsage * 0.07),\n      5: Math.round(baseUsage * 0.07),\n      6: Math.round(baseUsage * 0.07),\n      7: Math.round(baseUsage * 0.08),\n      8: Math.round(baseUsage * 0.08),\n      9: Math.round(baseUsage * 0.08),\n      10: Math.round(baseUsage * 0.09),\n      11: Math.round(baseUsage * 0.10),\n      12: Math.round(baseUsage * 0.11)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualElectricityDemand: baseUsage,\n      monthlyElectricityDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟燃气需求计算  \n  getGasDemand(data) {\n    const baseUsage = data.annualUsage || 12000;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.15),\n      2: Math.round(baseUsage * 0.13),\n      3: Math.round(baseUsage * 0.11),\n      4: Math.round(baseUsage * 0.08),\n      5: Math.round(baseUsage * 0.05),\n      6: Math.round(baseUsage * 0.03),\n      7: Math.round(baseUsage * 0.03),\n      8: Math.round(baseUsage * 0.03),\n      9: Math.round(baseUsage * 0.05),\n      10: Math.round(baseUsage * 0.08),\n      11: Math.round(baseUsage * 0.12),\n      12: Math.round(baseUsage * 0.14)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualGasDemand: baseUsage,\n      monthlyGasDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟太阳能安装成本\n  getSolarInstallationCost(data) {\n    const systemSize = data.systemSize || 8.2;\n    const baseCostPerKW = 1850;\n    const totalCost = systemSize * baseCostPerKW;\n    \n    return {\n      systemSize: systemSize,\n      equipmentCost: totalCost * 0.6,\n      installationCost: totalCost * 0.25,\n      permitsCost: totalCost * 0.05,\n      otherCosts: totalCost * 0.1,\n      totalCost: totalCost,\n      costPerKW: baseCostPerKW,\n      paybackPeriod: 8.5,\n      roi: 12.8\n    };\n  },\n\n  // 模拟月度节约计算\n  getMonthlySavings(data) {\n    const monthlyGeneration = data.monthlyGeneration || 685;\n    const electricityRate = data.electricityRate || 0.28;\n    const exportRate = data.exportRate || 0.15;\n    \n    return {\n      monthlySavings: [\n        { month: 1, savings: monthlyGeneration * 0.4 * electricityRate + monthlyGeneration * 0.6 * exportRate },\n        { month: 2, savings: monthlyGeneration * 0.5 * electricityRate + monthlyGeneration * 0.5 * exportRate },\n        { month: 3, savings: monthlyGeneration * 0.6 * electricityRate + monthlyGeneration * 0.4 * exportRate },\n        { month: 4, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 5, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 6, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 7, savings: monthlyGeneration * 0.75 * electricityRate + monthlyGeneration * 0.25 * exportRate },\n        { month: 8, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 9, savings: monthlyGeneration * 0.65 * electricityRate + monthlyGeneration * 0.35 * exportRate },\n        { month: 10, savings: monthlyGeneration * 0.55 * electricityRate + monthlyGeneration * 0.45 * exportRate },\n        { month: 11, savings: monthlyGeneration * 0.45 * electricityRate + monthlyGeneration * 0.55 * exportRate },\n        { month: 12, savings: monthlyGeneration * 0.35 * electricityRate + monthlyGeneration * 0.65 * exportRate }\n      ],\n      annualSavings: monthlyGeneration * 12 * ((0.6 * electricityRate) + (0.4 * exportRate)),\n      selfConsumptionRate: 0.6,\n      exportRate: 0.4\n    };\n  },\n\n  // 模拟碳排放节约\n  getCarbonSavings(data) {\n    const annualGeneration = data.annualGeneration || 8220;\n    const carbonIntensity = 0.233; // kg CO2/kWh UK grid average\n    \n    return {\n      annualCarbonSaved: annualGeneration * carbonIntensity,\n      lifetimeCarbonSaved: annualGeneration * carbonIntensity * 25,\n      equivalentTrees: Math.round(annualGeneration * carbonIntensity / 21.8),\n      equivalentCars: Math.round(annualGeneration * carbonIntensity / 4600),\n      carbonIntensity: carbonIntensity\n    };\n  },\n\n  // 模拟设备对比\n  getEquipmentComparison(data) {\n    return {\n      configurations: [\n        {\n          id: 1,\n          name: \"Premium Solar + Battery\",\n          solarCapacity: 8.5,\n          batteryCapacity: 13.5,\n          totalCost: 18500,\n          annualSavings: 1850,\n          paybackPeriod: 8.2,\n          selfSufficiency: 0.85\n        },\n        {\n          id: 2,\n          name: \"Standard Solar Only\", \n          solarCapacity: 8.5,\n          batteryCapacity: 0,\n          totalCost: 12500,\n          annualSavings: 1250,\n          paybackPeriod: 9.8,\n          selfSufficiency: 0.55\n        },\n        {\n          id: 3,\n          name: \"Solar + Small Battery\",\n          solarCapacity: 6.2,\n          batteryCapacity: 7.0, \n          totalCost: 14200,\n          annualSavings: 1420,\n          paybackPeriod: 9.1,\n          selfSufficiency: 0.72\n        }\n      ]\n    };\n  },\n\n  // 模拟政府补贴\n  getGovernmentSubsidies(data) {\n    return {\n      availableSubsidies: [\n        {\n          id: 1,\n          name: \"Smart Export Guarantee (SEG)\",\n          type: \"export_tariff\",\n          amount: 0.15,\n          unit: \"£/kWh\",\n          description: \"Payment for excess electricity exported to grid\",\n          eligibility: \"All solar installations\",\n          duration: \"Ongoing\"\n        },\n        {\n          id: 2,\n          name: \"VAT Reduction\",\n          type: \"tax_reduction\", \n          amount: 0.0,\n          unit: \"%\",\n          description: \"0% VAT on solar panel installation\",\n          eligibility: \"Residential properties\",\n          duration: \"Until March 2027\"\n        },\n        {\n          id: 3,\n          name: \"Local Council Grant\",\n          type: \"grant\",\n          amount: 1000,\n          unit: \"£\",\n          description: \"One-time grant for renewable energy installation\", \n          eligibility: \"Based on household income\",\n          duration: \"Subject to availability\"\n        }\n      ],\n      totalPotentialSavings: 1000,\n      applicableSubsidies: 2\n    };\n  },\n\n  // 获取完整计算结果\n  getCompleteCalculationResult(data) {\n    return {\n      solarInstallation: this.getSolarInstallationCost(data),\n      monthlyGeneration: this.getMonthlyElectricityGeneration(data),\n      monthlySavings: this.getMonthlySavings(data),\n      carbonSavings: this.getCarbonSavings(data),\n      paybackAnalysis: {\n        paybackPeriod: 8.5,\n        roi: 12.8,\n        netPresentValue: 8450,\n        internalRateOfReturn: 0.135\n      },\n      systemConfiguration: {\n        recommendedSystem: \"8.2kW Solar + 13.5kWh Battery\",\n        annualGeneration: 8220,\n        selfConsumption: 65,\n        exportToGrid: 35\n      }\n    };\n  },\n\n  // 获取热泵数据\n  getHeatPumps() {\n    return [\n      {\n        id: 1,\n        name: \"Air Source Heat Pump - Premium\",\n        type: \"air_source\",\n        capacity: 12.0,\n        efficiency: 4.2,\n        cost: 12500,\n        installationCost: 3500\n      },\n      {\n        id: 2,\n        name: \"Air Source Heat Pump - Standard\", \n        type: \"air_source\",\n        capacity: 10.0,\n        efficiency: 3.8,\n        cost: 9500,\n        installationCost: 3000\n      }\n    ];\n  },\n\n  // 获取电池存储系统\n  getBatteries() {\n    return [\n      {\n        id: 1,\n        name: \"Tesla Powerwall 2\",\n        capacity: 13.5,\n        power: 5.0,\n        efficiency: 0.92,\n        cost: 8500,\n        warranty: 10\n      },\n      {\n        id: 2,\n        name: \"LG Chem RESU\",\n        capacity: 9.8,\n        power: 5.0,\n        efficiency: 0.90,\n        cost: 6200,\n        warranty: 10\n      }\n    ];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}