{"ast":null,"code":"// 邮编服务 - 使用postcodes.io API\nexport const postcodeService = {\n  // 验证并获取邮编信息\n  async validatePostcode(postcode) {\n    try {\n      const response = await fetch(`https://api.postcodes.io/postcodes/${postcode}`);\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          data: {\n            postcode: data.result.postcode,\n            latitude: data.result.latitude,\n            longitude: data.result.longitude,\n            country: data.result.country,\n            region: data.result.region,\n            admin_district: data.result.admin_district,\n            admin_county: data.result.admin_county\n          }\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid postcode'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  },\n  // 批量验证邮编\n  async validateMultiplePostcodes(postcodes) {\n    try {\n      const response = await fetch('https://api.postcodes.io/postcodes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          postcodes\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          data: data.result\n        };\n      }\n      return {\n        success: false,\n        error: 'Validation failed'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  }\n};","map":{"version":3,"names":["postcodeService","validatePostcode","postcode","response","fetch","ok","data","json","success","result","latitude","longitude","country","region","admin_district","admin_county","error","validateMultiplePostcodes","postcodes","method","headers","body","JSON","stringify"],"sources":["/Users/xuefei/Desktop/calculator00 copy 3/calculator/renewableCalculator.ui/src/services/postcodeService.js"],"sourcesContent":["// 邮编服务 - 使用postcodes.io API\nexport const postcodeService = {\n  // 验证并获取邮编信息\n  async validatePostcode(postcode) {\n    try {\n      const response = await fetch(`https://api.postcodes.io/postcodes/${postcode}`);\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          success: true,\n          data: {\n            postcode: data.result.postcode,\n            latitude: data.result.latitude,\n            longitude: data.result.longitude,\n            country: data.result.country,\n            region: data.result.region,\n            admin_district: data.result.admin_district,\n            admin_county: data.result.admin_county\n          }\n        };\n      } else {\n        return { success: false, error: 'Invalid postcode' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  },\n\n  // 批量验证邮编\n  async validateMultiplePostcodes(postcodes) {\n    try {\n      const response = await fetch('https://api.postcodes.io/postcodes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ postcodes })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        return { success: true, data: data.result };\n      }\n      return { success: false, error: 'Validation failed' };\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  }\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,eAAe,GAAG;EAC7B;EACA,MAAMC,gBAAgBA,CAACC,QAAQ,EAAE;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCF,QAAQ,EAAE,CAAC;MAC9E,IAAIC,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,OAAO;UACLC,OAAO,EAAE,IAAI;UACbF,IAAI,EAAE;YACJJ,QAAQ,EAAEI,IAAI,CAACG,MAAM,CAACP,QAAQ;YAC9BQ,QAAQ,EAAEJ,IAAI,CAACG,MAAM,CAACC,QAAQ;YAC9BC,SAAS,EAAEL,IAAI,CAACG,MAAM,CAACE,SAAS;YAChCC,OAAO,EAAEN,IAAI,CAACG,MAAM,CAACG,OAAO;YAC5BC,MAAM,EAAEP,IAAI,CAACG,MAAM,CAACI,MAAM;YAC1BC,cAAc,EAAER,IAAI,CAACG,MAAM,CAACK,cAAc;YAC1CC,YAAY,EAAET,IAAI,CAACG,MAAM,CAACM;UAC5B;QACF,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UAAEP,OAAO,EAAE,KAAK;UAAEQ,KAAK,EAAE;QAAmB,CAAC;MACtD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAER,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE;MAAgB,CAAC;IACnD;EACF,CAAC;EAED;EACA,MAAMC,yBAAyBA,CAACC,SAAS,EAAE;IACzC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEe,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEL;QAAU,CAAC;MACpC,CAAC,CAAC;MAEF,IAAIf,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,OAAO;UAAEC,OAAO,EAAE,IAAI;UAAEF,IAAI,EAAEA,IAAI,CAACG;QAAO,CAAC;MAC7C;MACA,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE;MAAoB,CAAC;IACvD,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAER,OAAO,EAAE,KAAK;QAAEQ,KAAK,EAAE;MAAgB,CAAC;IACnD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}