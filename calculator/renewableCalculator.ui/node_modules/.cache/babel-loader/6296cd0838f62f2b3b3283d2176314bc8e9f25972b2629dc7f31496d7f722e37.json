{"ast":null,"code":"// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService={// 模拟太阳能潜力计算结果\ngetSolarPotentialResult(request){return{solarPotential:85.6,shadingFactor:0.9,utilisationFactor:0.85,tiltOrientationFactor:0.95,solarPanelCount:Math.floor((request.roofSize||50)/2)};},// 模拟位置信息\ngetLocationData(){return[{id:1,name:\"London\",postcode:\"SW1A 1AA\",country:\"England\",region:\"Greater London\",latitude:51.5074,longitude:-0.1278},{id:2,name:\"Manchester\",postcode:\"M1 1AA\",country:\"England\",region:\"Greater Manchester\",latitude:53.4808,longitude:-2.2426},{id:3,name:\"Birmingham\",postcode:\"B1 1AA\",country:\"England\",region:\"West Midlands\",latitude:52.4862,longitude:-1.8904}];},// 模拟太阳能板类型数据\ngetSolarPanelTypes(){return[{id:1,name:\"Monocrystalline Premium\",efficiency:22.0,ratedPowerPerPanel:450,price:380,costPerWatt:0.85,warrantyYears:25},{id:2,name:\"Monocrystalline Standard\",efficiency:20.5,ratedPowerPerPanel:410,price:310,costPerWatt:0.75,warrantyYears:25},{id:3,name:\"Polycrystalline\",efficiency:18.5,ratedPowerPerPanel:370,price:240,costPerWatt:0.65,warrantyYears:20}];},// 模拟总安装容量计算\ngetTotalInstalledCapacity(data){const panelCount=data.solarPanelCount||20;const panelWattage=data.panelWattage||410;return{totalCapacity:panelCount*panelWattage/1000,// kW\npanelCount:panelCount,panelWattage:panelWattage,systemEfficiency:0.85};},// 模拟月度发电量\ngetMonthlyElectricityGeneration(data){const capacity=data.totalCapacity||8.2;return{monthlyGeneration:[{month:1,generation:capacity*45},{month:2,generation:capacity*65},{month:3,generation:capacity*95},{month:4,generation:capacity*125},{month:5,generation:capacity*145},{month:6,generation:capacity*155},{month:7,generation:capacity*150},{month:8,generation:capacity*135},{month:9,generation:capacity*110},{month:10,generation:capacity*80},{month:11,generation:capacity*50},{month:12,generation:capacity*35}],annualGeneration:capacity*1200,systemCapacity:capacity};},// 模拟电力需求计算\ngetElectricityDemand(data){const baseUsage=data.annualUsage||3500;const monthlyData={1:Math.round(baseUsage*0.09),2:Math.round(baseUsage*0.08),3:Math.round(baseUsage*0.08),4:Math.round(baseUsage*0.07),5:Math.round(baseUsage*0.07),6:Math.round(baseUsage*0.07),7:Math.round(baseUsage*0.08),8:Math.round(baseUsage*0.08),9:Math.round(baseUsage*0.08),10:Math.round(baseUsage*0.09),11:Math.round(baseUsage*0.10),12:Math.round(baseUsage*0.11)};const monthlyValues=Object.values(monthlyData);const maxValue=Math.max(...monthlyValues);const minValue=Math.min(...monthlyValues);const peakMonth=Object.keys(monthlyData).find(key=>monthlyData[key]===maxValue);const lowMonth=Object.keys(monthlyData).find(key=>monthlyData[key]===minValue);return{annualElectricityDemand:baseUsage,monthlyElectricityDemand:monthlyData,peakMonthDemand:maxValue,peakMonth:parseInt(peakMonth),lowMonthDemand:minValue,lowMonth:parseInt(lowMonth),calculationMethod:'estimated'};},// 模拟燃气需求计算  \ngetGasDemand(data){const baseUsage=data.annualUsage||12000;const monthlyData={1:Math.round(baseUsage*0.15),2:Math.round(baseUsage*0.13),3:Math.round(baseUsage*0.11),4:Math.round(baseUsage*0.08),5:Math.round(baseUsage*0.05),6:Math.round(baseUsage*0.03),7:Math.round(baseUsage*0.03),8:Math.round(baseUsage*0.03),9:Math.round(baseUsage*0.05),10:Math.round(baseUsage*0.08),11:Math.round(baseUsage*0.12),12:Math.round(baseUsage*0.14)};const monthlyValues=Object.values(monthlyData);const maxValue=Math.max(...monthlyValues);const minValue=Math.min(...monthlyValues);const peakMonth=Object.keys(monthlyData).find(key=>monthlyData[key]===maxValue);const lowMonth=Object.keys(monthlyData).find(key=>monthlyData[key]===minValue);return{annualGasDemand:baseUsage,monthlyGasDemand:monthlyData,peakMonthDemand:maxValue,peakMonth:parseInt(peakMonth),lowMonthDemand:minValue,lowMonth:parseInt(lowMonth),calculationMethod:'estimated'};},// 模拟太阳能安装成本\ngetSolarInstallationCost(data){const systemSize=data.systemSize||8.2;const baseCostPerKW=1850;const totalCost=systemSize*baseCostPerKW;return{systemSize:systemSize,equipmentCost:totalCost*0.6,installationCost:totalCost*0.25,permitsCost:totalCost*0.05,otherCosts:totalCost*0.1,totalCost:totalCost,costPerKW:baseCostPerKW,paybackPeriod:8.5,roi:12.8};},// 模拟月度节约计算\ngetMonthlySavings(data){const monthlyGeneration=data.monthlyGeneration||685;const electricityRate=data.electricityRate||0.28;const exportRate=data.exportRate||0.15;return{monthlySavings:[{month:1,savings:monthlyGeneration*0.4*electricityRate+monthlyGeneration*0.6*exportRate},{month:2,savings:monthlyGeneration*0.5*electricityRate+monthlyGeneration*0.5*exportRate},{month:3,savings:monthlyGeneration*0.6*electricityRate+monthlyGeneration*0.4*exportRate},{month:4,savings:monthlyGeneration*0.7*electricityRate+monthlyGeneration*0.3*exportRate},{month:5,savings:monthlyGeneration*0.8*electricityRate+monthlyGeneration*0.2*exportRate},{month:6,savings:monthlyGeneration*0.8*electricityRate+monthlyGeneration*0.2*exportRate},{month:7,savings:monthlyGeneration*0.75*electricityRate+monthlyGeneration*0.25*exportRate},{month:8,savings:monthlyGeneration*0.7*electricityRate+monthlyGeneration*0.3*exportRate},{month:9,savings:monthlyGeneration*0.65*electricityRate+monthlyGeneration*0.35*exportRate},{month:10,savings:monthlyGeneration*0.55*electricityRate+monthlyGeneration*0.45*exportRate},{month:11,savings:monthlyGeneration*0.45*electricityRate+monthlyGeneration*0.55*exportRate},{month:12,savings:monthlyGeneration*0.35*electricityRate+monthlyGeneration*0.65*exportRate}],annualSavings:monthlyGeneration*12*(0.6*electricityRate+0.4*exportRate),selfConsumptionRate:0.6,exportRate:0.4};},// 模拟碳排放节约\ngetCarbonSavings(data){const annualGeneration=data.annualGeneration||8220;const carbonIntensity=0.233;// kg CO2/kWh UK grid average\nreturn{annualCarbonSaved:annualGeneration*carbonIntensity,lifetimeCarbonSaved:annualGeneration*carbonIntensity*25,equivalentTrees:Math.round(annualGeneration*carbonIntensity/21.8),equivalentCars:Math.round(annualGeneration*carbonIntensity/4600),carbonIntensity:carbonIntensity};},// 模拟设备对比\ngetEquipmentComparison(data){var _data$solarPanelTypeI,_data$heatPumpTypeIds,_data$batteryIds;const solarPanels=this.getSolarPanelTypes();const heatPumps=this.getHeatPumps();const batteries=this.getBatteries();// 根据选择的设备ID获取对应的价格和性能\nconst getSolarPanelData=panelId=>{const panel=solarPanels.find(p=>p.id==panelId);if(!panel)return{cost:12500,generation:8200,savings:1250,export:350,co2:2100};// 计算系统规模\nconst panelCount=Math.floor((data.roofArea||60)/2);// 假设每块板2平米\nconst systemSizeKW=panelCount*panel.ratedPowerPerPanel/1000;// 成本计算\nconst systemCost=panel.price*panelCount;const installationCost=systemCost*0.3;const totalCost=Math.round(systemCost+installationCost);// 发电量计算（基于效率）\nconst baseGeneration=8200;const generationMultiplier=panel.efficiency/20.5;// 以Standard面板为基准\nconst annualGeneration=Math.round(baseGeneration*generationMultiplier*(systemSizeKW/8.2));// 节约和收入计算\nconst electricityRate=0.28;// £/kWh\nconst exportRate=0.15;// £/kWh\nconst selfUseRatio=0.65;// 65%自用\nconst exportRatio=0.35;// 35%出口\nconst annualSavings=Math.round(annualGeneration*selfUseRatio*electricityRate);const annualExport=Math.round(annualGeneration*exportRatio*exportRate);// CO2节约计算\nconst co2Intensity=0.233;// kg CO2/kWh\nconst annualCO2=Math.round(annualGeneration*co2Intensity);// 月度数据计算\nconst monthlyPattern=[0.05,0.07,0.10,0.13,0.16,0.17,0.16,0.15,0.12,0.08,0.05,0.04];const monthlyGeneration=monthlyPattern.map(ratio=>Math.round(annualGeneration*ratio));const monthlySavings=monthlyGeneration.map(gen=>Math.round(gen*selfUseRatio*electricityRate));const monthlyExport=monthlyGeneration.map(gen=>Math.round(gen*exportRatio*exportRate));const monthlyCO2Direct=monthlyGeneration.map(gen=>Math.round(gen*co2Intensity*0.7));const monthlyCO2Indirect=monthlyGeneration.map(gen=>Math.round(gen*co2Intensity*0.3));return{cost:totalCost,generation:annualGeneration,savings:annualSavings,export:annualExport,co2:annualCO2,monthlyData:{generation:monthlyGeneration,savings:monthlySavings,export:monthlyExport,co2Direct:monthlyCO2Direct,co2Indirect:monthlyCO2Indirect}};};const getHeatPumpData=heatPumpId=>{const heatPump=heatPumps.find(h=>h.id==heatPumpId);if(!heatPump)return{cost:10500,savings:850,co2:1800};const totalCost=heatPump.cost+heatPump.installationCost;// 基于COP计算效率和节约\nconst baseSavings=850;const savingsMultiplier=heatPump.cop/3.8;// 以Standard为基准\nconst annualSavings=Math.round(baseSavings*savingsMultiplier);// CO2节约（热泵替代燃气）\nconst baseCO2=1800;const co2Savings=Math.round(baseCO2*savingsMultiplier);// 月度数据（冬季高，夏季低）\nconst monthlyPattern=[0.15,0.13,0.11,0.08,0.05,0.03,0.03,0.03,0.05,0.08,0.12,0.14];const monthlySavings=monthlyPattern.map(ratio=>Math.round(annualSavings*ratio));const monthlyCO2=monthlyPattern.map(ratio=>Math.round(co2Savings*ratio));return{cost:totalCost,savings:annualSavings,co2:co2Savings,monthlyData:{savings:monthlySavings,co2Direct:monthlyCO2,co2Indirect:new Array(12).fill(0)}};};const getBatteryData=batteryId=>{const battery=batteries.find(b=>b.id==batteryId);if(!battery)return{cost:8500,savings:420};const totalCost=battery.cost+1500;// 加安装费\n// 基于容量计算节约（更大容量=更多节约）\nconst baseSavings=420;const savingsMultiplier=battery.capacityKwh/9.8;// 以LG Chem为基准\nconst annualSavings=Math.round(baseSavings*savingsMultiplier);// 电池存储会减少出口收入\nconst exportReduction=Math.round(annualSavings*0.3);const monthlySavings=new Array(12).fill(Math.round(annualSavings/12));const monthlyExportReduction=new Array(12).fill(Math.round(-exportReduction/12));return{cost:totalCost,savings:annualSavings,exportReduction:-exportReduction,monthlyData:{savings:monthlySavings,export:monthlyExportReduction,co2Direct:new Array(12).fill(0),co2Indirect:new Array(12).fill(0)}};};// 模拟真实API返回的设备对比结果格式\nconst solarData=((_data$solarPanelTypeI=data.solarPanelTypeIds)===null||_data$solarPanelTypeI===void 0?void 0:_data$solarPanelTypeI.length)>0?getSolarPanelData(data.solarPanelTypeIds[0]):null;const heatPumpData=((_data$heatPumpTypeIds=data.heatPumpTypeIds)===null||_data$heatPumpTypeIds===void 0?void 0:_data$heatPumpTypeIds.length)>0?getHeatPumpData(data.heatPumpTypeIds[0]):null;const batteryData=((_data$batteryIds=data.batteryIds)===null||_data$batteryIds===void 0?void 0:_data$batteryIds.length)>0?getBatteryData(data.batteryIds[0]):null;return{solarPanelOptions:solarData?[{id:data.solarPanelTypeIds[0],installationCost:solarData.cost,annualGeneration:solarData.generation,annualCostSavings:solarData.savings,annualExportRevenue:solarData.export,annualTotalCO2Savings:solarData.co2,monthlyGeneration:solarData.monthlyData.generation,monthlyCostSavings:solarData.monthlyData.savings,monthlyExportRevenue:solarData.monthlyData.export,monthlyDirectCO2Savings:solarData.monthlyData.co2Direct,monthlyIndirectCO2Savings:solarData.monthlyData.co2Indirect}]:[],heatPumpOptions:heatPumpData?[{id:data.heatPumpTypeIds[0],installationCost:heatPumpData.cost,annualGeneration:0,annualCostSavings:heatPumpData.savings,annualExportRevenue:0,annualTotalCO2Savings:heatPumpData.co2,monthlyGeneration:new Array(12).fill(0),monthlyCostSavings:heatPumpData.monthlyData.savings,monthlyExportRevenue:new Array(12).fill(0),monthlyDirectCO2Savings:heatPumpData.monthlyData.co2Direct,monthlyIndirectCO2Savings:heatPumpData.monthlyData.co2Indirect}]:[],batteryOptions:batteryData?[{id:data.batteryIds[0],installationCost:batteryData.cost,annualGeneration:0,annualCostSavings:batteryData.savings,annualExportRevenue:batteryData.exportReduction,annualTotalCO2Savings:0,monthlyGeneration:new Array(12).fill(0),monthlyCostSavings:batteryData.monthlyData.savings,monthlyExportRevenue:batteryData.monthlyData.export,monthlyDirectCO2Savings:batteryData.monthlyData.co2Direct,monthlyIndirectCO2Savings:batteryData.monthlyData.co2Indirect}]:[]};},// 模拟政府补贴\ngetGovernmentSubsidies(data){const subsidies=[];// Heat Pump subsidies\nif(data.hasHeatPump){subsidies.push({subsidyId:\"bus-2024\",name:\"Boiler Upgrade Scheme\",shortDescription:\"Get £7,500 towards the cost of replacing your fossil fuel heating system with a heat pump\",isEligible:true,estimatedAmount:7500,deadline:\"2025-03-31\",applicationUrl:\"https://www.gov.uk/apply-boiler-upgrade-scheme\"});}// Always include some general schemes\nif(!data.hasHeatPump&&!data.hasSolarPanels&&!data.hasBattery){subsidies.push({subsidyId:\"general-eco4-2024\",name:\"ECO4 Scheme\",shortDescription:\"Support for home energy efficiency improvements including insulation and heating upgrades\",isEligible:false,ineligibilityReason:\"Based on current configuration, no qualifying measures selected\",applicationUrl:\"https://www.gov.uk/energy-company-obligation\"});}return{availableSubsidies:subsidies,totalPotentialSavings:subsidies.reduce((sum,s)=>sum+(s.estimatedAmount||0),0),applicableSubsidies:subsidies.filter(s=>s.isEligible).length};},// 获取完整计算结果\ngetCompleteCalculationResult(data){return{solarInstallation:this.getSolarInstallationCost(data),monthlyGeneration:this.getMonthlyElectricityGeneration(data),monthlySavings:this.getMonthlySavings(data),carbonSavings:this.getCarbonSavings(data),paybackAnalysis:{paybackPeriod:8.5,roi:12.8,netPresentValue:8450,internalRateOfReturn:0.135},systemConfiguration:{recommendedSystem:\"8.2kW Solar + 13.5kWh Battery\",annualGeneration:8220,selfConsumption:65,exportToGrid:35}};},// 获取热泵数据\ngetHeatPumps(){return[{id:1,name:\"Air Source Heat Pump - Premium\",type:\"air_source\",capacity:12.0,cop:4.2,cost:16000,price:16000,installationCost:3500},{id:2,name:\"Air Source Heat Pump - Standard\",type:\"air_source\",capacity:10.0,cop:3.8,cost:12500,price:12500,installationCost:3000},{id:3,name:\"Air Source Heat Pump - Basic\",type:\"air_source\",capacity:8.0,cop:3.5,cost:10000,price:10000,installationCost:2500}];},// 获取电池存储系统\ngetBatteries(){return[{id:1,name:\"Tesla Powerwall 2\",capacityKwh:13.5,power:5.0,efficiency:0.92,cost:8500,price:8500,warranty:10},{id:2,name:\"LG Chem RESU\",capacityKwh:9.8,power:5.0,efficiency:0.90,cost:6200,price:6200,warranty:10},{id:3,name:\"Sonnen Eco\",capacityKwh:10.0,power:3.3,efficiency:0.88,cost:7000,price:7000,warranty:10}];}};","map":{"version":3,"names":["mockDataService","getSolarPotentialResult","request","solarPotential","shadingFactor","utilisationFactor","tiltOrientationFactor","solarPanelCount","Math","floor","roofSize","getLocationData","id","name","postcode","country","region","latitude","longitude","getSolarPanelTypes","efficiency","ratedPowerPerPanel","price","costPerWatt","warrantyYears","getTotalInstalledCapacity","data","panelCount","panelWattage","totalCapacity","systemEfficiency","getMonthlyElectricityGeneration","capacity","monthlyGeneration","month","generation","annualGeneration","systemCapacity","getElectricityDemand","baseUsage","annualUsage","monthlyData","round","monthlyValues","Object","values","maxValue","max","minValue","min","peakMonth","keys","find","key","lowMonth","annualElectricityDemand","monthlyElectricityDemand","peakMonthDemand","parseInt","lowMonthDemand","calculationMethod","getGasDemand","annualGasDemand","monthlyGasDemand","getSolarInstallationCost","systemSize","baseCostPerKW","totalCost","equipmentCost","installationCost","permitsCost","otherCosts","costPerKW","paybackPeriod","roi","getMonthlySavings","electricityRate","exportRate","monthlySavings","savings","annualSavings","selfConsumptionRate","getCarbonSavings","carbonIntensity","annualCarbonSaved","lifetimeCarbonSaved","equivalentTrees","equivalentCars","getEquipmentComparison","_data$solarPanelTypeI","_data$heatPumpTypeIds","_data$batteryIds","solarPanels","heatPumps","getHeatPumps","batteries","getBatteries","getSolarPanelData","panelId","panel","p","cost","export","co2","roofArea","systemSizeKW","systemCost","baseGeneration","generationMultiplier","selfUseRatio","exportRatio","annualExport","co2Intensity","annualCO2","monthlyPattern","map","ratio","gen","monthlyExport","monthlyCO2Direct","monthlyCO2Indirect","co2Direct","co2Indirect","getHeatPumpData","heatPumpId","heatPump","h","baseSavings","savingsMultiplier","cop","baseCO2","co2Savings","monthlyCO2","Array","fill","getBatteryData","batteryId","battery","b","capacityKwh","exportReduction","monthlyExportReduction","solarData","solarPanelTypeIds","length","heatPumpData","heatPumpTypeIds","batteryData","batteryIds","solarPanelOptions","annualCostSavings","annualExportRevenue","annualTotalCO2Savings","monthlyCostSavings","monthlyExportRevenue","monthlyDirectCO2Savings","monthlyIndirectCO2Savings","heatPumpOptions","batteryOptions","getGovernmentSubsidies","subsidies","hasHeatPump","push","subsidyId","shortDescription","isEligible","estimatedAmount","deadline","applicationUrl","hasSolarPanels","hasBattery","ineligibilityReason","availableSubsidies","totalPotentialSavings","reduce","sum","s","applicableSubsidies","filter","getCompleteCalculationResult","solarInstallation","carbonSavings","paybackAnalysis","netPresentValue","internalRateOfReturn","systemConfiguration","recommendedSystem","selfConsumption","exportToGrid","type","power","warranty"],"sources":["/Users/xuefei/renewables/calculator/renewableCalculator.ui/src/services/mockDataService.js"],"sourcesContent":["// 模拟数据服务 - 为所有后端API提供fallback数据\nexport const mockDataService = {\n  \n  // 模拟太阳能潜力计算结果\n  getSolarPotentialResult(request) {\n    return {\n      solarPotential: 85.6,\n      shadingFactor: 0.9,\n      utilisationFactor: 0.85,\n      tiltOrientationFactor: 0.95,\n      solarPanelCount: Math.floor((request.roofSize || 50) / 2)\n    };\n  },\n\n  // 模拟位置信息\n  getLocationData() {\n    return [\n      {\n        id: 1,\n        name: \"London\",\n        postcode: \"SW1A 1AA\",\n        country: \"England\",\n        region: \"Greater London\",\n        latitude: 51.5074,\n        longitude: -0.1278\n      },\n      {\n        id: 2,\n        name: \"Manchester\",\n        postcode: \"M1 1AA\",\n        country: \"England\", \n        region: \"Greater Manchester\",\n        latitude: 53.4808,\n        longitude: -2.2426\n      },\n      {\n        id: 3,\n        name: \"Birmingham\",\n        postcode: \"B1 1AA\",\n        country: \"England\",\n        region: \"West Midlands\", \n        latitude: 52.4862,\n        longitude: -1.8904\n      }\n    ];\n  },\n\n  // 模拟太阳能板类型数据\n  getSolarPanelTypes() {\n    return [\n      {\n        id: 1,\n        name: \"Monocrystalline Premium\",\n        efficiency: 22.0,\n        ratedPowerPerPanel: 450,\n        price: 380,\n        costPerWatt: 0.85,\n        warrantyYears: 25\n      },\n      {\n        id: 2, \n        name: \"Monocrystalline Standard\",\n        efficiency: 20.5,\n        ratedPowerPerPanel: 410,\n        price: 310,\n        costPerWatt: 0.75,\n        warrantyYears: 25\n      },\n      {\n        id: 3,\n        name: \"Polycrystalline\", \n        efficiency: 18.5,\n        ratedPowerPerPanel: 370,\n        price: 240,\n        costPerWatt: 0.65,\n        warrantyYears: 20\n      }\n    ];\n  },\n\n  // 模拟总安装容量计算\n  getTotalInstalledCapacity(data) {\n    const panelCount = data.solarPanelCount || 20;\n    const panelWattage = data.panelWattage || 410;\n    return {\n      totalCapacity: (panelCount * panelWattage) / 1000, // kW\n      panelCount: panelCount,\n      panelWattage: panelWattage,\n      systemEfficiency: 0.85\n    };\n  },\n\n  // 模拟月度发电量\n  getMonthlyElectricityGeneration(data) {\n    const capacity = data.totalCapacity || 8.2;\n    return {\n      monthlyGeneration: [\n        { month: 1, generation: capacity * 45 },\n        { month: 2, generation: capacity * 65 },\n        { month: 3, generation: capacity * 95 },\n        { month: 4, generation: capacity * 125 },\n        { month: 5, generation: capacity * 145 },\n        { month: 6, generation: capacity * 155 },\n        { month: 7, generation: capacity * 150 },\n        { month: 8, generation: capacity * 135 },\n        { month: 9, generation: capacity * 110 },\n        { month: 10, generation: capacity * 80 },\n        { month: 11, generation: capacity * 50 },\n        { month: 12, generation: capacity * 35 }\n      ],\n      annualGeneration: capacity * 1200,\n      systemCapacity: capacity\n    };\n  },\n\n  // 模拟电力需求计算\n  getElectricityDemand(data) {\n    const baseUsage = data.annualUsage || 3500;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.09),\n      2: Math.round(baseUsage * 0.08),\n      3: Math.round(baseUsage * 0.08),\n      4: Math.round(baseUsage * 0.07),\n      5: Math.round(baseUsage * 0.07),\n      6: Math.round(baseUsage * 0.07),\n      7: Math.round(baseUsage * 0.08),\n      8: Math.round(baseUsage * 0.08),\n      9: Math.round(baseUsage * 0.08),\n      10: Math.round(baseUsage * 0.09),\n      11: Math.round(baseUsage * 0.10),\n      12: Math.round(baseUsage * 0.11)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualElectricityDemand: baseUsage,\n      monthlyElectricityDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟燃气需求计算  \n  getGasDemand(data) {\n    const baseUsage = data.annualUsage || 12000;\n    const monthlyData = {\n      1: Math.round(baseUsage * 0.15),\n      2: Math.round(baseUsage * 0.13),\n      3: Math.round(baseUsage * 0.11),\n      4: Math.round(baseUsage * 0.08),\n      5: Math.round(baseUsage * 0.05),\n      6: Math.round(baseUsage * 0.03),\n      7: Math.round(baseUsage * 0.03),\n      8: Math.round(baseUsage * 0.03),\n      9: Math.round(baseUsage * 0.05),\n      10: Math.round(baseUsage * 0.08),\n      11: Math.round(baseUsage * 0.12),\n      12: Math.round(baseUsage * 0.14)\n    };\n    \n    const monthlyValues = Object.values(monthlyData);\n    const maxValue = Math.max(...monthlyValues);\n    const minValue = Math.min(...monthlyValues);\n    const peakMonth = Object.keys(monthlyData).find(key => monthlyData[key] === maxValue);\n    const lowMonth = Object.keys(monthlyData).find(key => monthlyData[key] === minValue);\n    \n    return {\n      annualGasDemand: baseUsage,\n      monthlyGasDemand: monthlyData,\n      peakMonthDemand: maxValue,\n      peakMonth: parseInt(peakMonth),\n      lowMonthDemand: minValue,\n      lowMonth: parseInt(lowMonth),\n      calculationMethod: 'estimated'\n    };\n  },\n\n  // 模拟太阳能安装成本\n  getSolarInstallationCost(data) {\n    const systemSize = data.systemSize || 8.2;\n    const baseCostPerKW = 1850;\n    const totalCost = systemSize * baseCostPerKW;\n    \n    return {\n      systemSize: systemSize,\n      equipmentCost: totalCost * 0.6,\n      installationCost: totalCost * 0.25,\n      permitsCost: totalCost * 0.05,\n      otherCosts: totalCost * 0.1,\n      totalCost: totalCost,\n      costPerKW: baseCostPerKW,\n      paybackPeriod: 8.5,\n      roi: 12.8\n    };\n  },\n\n  // 模拟月度节约计算\n  getMonthlySavings(data) {\n    const monthlyGeneration = data.monthlyGeneration || 685;\n    const electricityRate = data.electricityRate || 0.28;\n    const exportRate = data.exportRate || 0.15;\n    \n    return {\n      monthlySavings: [\n        { month: 1, savings: monthlyGeneration * 0.4 * electricityRate + monthlyGeneration * 0.6 * exportRate },\n        { month: 2, savings: monthlyGeneration * 0.5 * electricityRate + monthlyGeneration * 0.5 * exportRate },\n        { month: 3, savings: monthlyGeneration * 0.6 * electricityRate + monthlyGeneration * 0.4 * exportRate },\n        { month: 4, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 5, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 6, savings: monthlyGeneration * 0.8 * electricityRate + monthlyGeneration * 0.2 * exportRate },\n        { month: 7, savings: monthlyGeneration * 0.75 * electricityRate + monthlyGeneration * 0.25 * exportRate },\n        { month: 8, savings: monthlyGeneration * 0.7 * electricityRate + monthlyGeneration * 0.3 * exportRate },\n        { month: 9, savings: monthlyGeneration * 0.65 * electricityRate + monthlyGeneration * 0.35 * exportRate },\n        { month: 10, savings: monthlyGeneration * 0.55 * electricityRate + monthlyGeneration * 0.45 * exportRate },\n        { month: 11, savings: monthlyGeneration * 0.45 * electricityRate + monthlyGeneration * 0.55 * exportRate },\n        { month: 12, savings: monthlyGeneration * 0.35 * electricityRate + monthlyGeneration * 0.65 * exportRate }\n      ],\n      annualSavings: monthlyGeneration * 12 * ((0.6 * electricityRate) + (0.4 * exportRate)),\n      selfConsumptionRate: 0.6,\n      exportRate: 0.4\n    };\n  },\n\n  // 模拟碳排放节约\n  getCarbonSavings(data) {\n    const annualGeneration = data.annualGeneration || 8220;\n    const carbonIntensity = 0.233; // kg CO2/kWh UK grid average\n    \n    return {\n      annualCarbonSaved: annualGeneration * carbonIntensity,\n      lifetimeCarbonSaved: annualGeneration * carbonIntensity * 25,\n      equivalentTrees: Math.round(annualGeneration * carbonIntensity / 21.8),\n      equivalentCars: Math.round(annualGeneration * carbonIntensity / 4600),\n      carbonIntensity: carbonIntensity\n    };\n  },\n\n  // 模拟设备对比\n  getEquipmentComparison(data) {\n    const solarPanels = this.getSolarPanelTypes();\n    const heatPumps = this.getHeatPumps();\n    const batteries = this.getBatteries();\n    \n    // 根据选择的设备ID获取对应的价格和性能\n    const getSolarPanelData = (panelId) => {\n      const panel = solarPanels.find(p => p.id == panelId);\n      if (!panel) return { cost: 12500, generation: 8200, savings: 1250, export: 350, co2: 2100 };\n      \n      // 计算系统规模\n      const panelCount = Math.floor((data.roofArea || 60) / 2); // 假设每块板2平米\n      const systemSizeKW = (panelCount * panel.ratedPowerPerPanel) / 1000;\n      \n      // 成本计算\n      const systemCost = panel.price * panelCount;\n      const installationCost = systemCost * 0.3;\n      const totalCost = Math.round(systemCost + installationCost);\n      \n      // 发电量计算（基于效率）\n      const baseGeneration = 8200;\n      const generationMultiplier = panel.efficiency / 20.5; // 以Standard面板为基准\n      const annualGeneration = Math.round(baseGeneration * generationMultiplier * (systemSizeKW / 8.2));\n      \n      // 节约和收入计算\n      const electricityRate = 0.28; // £/kWh\n      const exportRate = 0.15; // £/kWh\n      const selfUseRatio = 0.65; // 65%自用\n      const exportRatio = 0.35; // 35%出口\n      \n      const annualSavings = Math.round(annualGeneration * selfUseRatio * electricityRate);\n      const annualExport = Math.round(annualGeneration * exportRatio * exportRate);\n      \n      // CO2节约计算\n      const co2Intensity = 0.233; // kg CO2/kWh\n      const annualCO2 = Math.round(annualGeneration * co2Intensity);\n      \n      // 月度数据计算\n      const monthlyPattern = [0.05, 0.07, 0.10, 0.13, 0.16, 0.17, 0.16, 0.15, 0.12, 0.08, 0.05, 0.04];\n      const monthlyGeneration = monthlyPattern.map(ratio => Math.round(annualGeneration * ratio));\n      const monthlySavings = monthlyGeneration.map(gen => Math.round(gen * selfUseRatio * electricityRate));\n      const monthlyExport = monthlyGeneration.map(gen => Math.round(gen * exportRatio * exportRate));\n      const monthlyCO2Direct = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.7));\n      const monthlyCO2Indirect = monthlyGeneration.map(gen => Math.round(gen * co2Intensity * 0.3));\n      \n      return {\n        cost: totalCost,\n        generation: annualGeneration,\n        savings: annualSavings,\n        export: annualExport,\n        co2: annualCO2,\n        monthlyData: {\n          generation: monthlyGeneration,\n          savings: monthlySavings,\n          export: monthlyExport,\n          co2Direct: monthlyCO2Direct,\n          co2Indirect: monthlyCO2Indirect\n        }\n      };\n    };\n    \n    const getHeatPumpData = (heatPumpId) => {\n      const heatPump = heatPumps.find(h => h.id == heatPumpId);\n      if (!heatPump) return { cost: 10500, savings: 850, co2: 1800 };\n      \n      const totalCost = heatPump.cost + heatPump.installationCost;\n      \n      // 基于COP计算效率和节约\n      const baseSavings = 850;\n      const savingsMultiplier = heatPump.cop / 3.8; // 以Standard为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n      \n      // CO2节约（热泵替代燃气）\n      const baseCO2 = 1800;\n      const co2Savings = Math.round(baseCO2 * savingsMultiplier);\n      \n      // 月度数据（冬季高，夏季低）\n      const monthlyPattern = [0.15, 0.13, 0.11, 0.08, 0.05, 0.03, 0.03, 0.03, 0.05, 0.08, 0.12, 0.14];\n      const monthlySavings = monthlyPattern.map(ratio => Math.round(annualSavings * ratio));\n      const monthlyCO2 = monthlyPattern.map(ratio => Math.round(co2Savings * ratio));\n      \n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        co2: co2Savings,\n        monthlyData: {\n          savings: monthlySavings,\n          co2Direct: monthlyCO2,\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n    \n    const getBatteryData = (batteryId) => {\n      const battery = batteries.find(b => b.id == batteryId);\n      if (!battery) return { cost: 8500, savings: 420 };\n      \n      const totalCost = battery.cost + 1500; // 加安装费\n      \n      // 基于容量计算节约（更大容量=更多节约）\n      const baseSavings = 420;\n      const savingsMultiplier = battery.capacityKwh / 9.8; // 以LG Chem为基准\n      const annualSavings = Math.round(baseSavings * savingsMultiplier);\n      \n      // 电池存储会减少出口收入\n      const exportReduction = Math.round(annualSavings * 0.3);\n      \n      const monthlySavings = new Array(12).fill(Math.round(annualSavings / 12));\n      const monthlyExportReduction = new Array(12).fill(Math.round(-exportReduction / 12));\n      \n      return {\n        cost: totalCost,\n        savings: annualSavings,\n        exportReduction: -exportReduction,\n        monthlyData: {\n          savings: monthlySavings,\n          export: monthlyExportReduction,\n          co2Direct: new Array(12).fill(0),\n          co2Indirect: new Array(12).fill(0)\n        }\n      };\n    };\n    \n    // 模拟真实API返回的设备对比结果格式\n    const solarData = data.solarPanelTypeIds?.length > 0 ? getSolarPanelData(data.solarPanelTypeIds[0]) : null;\n    const heatPumpData = data.heatPumpTypeIds?.length > 0 ? getHeatPumpData(data.heatPumpTypeIds[0]) : null;\n    const batteryData = data.batteryIds?.length > 0 ? getBatteryData(data.batteryIds[0]) : null;\n    \n    return {\n      solarPanelOptions: solarData ? [{\n        id: data.solarPanelTypeIds[0],\n        installationCost: solarData.cost,\n        annualGeneration: solarData.generation,\n        annualCostSavings: solarData.savings,\n        annualExportRevenue: solarData.export,\n        annualTotalCO2Savings: solarData.co2,\n        monthlyGeneration: solarData.monthlyData.generation,\n        monthlyCostSavings: solarData.monthlyData.savings,\n        monthlyExportRevenue: solarData.monthlyData.export,\n        monthlyDirectCO2Savings: solarData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: solarData.monthlyData.co2Indirect\n      }] : [],\n      \n      heatPumpOptions: heatPumpData ? [{\n        id: data.heatPumpTypeIds[0],\n        installationCost: heatPumpData.cost,\n        annualGeneration: 0,\n        annualCostSavings: heatPumpData.savings,\n        annualExportRevenue: 0,\n        annualTotalCO2Savings: heatPumpData.co2,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: heatPumpData.monthlyData.savings,\n        monthlyExportRevenue: new Array(12).fill(0),\n        monthlyDirectCO2Savings: heatPumpData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: heatPumpData.monthlyData.co2Indirect\n      }] : [],\n      \n      batteryOptions: batteryData ? [{\n        id: data.batteryIds[0],\n        installationCost: batteryData.cost,\n        annualGeneration: 0,\n        annualCostSavings: batteryData.savings,\n        annualExportRevenue: batteryData.exportReduction,\n        annualTotalCO2Savings: 0,\n        monthlyGeneration: new Array(12).fill(0),\n        monthlyCostSavings: batteryData.monthlyData.savings,\n        monthlyExportRevenue: batteryData.monthlyData.export,\n        monthlyDirectCO2Savings: batteryData.monthlyData.co2Direct,\n        monthlyIndirectCO2Savings: batteryData.monthlyData.co2Indirect\n      }] : []\n    };\n  },\n\n  // 模拟政府补贴\n  getGovernmentSubsidies(data) {\n    const subsidies = [];\n    \n    // Heat Pump subsidies\n    if (data.hasHeatPump) {\n      subsidies.push({\n        subsidyId: \"bus-2024\",\n        name: \"Boiler Upgrade Scheme\",\n        shortDescription: \"Get £7,500 towards the cost of replacing your fossil fuel heating system with a heat pump\",\n        isEligible: true,\n        estimatedAmount: 7500,\n        deadline: \"2025-03-31\",\n        applicationUrl: \"https://www.gov.uk/apply-boiler-upgrade-scheme\"\n      });\n    }\n    \n    // Always include some general schemes\n    if (!data.hasHeatPump && !data.hasSolarPanels && !data.hasBattery) {\n      subsidies.push({\n        subsidyId: \"general-eco4-2024\",\n        name: \"ECO4 Scheme\",\n        shortDescription: \"Support for home energy efficiency improvements including insulation and heating upgrades\",\n        isEligible: false,\n        ineligibilityReason: \"Based on current configuration, no qualifying measures selected\",\n        applicationUrl: \"https://www.gov.uk/energy-company-obligation\"\n      });\n    }\n    \n    return {\n      availableSubsidies: subsidies,\n      totalPotentialSavings: subsidies.reduce((sum, s) => sum + (s.estimatedAmount || 0), 0),\n      applicableSubsidies: subsidies.filter(s => s.isEligible).length\n    };\n  },\n\n  // 获取完整计算结果\n  getCompleteCalculationResult(data) {\n    return {\n      solarInstallation: this.getSolarInstallationCost(data),\n      monthlyGeneration: this.getMonthlyElectricityGeneration(data),\n      monthlySavings: this.getMonthlySavings(data),\n      carbonSavings: this.getCarbonSavings(data),\n      paybackAnalysis: {\n        paybackPeriod: 8.5,\n        roi: 12.8,\n        netPresentValue: 8450,\n        internalRateOfReturn: 0.135\n      },\n      systemConfiguration: {\n        recommendedSystem: \"8.2kW Solar + 13.5kWh Battery\",\n        annualGeneration: 8220,\n        selfConsumption: 65,\n        exportToGrid: 35\n      }\n    };\n  },\n\n  // 获取热泵数据\n  getHeatPumps() {\n    return [\n      {\n        id: 1,\n        name: \"Air Source Heat Pump - Premium\",\n        type: \"air_source\",\n        capacity: 12.0,\n        cop: 4.2,\n        cost: 16000,\n        price: 16000,\n        installationCost: 3500\n      },\n      {\n        id: 2,\n        name: \"Air Source Heat Pump - Standard\", \n        type: \"air_source\",\n        capacity: 10.0,\n        cop: 3.8,\n        cost: 12500,\n        price: 12500,\n        installationCost: 3000\n      },\n      {\n        id: 3,\n        name: \"Air Source Heat Pump - Basic\",\n        type: \"air_source\", \n        capacity: 8.0,\n        cop: 3.5,\n        cost: 10000,\n        price: 10000,\n        installationCost: 2500\n      }\n    ];\n  },\n\n  // 获取电池存储系统\n  getBatteries() {\n    return [\n      {\n        id: 1,\n        name: \"Tesla Powerwall 2\",\n        capacityKwh: 13.5,\n        power: 5.0,\n        efficiency: 0.92,\n        cost: 8500,\n        price: 8500,\n        warranty: 10\n      },\n      {\n        id: 2,\n        name: \"LG Chem RESU\",\n        capacityKwh: 9.8,\n        power: 5.0,\n        efficiency: 0.90,\n        cost: 6200,\n        price: 6200,\n        warranty: 10\n      },\n      {\n        id: 3,\n        name: \"Sonnen Eco\",\n        capacityKwh: 10.0,\n        power: 3.3,\n        efficiency: 0.88,\n        cost: 7000,\n        price: 7000,\n        warranty: 10\n      }\n    ];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}